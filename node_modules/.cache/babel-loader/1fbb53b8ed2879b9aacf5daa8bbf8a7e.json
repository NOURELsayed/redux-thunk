{"ast":null,"code":"import { servicePointService } from '../services';\nimport { returnRequest } from \"../config/development\";\nexport function ListToArray(list) {\n  const array = [];\n\n  for (let i = 0; i < list.length; i++) {\n    array.push(list.item(i));\n  }\n\n  return array;\n} // generate category options\n\nexport function createOptions(categories) {\n  return categories.map(c => {\n    return {\n      key: c.id,\n      value: c.id,\n      text: c.name.english\n    };\n  });\n}\nexport function getSubcategories(categories, categoryId, level) {\n  return categories[level].find(category => category.id === categoryId).subcategories;\n}\nexport async function getServicePoint(id) {\n  const {\n    data\n  } = await servicePointService.getServicePoints();\n  return data.servicePoints.map(SP => {\n    let text = SP.name;\n    return {\n      key: SP._id,\n      value: SP._id,\n      text: text\n    };\n  }); //returned arra of servicePoints \n}\nexport function formulateReturnPeriodExpiryDate(orderData) {\n  const returnPeriodExpiresAt = addDays(orderData.dropOffTime, returnRequest) + \"\";\n  const dividedDate = returnPeriodExpiresAt.split(\" \");\n  const day = dividedDate[0];\n  const month = dividedDate[1];\n  const dayNumber = dividedDate[2];\n  const year = dividedDate[3];\n  const combinedDate = day + \" \" + dayNumber + \" \" + month + \" \" + year;\n  return {\n    returnPeriodExpiresAt,\n    combinedDate\n  };\n}\n\nfunction addDays(date, days) {\n  const result = new Date(date);\n  result.setDate(result.getDate() + days);\n  return result;\n}\n\n;","map":{"version":3,"sources":["/media/norhan/New Volume/work/React-projects/test-redux/src/helpers/utils.js"],"names":["servicePointService","returnRequest","ListToArray","list","array","i","length","push","item","createOptions","categories","map","c","key","id","value","text","name","english","getSubcategories","categoryId","level","find","category","subcategories","getServicePoint","data","getServicePoints","servicePoints","SP","_id","formulateReturnPeriodExpiryDate","orderData","returnPeriodExpiresAt","addDays","dropOffTime","dividedDate","split","day","month","dayNumber","year","combinedDate","date","days","result","Date","setDate","getDate"],"mappings":"AAAA,SAAQA,mBAAR,QAAkC,aAAlC;AACA,SAASC,aAAT,QAA8B,uBAA9B;AAEA,OAAO,SAASC,WAAT,CAAqBC,IAArB,EAA2B;AAChC,QAAMC,KAAK,GAAG,EAAd;;AACA,OAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGF,IAAI,CAACG,MAAzB,EAAiCD,CAAC,EAAlC,EAAsC;AACpCD,IAAAA,KAAK,CAACG,IAAN,CAAWJ,IAAI,CAACK,IAAL,CAAUH,CAAV,CAAX;AACD;;AACD,SAAOD,KAAP;AACD,C,CAED;;AACA,OAAO,SAASK,aAAT,CAAuBC,UAAvB,EAAmC;AACxC,SAAOA,UAAU,CAACC,GAAX,CAAeC,CAAC,IAAI;AACzB,WAAO;AAACC,MAAAA,GAAG,EAAED,CAAC,CAACE,EAAR;AAAYC,MAAAA,KAAK,EAAEH,CAAC,CAACE,EAArB;AAAyBE,MAAAA,IAAI,EAAEJ,CAAC,CAACK,IAAF,CAAOC;AAAtC,KAAP;AACD,GAFM,CAAP;AAGD;AAED,OAAO,SAASC,gBAAT,CAA0BT,UAA1B,EAAsCU,UAAtC,EAAkDC,KAAlD,EAAyD;AAC9D,SAAOX,UAAU,CAACW,KAAD,CAAV,CAAkBC,IAAlB,CAAuBC,QAAQ,IAAIA,QAAQ,CAACT,EAAT,KAAgBM,UAAnD,EAA+DI,aAAtE;AACD;AACD,OAAO,eAAeC,eAAf,CAA+BX,EAA/B,EAAkC;AACxC,QAAM;AAACY,IAAAA;AAAD,MAAU,MAAM1B,mBAAmB,CAAC2B,gBAApB,EAAtB;AACA,SAAOD,IAAI,CAACE,aAAL,CAAmBjB,GAAnB,CAAuBkB,EAAE,IAAE;AAChC,QAAIb,IAAI,GAAGa,EAAE,CAACZ,IAAd;AACD,WAAO;AAACJ,MAAAA,GAAG,EAACgB,EAAE,CAACC,GAAR;AAAYf,MAAAA,KAAK,EAACc,EAAE,CAACC,GAArB;AAAyBd,MAAAA,IAAI,EAACA;AAA9B,KAAP;AAEA,GAJM,CAAP,CAFwC,CAQvC;AAED;AAED,OAAO,SAASe,+BAAT,CAAyCC,SAAzC,EAAoD;AACzD,QAAMC,qBAAqB,GAC3BC,OAAO,CAACF,SAAS,CAACG,WAAX,EAAwBlC,aAAxB,CAAP,GAAgD,EADhD;AAGA,QAAMmC,WAAW,GAAGH,qBAAqB,CAACI,KAAtB,CAA4B,GAA5B,CAApB;AACA,QAAMC,GAAG,GAAGF,WAAW,CAAC,CAAD,CAAvB;AACA,QAAMG,KAAK,GAAGH,WAAW,CAAC,CAAD,CAAzB;AACA,QAAMI,SAAS,GAAGJ,WAAW,CAAC,CAAD,CAA7B;AACA,QAAMK,IAAI,GAAGL,WAAW,CAAC,CAAD,CAAxB;AACA,QAAMM,YAAY,GAAIJ,GAAG,GAAG,GAAN,GAAYE,SAAZ,GAAwB,GAAxB,GAA8BD,KAA9B,GAAsC,GAAtC,GAA4CE,IAAlE;AAEA,SAAO;AAAER,IAAAA,qBAAF;AAAyBS,IAAAA;AAAzB,GAAP;AACD;;AAED,SAASR,OAAT,CAAiBS,IAAjB,EAAuBC,IAAvB,EAA6B;AAC3B,QAAMC,MAAM,GAAG,IAAIC,IAAJ,CAASH,IAAT,CAAf;AACAE,EAAAA,MAAM,CAACE,OAAP,CAAeF,MAAM,CAACG,OAAP,KAAmBJ,IAAlC;AACA,SAAOC,MAAP;AACD;;AAAA","sourcesContent":["import {servicePointService} from '../services';\r\nimport { returnRequest } from \"../config/development\";\r\n\r\nexport function ListToArray(list) {\r\n  const array = [];\r\n  for (let i = 0; i < list.length; i++) {\r\n    array.push(list.item(i));\r\n  }\r\n  return array;\r\n}\r\n\r\n// generate category options\r\nexport function createOptions(categories) {\r\n  return categories.map(c => {\r\n    return {key: c.id, value: c.id, text: c.name.english}\r\n  });\r\n}\r\n\r\nexport function getSubcategories(categories, categoryId, level) {\r\n  return categories[level].find(category => category.id === categoryId).subcategories;\r\n}\r\nexport async function getServicePoint(id){\r\n const {data} =  await servicePointService.getServicePoints()\r\n return data.servicePoints.map(SP=>{\r\n   let text = SP.name\r\n  return {key:SP._id,value:SP._id,text:text}\r\n  \r\n })\r\n\r\n  //returned arra of servicePoints \r\n  \r\n}\r\n\r\nexport function formulateReturnPeriodExpiryDate(orderData) {\r\n  const returnPeriodExpiresAt =\r\n  addDays(orderData.dropOffTime, returnRequest) + \"\";\r\n\r\n  const dividedDate = returnPeriodExpiresAt.split(\" \");\r\n  const day = dividedDate[0];\r\n  const month = dividedDate[1];\r\n  const dayNumber = dividedDate[2];\r\n  const year = dividedDate[3];\r\n  const combinedDate =  day + \" \" + dayNumber + \" \" + month + \" \" + year;\r\n\r\n  return { returnPeriodExpiresAt, combinedDate };\r\n}\r\n\r\nfunction addDays(date, days) {\r\n  const result = new Date(date);\r\n  result.setDate(result.getDate() + days);\r\n  return result;\r\n};\r\n"]},"metadata":{},"sourceType":"module"}