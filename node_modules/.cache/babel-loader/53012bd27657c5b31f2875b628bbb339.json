{"ast":null,"code":"import { servicePointService, userService } from \"../services\";\nimport { alertActions } from \"./\";\nimport { servicePointConstants } from \"../constants\";\nexport const servicePointActions = {\n  getServicePointsData,\n  selectedPersonInChargeChanged,\n  nearestServicePointChoiceChanged,\n  selectedServicePointChanged,\n  selectedArrivalDateChanged,\n  selectedArrivalTimeChanged,\n  authorizedPersonNameChanged,\n  authorizedPersonIDChanged,\n  confirmAuthorizedPersonInfo,\n  clearSPState\n}; //-----------------------------------------Get Data Functions---------------------------------\n\nfunction getServicePointsData() {\n  return async dispatch => {\n    await dispatch(request());\n\n    try {\n      const {\n        data\n      } = await servicePointService.getServicePoints();\n      dispatch(success(data.servicePoints));\n    } catch (ex) {\n      dispatch(failure(ex));\n      dispatch(alertActions.error({\n        header: \"can't get service points data\",\n        content: ex.message\n      }));\n    }\n  };\n\n  function request() {\n    return {\n      type: servicePointConstants.GET_SERVICE_POINTS_REQUEST\n    };\n  }\n\n  function success(servicePoints) {\n    return {\n      type: servicePointConstants.GET_SERVICE_POINTS_SUCCESS,\n      servicePoints\n    };\n  }\n\n  function failure(error) {\n    return {\n      type: servicePointConstants.GET_SERVICE_POINTS_FAILURE,\n      error\n    };\n  }\n}\n/*---------------------- Form Actions -------------------------*/\n\n\nfunction selectedPersonInChargeChanged(personInCharge) {\n  return async dispatch => {\n    dispatch({\n      type: servicePointConstants.PERSON_IN_CHARGE_CHANGED,\n      personInCharge\n    });\n  };\n}\n\nfunction nearestServicePointChoiceChanged(checked) {\n  return async dispatch => {\n    dispatch({\n      type: servicePointConstants.NEAREAST_SERVICE_POINT_CHOICE_CHANGED,\n      nearestServicePointChecked: checked\n    });\n  };\n}\n\nfunction selectedServicePointChanged(servicePointId) {\n  return async dispatch => {\n    dispatch({\n      type: servicePointConstants.SELECTED_SERVICE_POINT_CHANGED,\n      servicePointId\n    });\n  };\n}\n\nfunction selectedArrivalDateChanged(date) {\n  return async dispatch => {\n    dispatch({\n      type: servicePointConstants.SELECTED_ARRIVAL_DATE_CHANGED,\n      date\n    });\n  };\n}\n\nfunction selectedArrivalTimeChanged(time) {\n  return async dispatch => {\n    dispatch({\n      type: servicePointConstants.SELECTED_ARRIVAL_TIME_CHANGED,\n      time\n    });\n  };\n}\n\nfunction authorizedPersonNameChanged(name) {\n  return async dispatch => {\n    dispatch({\n      type: servicePointConstants.AUTHORIZED_PERSON_NAME_CHANGED,\n      name\n    });\n  };\n}\n\nfunction authorizedPersonIDChanged(id) {\n  return async dispatch => {\n    dispatch({\n      type: servicePointConstants.AUTHORIZED_PERSON_ID_CHANGED,\n      id\n    });\n  };\n}\n\nfunction confirmAuthorizedPersonInfo(nationalID) {\n  return async dispatch => {\n    await dispatch(request());\n\n    try {\n      const {\n        data\n      } = await userService.getUserIDByNationalId(nationalID);\n      dispatch(success(data.userId));\n    } catch (ex) {\n      dispatch(failure(ex));\n      dispatch(alertActions.error({\n        header: \"can't verify authorized person data\",\n        content: ex.message\n      }));\n    }\n  };\n\n  function request() {\n    return {\n      type: servicePointConstants.CONFIRM_AUTHORIZED_PERSON_DATA_REQUEST\n    };\n  }\n\n  function success(userId) {\n    return {\n      type: servicePointConstants.CONFIRM_AUTHORIZED_PERSON_DATA_SUCCESS,\n      userId\n    };\n  }\n\n  function failure(error) {\n    return {\n      type: servicePointConstants.CONFIRM_AUTHORIZED_PERSON_DATA_FAILURE,\n      error\n    };\n  }\n}\n\nfunction clearSPState() {\n  return dispatch => {\n    dispatch({\n      type: servicePointConstants.CLEAR\n    });\n  };\n}","map":{"version":3,"sources":["/media/norhan/New Volume/work/React-projects/test-redux/src/actions/servicePoint.actions.js"],"names":["servicePointService","userService","alertActions","servicePointConstants","servicePointActions","getServicePointsData","selectedPersonInChargeChanged","nearestServicePointChoiceChanged","selectedServicePointChanged","selectedArrivalDateChanged","selectedArrivalTimeChanged","authorizedPersonNameChanged","authorizedPersonIDChanged","confirmAuthorizedPersonInfo","clearSPState","dispatch","request","data","getServicePoints","success","servicePoints","ex","failure","error","header","content","message","type","GET_SERVICE_POINTS_REQUEST","GET_SERVICE_POINTS_SUCCESS","GET_SERVICE_POINTS_FAILURE","personInCharge","PERSON_IN_CHARGE_CHANGED","checked","NEAREAST_SERVICE_POINT_CHOICE_CHANGED","nearestServicePointChecked","servicePointId","SELECTED_SERVICE_POINT_CHANGED","date","SELECTED_ARRIVAL_DATE_CHANGED","time","SELECTED_ARRIVAL_TIME_CHANGED","name","AUTHORIZED_PERSON_NAME_CHANGED","id","AUTHORIZED_PERSON_ID_CHANGED","nationalID","getUserIDByNationalId","userId","CONFIRM_AUTHORIZED_PERSON_DATA_REQUEST","CONFIRM_AUTHORIZED_PERSON_DATA_SUCCESS","CONFIRM_AUTHORIZED_PERSON_DATA_FAILURE","CLEAR"],"mappings":"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","sourcesContent":["import { servicePointService, userService } from \"../services\";\r\nimport { alertActions } from \"./\";\r\nimport { servicePointConstants } from \"../constants\";\r\n\r\nexport const servicePointActions = {\r\n  getServicePointsData,\r\n  selectedPersonInChargeChanged,\r\n  nearestServicePointChoiceChanged,\r\n  selectedServicePointChanged,\r\n  selectedArrivalDateChanged,\r\n  selectedArrivalTimeChanged,\r\n  authorizedPersonNameChanged,\r\n  authorizedPersonIDChanged,\r\n  confirmAuthorizedPersonInfo,\r\n  clearSPState,\r\n};\r\n\r\n//-----------------------------------------Get Data Functions---------------------------------\r\nfunction getServicePointsData() {\r\n  return async (dispatch) => {\r\n    await dispatch(request());\r\n    try {\r\n      const { data } = await servicePointService.getServicePoints();\r\n      dispatch(success(data.servicePoints));\r\n    } catch (ex) {\r\n      dispatch(failure(ex));\r\n      dispatch(\r\n        alertActions.error({\r\n          header: \"can't get service points data\",\r\n          content: ex.message,\r\n        })\r\n      );\r\n    }\r\n  };\r\n\r\n  function request() {\r\n    return {\r\n      type: servicePointConstants.GET_SERVICE_POINTS_REQUEST,\r\n    };\r\n  }\r\n\r\n  function success(servicePoints) {\r\n    return {\r\n      type: servicePointConstants.GET_SERVICE_POINTS_SUCCESS,\r\n      servicePoints,\r\n    };\r\n  }\r\n\r\n  function failure(error) {\r\n    return {\r\n      type: servicePointConstants.GET_SERVICE_POINTS_FAILURE,\r\n      error,\r\n    };\r\n  }\r\n}\r\n\r\n/*---------------------- Form Actions -------------------------*/\r\nfunction selectedPersonInChargeChanged(personInCharge) {\r\n  return async (dispatch) => {\r\n    dispatch({\r\n      type: servicePointConstants.PERSON_IN_CHARGE_CHANGED,\r\n      personInCharge,\r\n    });\r\n  };\r\n}\r\n\r\nfunction nearestServicePointChoiceChanged(checked) {\r\n  return async (dispatch) => {\r\n    dispatch({\r\n      type: servicePointConstants.NEAREAST_SERVICE_POINT_CHOICE_CHANGED,\r\n      nearestServicePointChecked: checked,\r\n    });\r\n  };\r\n}\r\n\r\nfunction selectedServicePointChanged(servicePointId) {\r\n  return async (dispatch) => {\r\n    dispatch({\r\n      type: servicePointConstants.SELECTED_SERVICE_POINT_CHANGED,\r\n      servicePointId,\r\n    });\r\n  };\r\n}\r\n\r\nfunction selectedArrivalDateChanged(date) {\r\n  return async (dispatch) => {\r\n    dispatch({\r\n      type: servicePointConstants.SELECTED_ARRIVAL_DATE_CHANGED,\r\n      date,\r\n    });\r\n  };\r\n}\r\n\r\nfunction selectedArrivalTimeChanged(time) {\r\n  return async (dispatch) => {\r\n    dispatch({\r\n      type: servicePointConstants.SELECTED_ARRIVAL_TIME_CHANGED,\r\n      time,\r\n    });\r\n  };\r\n}\r\n\r\nfunction authorizedPersonNameChanged(name) {\r\n  return async (dispatch) => {\r\n    dispatch({\r\n      type: servicePointConstants.AUTHORIZED_PERSON_NAME_CHANGED,\r\n      name,\r\n    });\r\n  };\r\n}\r\n\r\nfunction authorizedPersonIDChanged(id) {\r\n  return async (dispatch) => {\r\n    dispatch({\r\n      type: servicePointConstants.AUTHORIZED_PERSON_ID_CHANGED,\r\n      id,\r\n    });\r\n  };\r\n}\r\n\r\nfunction confirmAuthorizedPersonInfo(nationalID) {\r\n  return async (dispatch) => {\r\n    await dispatch(request());\r\n    try {\r\n      const { data } = await userService.getUserIDByNationalId(nationalID);\r\n      dispatch(success(data.userId));\r\n    } catch (ex) {\r\n      dispatch(failure(ex));\r\n      dispatch(\r\n        alertActions.error({\r\n          header: \"can't verify authorized person data\",\r\n          content: ex.message,\r\n        })\r\n      );\r\n    }\r\n  };\r\n  function request() {\r\n    return {\r\n      type: servicePointConstants.CONFIRM_AUTHORIZED_PERSON_DATA_REQUEST,\r\n    };\r\n  }\r\n\r\n  function success(userId) {\r\n    return {\r\n      type: servicePointConstants.CONFIRM_AUTHORIZED_PERSON_DATA_SUCCESS,\r\n      userId,\r\n    };\r\n  }\r\n\r\n  function failure(error) {\r\n    return {\r\n      type: servicePointConstants.CONFIRM_AUTHORIZED_PERSON_DATA_FAILURE,\r\n      error,\r\n    };\r\n  }\r\n}\r\n\r\nfunction clearSPState() {\r\n  return (dispatch) => {\r\n      dispatch({ type: servicePointConstants.CLEAR });\r\n  };\r\n}"]},"metadata":{},"sourceType":"module"}