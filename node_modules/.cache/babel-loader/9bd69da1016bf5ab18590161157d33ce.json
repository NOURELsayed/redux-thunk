{"ast":null,"code":"import { searchConstants } from '../constants';\nimport { searchService } from '../services';\nimport { history } from '../helpers';\nimport { alertActions } from './';\nexport const searchActions = {\n  simpleSearch,\n  searchKeywordChanged,\n  filterChanged,\n  maxPriceFilterChanged\n};\n\nfunction simpleSearch(keyWord) {\n  return async dispatch => {\n    await dispatch(request(keyWord));\n\n    try {\n      history.push(`/search/${keyWord}`);\n      const {\n        data\n      } = await searchService.search(keyWord);\n      dispatch(success(keyWord, data));\n    } catch (ex) {\n      dispatch(failure(ex));\n      dispatch(alertActions.error({\n        header: ex\n      }));\n    }\n  };\n\n  function request(keyWord) {\n    return {\n      type: searchConstants.SEARCH_REQUEST,\n      searchKeyWord: keyWord,\n      isLoading: true\n    };\n  }\n\n  function success(keyWord, searchResults) {\n    return {\n      type: searchConstants.SEARCH_SUCCESS,\n      searchResults,\n      searchKeyWord: keyWord,\n      isLoading: false\n    };\n  }\n\n  function failure(error) {\n    return {\n      type: searchConstants.SEARCH_FAILURE,\n      error,\n      isLoading: false\n    };\n  }\n}\n\nfunction searchKeywordChanged(keyWord) {\n  return async dispatch => {\n    dispatch(request(keyWord));\n  };\n\n  function request(keyWord) {\n    return {\n      type: searchConstants.SEARCH_KEYWORD_CHANGED,\n      searchKeyWord: keyWord\n    };\n  }\n}\n\nfunction filterChanged(name, value, selected) {\n  if (selected) {\n    return {\n      type: searchConstants.FILTER_CHANGE_ADD,\n      name,\n      value\n    };\n  }\n\n  return {\n    type: searchConstants.FILTER_CHANGE_REMOVE,\n    name,\n    value\n  };\n}\n\nfunction maxPriceFilterChanged(value) {\n  return {\n    type: searchConstants.MAX_PRICE_FILTER_SET,\n    value\n  };\n}","map":{"version":3,"sources":["/media/norhan/New Volume/work/React-projects/test-redux/src/actions/search.actions.js"],"names":["searchConstants","searchService","history","alertActions","searchActions","simpleSearch","searchKeywordChanged","filterChanged","maxPriceFilterChanged","keyWord","dispatch","request","push","data","search","success","ex","failure","error","header","type","SEARCH_REQUEST","searchKeyWord","isLoading","searchResults","SEARCH_SUCCESS","SEARCH_FAILURE","SEARCH_KEYWORD_CHANGED","name","value","selected","FILTER_CHANGE_ADD","FILTER_CHANGE_REMOVE","MAX_PRICE_FILTER_SET"],"mappings":"AAAA,SAASA,eAAT,QAAgC,cAAhC;AACA,SAASC,aAAT,QAA8B,aAA9B;AACA,SAASC,OAAT,QAAwB,YAAxB;AACA,SAASC,YAAT,QAA6B,IAA7B;AAEA,OAAO,MAAMC,aAAa,GAAG;AACzBC,EAAAA,YADyB;AAEzBC,EAAAA,oBAFyB;AAGzBC,EAAAA,aAHyB;AAIzBC,EAAAA;AAJyB,CAAtB;;AAQP,SAASH,YAAT,CAAsBI,OAAtB,EAA+B;AAC3B,SAAO,MAAOC,QAAP,IAAoB;AACvB,UAAMA,QAAQ,CAACC,OAAO,CAACF,OAAD,CAAR,CAAd;;AACA,QAAI;AACAP,MAAAA,OAAO,CAACU,IAAR,CAAc,WAAUH,OAAQ,EAAhC;AACA,YAAM;AAAEI,QAAAA;AAAF,UAAW,MAAMZ,aAAa,CAACa,MAAd,CAAqBL,OAArB,CAAvB;AACAC,MAAAA,QAAQ,CAACK,OAAO,CAACN,OAAD,EAAUI,IAAV,CAAR,CAAR;AACH,KAJD,CAIE,OAAOG,EAAP,EAAW;AACTN,MAAAA,QAAQ,CAACO,OAAO,CAACD,EAAD,CAAR,CAAR;AACAN,MAAAA,QAAQ,CAACP,YAAY,CAACe,KAAb,CAAmB;AAAEC,QAAAA,MAAM,EAAEH;AAAV,OAAnB,CAAD,CAAR;AACH;AACJ,GAVD;;AAYA,WAASL,OAAT,CAAiBF,OAAjB,EAA0B;AACtB,WAAO;AACHW,MAAAA,IAAI,EAAEpB,eAAe,CAACqB,cADnB;AAEHC,MAAAA,aAAa,EAAEb,OAFZ;AAGHc,MAAAA,SAAS,EAAE;AAHR,KAAP;AAKH;;AAED,WAASR,OAAT,CAAiBN,OAAjB,EAA0Be,aAA1B,EAAyC;AACrC,WAAO;AACHJ,MAAAA,IAAI,EAAEpB,eAAe,CAACyB,cADnB;AAEHD,MAAAA,aAFG;AAGHF,MAAAA,aAAa,EAAEb,OAHZ;AAIHc,MAAAA,SAAS,EAAE;AAJR,KAAP;AAMH;;AAED,WAASN,OAAT,CAAiBC,KAAjB,EAAwB;AACpB,WAAO;AACHE,MAAAA,IAAI,EAAEpB,eAAe,CAAC0B,cADnB;AAEHR,MAAAA,KAFG;AAGHK,MAAAA,SAAS,EAAE;AAHR,KAAP;AAKH;AACJ;;AAED,SAASjB,oBAAT,CAA8BG,OAA9B,EAAuC;AACnC,SAAO,MAAOC,QAAP,IAAoB;AACvBA,IAAAA,QAAQ,CAACC,OAAO,CAACF,OAAD,CAAR,CAAR;AACH,GAFD;;AAIA,WAASE,OAAT,CAAiBF,OAAjB,EAA0B;AACtB,WAAO;AACHW,MAAAA,IAAI,EAAEpB,eAAe,CAAC2B,sBADnB;AAEHL,MAAAA,aAAa,EAAEb;AAFZ,KAAP;AAIH;AACJ;;AAGD,SAASF,aAAT,CAAuBqB,IAAvB,EAA6BC,KAA7B,EAAoCC,QAApC,EAA8C;AAC1C,MAAIA,QAAJ,EAAc;AACZ,WAAO;AACLV,MAAAA,IAAI,EAAEpB,eAAe,CAAC+B,iBADjB;AAELH,MAAAA,IAFK;AAGLC,MAAAA;AAHK,KAAP;AAKD;;AACD,SAAO;AACLT,IAAAA,IAAI,EAAEpB,eAAe,CAACgC,oBADjB;AAELJ,IAAAA,IAFK;AAGLC,IAAAA;AAHK,GAAP;AAKH;;AACD,SAASrB,qBAAT,CAA+BqB,KAA/B,EAAsC;AAClC,SAAO;AACLT,IAAAA,IAAI,EAAEpB,eAAe,CAACiC,oBADjB;AAELJ,IAAAA;AAFK,GAAP;AAID","sourcesContent":["import { searchConstants } from '../constants';\r\nimport { searchService } from '../services';\r\nimport { history } from '../helpers';\r\nimport { alertActions } from './';\r\n\r\nexport const searchActions = {\r\n    simpleSearch,\r\n    searchKeywordChanged,\r\n    filterChanged,\r\n    maxPriceFilterChanged,\r\n    \r\n};\r\n\r\nfunction simpleSearch(keyWord) {\r\n    return async (dispatch) => {\r\n        await dispatch(request(keyWord));\r\n        try {\r\n            history.push(`/search/${keyWord}`);\r\n            const { data } = await searchService.search(keyWord);\r\n            dispatch(success(keyWord, data));\r\n        } catch (ex) {\r\n            dispatch(failure(ex));\r\n            dispatch(alertActions.error({ header: ex }));\r\n        }\r\n    };\r\n\r\n    function request(keyWord) {\r\n        return {\r\n            type: searchConstants.SEARCH_REQUEST,\r\n            searchKeyWord: keyWord,\r\n            isLoading: true,\r\n        };\r\n    }\r\n\r\n    function success(keyWord, searchResults) {\r\n        return {\r\n            type: searchConstants.SEARCH_SUCCESS,\r\n            searchResults,\r\n            searchKeyWord: keyWord,\r\n            isLoading: false,\r\n        };\r\n    }\r\n\r\n    function failure(error) {\r\n        return {\r\n            type: searchConstants.SEARCH_FAILURE,\r\n            error,\r\n            isLoading: false,\r\n        };\r\n    }\r\n}\r\n\r\nfunction searchKeywordChanged(keyWord) {\r\n    return async (dispatch) => {\r\n        dispatch(request(keyWord));\r\n    };\r\n\r\n    function request(keyWord) {\r\n        return {\r\n            type: searchConstants.SEARCH_KEYWORD_CHANGED,\r\n            searchKeyWord: keyWord,\r\n        };\r\n    }\r\n}\r\n\r\n\r\nfunction filterChanged(name, value, selected) {\r\n    if (selected) {\r\n      return {\r\n        type: searchConstants.FILTER_CHANGE_ADD,\r\n        name,\r\n        value,\r\n      };\r\n    }\r\n    return {\r\n      type: searchConstants.FILTER_CHANGE_REMOVE,\r\n      name,\r\n      value,\r\n    };\r\n}\r\nfunction maxPriceFilterChanged(value) {\r\n    return {\r\n      type: searchConstants.MAX_PRICE_FILTER_SET,\r\n      value,\r\n    };\r\n  }\r\n\r\n"]},"metadata":{},"sourceType":"module"}