{"ast":null,"code":"import { registerConstants } from \"../constants\";\nimport { checkInvitationTokenValidityRequest, registerByPhoneRequest, registerByEmailRequest, registerByShareableLinkRequest, verfiyAccountRequest, resendOTBRequest } from \"./../services\";\n\nconst checkUserPlatform = () => {\n  if (window.navigator.platform === \"Android\" || window.navigator.platform === \"iOS\") return window.location.href = \"https://mazadat.onelink.me/zXMK/useapp\";\n};\n\nconst checkPhoneValidity = params => {\n  return async dispatch => {\n    await dispatch({\n      type: registerConstants.CHECK_PHONE_VALIDITY\n    });\n\n    try {\n      const {\n        data\n      } = await checkInvitationTokenValidityRequest(params);\n      await dispatch({\n        type: registerConstants.CHECK_PHONE_VALIDITY_SUCCESS,\n        payload: data\n      });\n      dispatch(setRegisterStep(2));\n      dispatch(setRegisterData(params));\n    } catch (ex) {\n      await dispatch({\n        type: registerConstants.CHECK_PHONE_VALIDITY_FAILURE,\n        payload: ex\n      });\n    }\n  };\n};\n\nconst setRegisterStep = step => {\n  return {\n    type: registerConstants.SET_STEP,\n    payload: {\n      step\n    }\n  };\n};\n\nconst setRegisterData = data => {\n  return {\n    type: registerConstants.SET_USER_DATA,\n    payload: {\n      data\n    }\n  };\n};\n\nconst resendOTP = params => {\n  return async dispatch => {\n    await dispatch({\n      type: registerConstants.RESEND_OTP\n    });\n\n    try {\n      const {\n        data\n      } = await resendOTBRequest(params);\n      dispatch({\n        type: registerConstants.RESEND_OTP_SUCCESS,\n        payload: data\n      });\n    } catch (ex) {\n      dispatch({\n        type: registerConstants.RESEND_OTP_FAILURE,\n        payload: ex\n      });\n    }\n  };\n};\n\nconst verfiyOTP = params => {\n  return async dispatch => {\n    await dispatch({\n      type: registerConstants.VERIFY_OTP\n    });\n\n    try {\n      const {\n        data\n      } = await verfiyAccountRequest(params);\n      dispatch({\n        type: registerConstants.VERIFY_OTP_SUCCESS,\n        payload: data\n      });\n      dispatch(setRegisterStep(3));\n    } catch (ex) {\n      dispatch({\n        type: registerConstants.VERIFY_OTP_FAILURE,\n        payload: ex\n      });\n    }\n  };\n};\n\nconst resetOTPError = () => {\n  return async dispatch => {\n    await dispatch({\n      type: registerConstants.RESET_OTP_ERROR\n    });\n  };\n};\n\nconst registerByEmail = params => {\n  return async dispatch => {\n    await dispatch({\n      type: registerConstants.REGISTER\n    });\n\n    try {\n      const {\n        data\n      } = await registerByEmailRequest(params);\n      dispatch({\n        type: registerConstants.REGISTER_SUCCESS,\n        payload: data\n      });\n      dispatch(setRegisterStep(4));\n      setTimeout(checkUserPlatform(), 3000);\n    } catch (ex) {\n      dispatch({\n        type: registerConstants.REGISTER_FAILURE,\n        payload: ex\n      });\n    }\n  };\n};\n\nconst registerByShareableLink = params => {\n  return async dispatch => {\n    await dispatch({\n      type: registerConstants.REGISTER\n    });\n\n    try {\n      const {\n        data\n      } = await registerByShareableLinkRequest(params);\n      dispatch({\n        type: registerConstants.REGISTER_SUCCESS,\n        payload: data\n      });\n      dispatch(setRegisterStep(4));\n      setTimeout(checkUserPlatform(), 3000);\n    } catch (ex) {\n      dispatch({\n        type: registerConstants.REGISTER_FAILURE,\n        payload: ex\n      });\n    }\n  };\n};\n\nconst registerByPhone = params => {\n  return async dispatch => {\n    await dispatch({\n      type: registerConstants.REGISTER\n    });\n\n    try {\n      const {\n        data\n      } = await registerByPhoneRequest(params);\n      dispatch({\n        type: registerConstants.REGISTER_SUCCESS,\n        payload: data\n      });\n      dispatch(setRegisterStep(4));\n      setTimeout(checkUserPlatform(), 3000);\n    } catch (ex) {\n      dispatch({\n        type: registerConstants.REGISTER_FAILURE,\n        payload: ex\n      });\n    }\n  };\n};\n\nexport { checkPhoneValidity, setRegisterStep, resendOTP, verfiyOTP, registerByEmail, registerByShareableLink, registerByPhone, resetOTPError };","map":{"version":3,"sources":["/media/norhan/New Volume/work/React-projects/test-redux/src/actions/register.actions.js"],"names":["registerConstants","checkInvitationTokenValidityRequest","registerByPhoneRequest","registerByEmailRequest","registerByShareableLinkRequest","verfiyAccountRequest","resendOTBRequest","checkUserPlatform","window","navigator","platform","location","href","checkPhoneValidity","params","dispatch","type","CHECK_PHONE_VALIDITY","data","CHECK_PHONE_VALIDITY_SUCCESS","payload","setRegisterStep","setRegisterData","ex","CHECK_PHONE_VALIDITY_FAILURE","step","SET_STEP","SET_USER_DATA","resendOTP","RESEND_OTP","RESEND_OTP_SUCCESS","RESEND_OTP_FAILURE","verfiyOTP","VERIFY_OTP","VERIFY_OTP_SUCCESS","VERIFY_OTP_FAILURE","resetOTPError","RESET_OTP_ERROR","registerByEmail","REGISTER","REGISTER_SUCCESS","setTimeout","REGISTER_FAILURE","registerByShareableLink","registerByPhone"],"mappings":"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","sourcesContent":["import { registerConstants } from \"../constants\";\r\nimport {\r\n  checkInvitationTokenValidityRequest,\r\n  registerByPhoneRequest,\r\n  registerByEmailRequest,\r\n  registerByShareableLinkRequest,\r\n  verfiyAccountRequest,\r\n  resendOTBRequest,\r\n} from \"./../services\";\r\n\r\nconst checkUserPlatform = () => {\r\n  if (\r\n    window.navigator.platform === \"Android\" ||\r\n    window.navigator.platform === \"iOS\"\r\n  )\r\n    return (window.location.href = \"https://mazadat.onelink.me/zXMK/useapp\");\r\n};\r\n\r\nconst checkPhoneValidity = (params: Object) => {\r\n  return async (dispatch) => {\r\n    await dispatch({ type: registerConstants.CHECK_PHONE_VALIDITY });\r\n    try {\r\n      const { data } = await checkInvitationTokenValidityRequest(params);\r\n\r\n      await dispatch({\r\n        type: registerConstants.CHECK_PHONE_VALIDITY_SUCCESS,\r\n        payload: data,\r\n      });\r\n      dispatch(setRegisterStep(2));\r\n\r\n      dispatch(setRegisterData(params));\r\n    } catch (ex) {\r\n      await dispatch({\r\n        type: registerConstants.CHECK_PHONE_VALIDITY_FAILURE,\r\n        payload: ex,\r\n      });\r\n    }\r\n  };\r\n};\r\n\r\nconst setRegisterStep = (step: Number) => {\r\n  return { type: registerConstants.SET_STEP, payload: { step } };\r\n};\r\n\r\nconst setRegisterData = (data: Object) => {\r\n  return { type: registerConstants.SET_USER_DATA, payload: { data } };\r\n};\r\n\r\nconst resendOTP = (params: Object) => {\r\n  return async (dispatch) => {\r\n    await dispatch({ type: registerConstants.RESEND_OTP });\r\n    try {\r\n      const { data } = await resendOTBRequest(params);\r\n      dispatch({ type: registerConstants.RESEND_OTP_SUCCESS, payload: data });\r\n    } catch (ex) {\r\n      dispatch({ type: registerConstants.RESEND_OTP_FAILURE, payload: ex });\r\n    }\r\n  };\r\n};\r\n\r\nconst verfiyOTP = (params: Object) => {\r\n  return async (dispatch) => {\r\n    await dispatch({ type: registerConstants.VERIFY_OTP });\r\n    try {\r\n      const { data } = await verfiyAccountRequest(params);\r\n\r\n      dispatch({ type: registerConstants.VERIFY_OTP_SUCCESS, payload: data });\r\n\r\n      dispatch(setRegisterStep(3));\r\n    } catch (ex) {\r\n      dispatch({ type: registerConstants.VERIFY_OTP_FAILURE, payload: ex });\r\n    }\r\n  };\r\n};\r\nconst resetOTPError = () => {\r\n  return async (dispatch) => {\r\n    await dispatch({ type: registerConstants.RESET_OTP_ERROR });\r\n  };\r\n};\r\nconst registerByEmail = (params) => {\r\n  return async (dispatch) => {\r\n    await dispatch({ type: registerConstants.REGISTER });\r\n    try {\r\n      const { data } = await registerByEmailRequest(params);\r\n\r\n      dispatch({ type: registerConstants.REGISTER_SUCCESS, payload: data });\r\n\r\n      dispatch(setRegisterStep(4));\r\n      setTimeout(checkUserPlatform(), 3000);\r\n    } catch (ex) {\r\n      dispatch({ type: registerConstants.REGISTER_FAILURE, payload: ex });\r\n    }\r\n  };\r\n};\r\n\r\nconst registerByShareableLink = (params) => {\r\n  return async (dispatch) => {\r\n    await dispatch({ type: registerConstants.REGISTER });\r\n    try {\r\n      const { data } = await registerByShareableLinkRequest(params);\r\n\r\n      dispatch({ type: registerConstants.REGISTER_SUCCESS, payload: data });\r\n\r\n      dispatch(setRegisterStep(4));\r\n      setTimeout(checkUserPlatform(),\r\n        3000\r\n      );\r\n    } catch (ex) {\r\n      dispatch({ type: registerConstants.REGISTER_FAILURE, payload: ex });\r\n    }\r\n  };\r\n};\r\n\r\nconst registerByPhone = (params) => {\r\n  return async (dispatch) => {\r\n    await dispatch({ type: registerConstants.REGISTER });\r\n    try {\r\n      const { data } = await registerByPhoneRequest(params);\r\n\r\n      dispatch({ type: registerConstants.REGISTER_SUCCESS, payload: data });\r\n\r\n      dispatch(setRegisterStep(4));\r\n      setTimeout(checkUserPlatform(),\r\n        3000\r\n      );\r\n    } catch (ex) {\r\n      dispatch({ type: registerConstants.REGISTER_FAILURE, payload: ex });\r\n    }\r\n  };\r\n};\r\n\r\nexport {\r\n  checkPhoneValidity,\r\n  setRegisterStep,\r\n  resendOTP,\r\n  verfiyOTP,\r\n  registerByEmail,\r\n  registerByShareableLink,\r\n  registerByPhone,\r\n  resetOTPError,\r\n};\r\n"]},"metadata":{},"sourceType":"module"}