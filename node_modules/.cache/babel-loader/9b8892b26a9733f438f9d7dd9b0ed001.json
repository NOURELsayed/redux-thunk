{"ast":null,"code":"import { pushNotification } from './services';\n\nconst getConvertedVapidKey = () => {\n  return urlBase64ToUint8Array();\n};\n\nfunction urlBase64ToUint8Array() {\n  const base64String = localStorage.getItem('publicVapidKey');\n  if (!base64String || base64String === 'undefined') return;\n  const padding = \"=\".repeat((4 - base64String.length % 4) % 4); // eslint-disable-next-line\n\n  const base64 = (base64String + padding).replace(/\\-/g, \"+\").replace(/_/g, \"/\");\n  const rawData = window.atob(base64);\n  const outputArray = new Uint8Array(rawData.length);\n\n  for (let i = 0; i < rawData.length; ++i) {\n    outputArray[i] = rawData.charCodeAt(i);\n  }\n\n  return outputArray;\n}\n\nfunction equal(buf1, buf2) {\n  if (buf1.byteLength !== buf2.byteLength) return false;\n\n  for (var i = 0; i !== buf1.byteLength; i++) {\n    if (buf1[i] !== buf2[i]) return false;\n  }\n\n  return true;\n}\n\nexport function subscribeUser() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(function (registration) {\n      if (!registration.pushManager) {\n        console.log('Push manager unavailable.');\n        return;\n      }\n\n      registration.pushManager.getSubscription().then(async function (existedSubscription) {\n        const convertedVapidKey = getConvertedVapidKey();\n\n        if (existedSubscription) {\n          const oldVapidKey = new Uint8Array(existedSubscription.options.applicationServerKey);\n          let compareKeys;\n          if (oldVapidKey && convertedVapidKey) compareKeys = equal(convertedVapidKey, oldVapidKey);\n\n          if (!compareKeys) {\n            existedSubscription.unsubscribe().then(function (successful) {\n              console.log('Unsubscribed Successfully');\n            }).catch(function (e) {\n              console.log('Unsubscribe Failed');\n            });\n            existedSubscription = null;\n          }\n        }\n\n        if (existedSubscription === null) {\n          console.log('No subscription detected, make a request.');\n          registration.pushManager.subscribe({\n            applicationServerKey: convertedVapidKey,\n            userVisibleOnly: true\n          }).then(function (newSubscription) {\n            console.log('New subscription added.');\n            pushNotification.sendSubscription(newSubscription);\n          }).catch(function (e) {\n            if (Notification.permission !== 'granted') {\n              console.log('Permission was not granted.');\n            } else {\n              console.error('An error ocurred during the subscription process.', e);\n            }\n          });\n        } else {\n          console.log('Existed subscription detected.');\n          await pushNotification.sendSubscription(existedSubscription);\n        }\n      });\n    }).catch(function (e) {\n      console.error('An error ocurred during Service Worker registration.', e);\n    });\n  }\n}","map":{"version":3,"sources":["/media/norhan/New Volume/work/React-projects/test-redux/src/subscription.js"],"names":["pushNotification","getConvertedVapidKey","urlBase64ToUint8Array","base64String","localStorage","getItem","padding","repeat","length","base64","replace","rawData","window","atob","outputArray","Uint8Array","i","charCodeAt","equal","buf1","buf2","byteLength","subscribeUser","navigator","serviceWorker","ready","then","registration","pushManager","console","log","getSubscription","existedSubscription","convertedVapidKey","oldVapidKey","options","applicationServerKey","compareKeys","unsubscribe","successful","catch","e","subscribe","userVisibleOnly","newSubscription","sendSubscription","Notification","permission","error"],"mappings":"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","sourcesContent":["import { pushNotification } from './services';\r\n\r\nconst getConvertedVapidKey = () => {\r\n  return urlBase64ToUint8Array();\r\n}\r\n\r\nfunction urlBase64ToUint8Array() {\r\n  const base64String = localStorage.getItem('publicVapidKey');\r\n  if (!base64String || base64String === 'undefined') return;\r\n  \r\n  const padding = \"=\".repeat((4 - base64String.length % 4) % 4)\r\n  // eslint-disable-next-line\r\n  const base64 = (base64String + padding).replace(/\\-/g, \"+\").replace(/_/g, \"/\")\r\n\r\n  const rawData = window.atob(base64)\r\n  const outputArray = new Uint8Array(rawData.length)\r\n\r\n  for (let i = 0; i < rawData.length; ++i) {\r\n    outputArray[i] = rawData.charCodeAt(i)\r\n  }\r\n  return outputArray\r\n}\r\n\r\nfunction equal (buf1, buf2) {\r\n\r\n    if (buf1.byteLength !== buf2.byteLength) return false;\r\n    for (var i = 0 ; i !== buf1.byteLength ; i++)\r\n    {\r\n        if (buf1[i] !== buf2[i]) return false;\r\n    }\r\n    return true;\r\n}\r\n\r\nexport function subscribeUser() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(function(registration) {\r\n      if (!registration.pushManager) {\r\n        console.log('Push manager unavailable.')\r\n        return\r\n      }\r\n\r\n      registration.pushManager.getSubscription().then(async function(existedSubscription) {\r\n        const convertedVapidKey = getConvertedVapidKey();\r\n\r\n        if (existedSubscription) {\r\n          const oldVapidKey = new Uint8Array(existedSubscription.options.applicationServerKey);\r\n          let compareKeys\r\n          if(oldVapidKey && convertedVapidKey ) compareKeys = equal(convertedVapidKey, oldVapidKey);\r\n          if (!compareKeys) {\r\n            existedSubscription.unsubscribe().then(function(successful) {\r\n              console.log('Unsubscribed Successfully');\r\n            }).catch(function(e) {\r\n              console.log('Unsubscribe Failed')\r\n            })\r\n            existedSubscription = null;\r\n          }\r\n        }\r\n        if (existedSubscription === null) {\r\n          console.log('No subscription detected, make a request.')\r\n          registration.pushManager.subscribe({\r\n            applicationServerKey: convertedVapidKey,\r\n            userVisibleOnly: true,\r\n          }).then(function(newSubscription) {\r\n            console.log('New subscription added.')\r\n            pushNotification.sendSubscription(newSubscription)\r\n          }).catch(function(e) {\r\n            if (Notification.permission !== 'granted') {\r\n              console.log('Permission was not granted.')\r\n            } else {\r\n              console.error('An error ocurred during the subscription process.', e)\r\n            }\r\n          })\r\n        } else {\r\n          console.log('Existed subscription detected.')\r\n          await pushNotification.sendSubscription(existedSubscription)\r\n        }\r\n      })\r\n    })\r\n      .catch(function(e) {\r\n        console.error('An error ocurred during Service Worker registration.', e)\r\n      })\r\n  }\r\n}"]},"metadata":{},"sourceType":"module"}