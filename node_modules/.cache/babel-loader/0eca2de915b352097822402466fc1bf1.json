{"ast":null,"code":"var _jsxFileName = \"/media/norhan/New Volume/work/React-projects/test-redux/src/containers/VerificationPage/VerificationPage.jsx\";\nimport React, { Component } from \"react\";\nimport { connect } from \"react-redux\";\nimport { Grid, Dimmer, Loader, Form, Segment, Button } from \"semantic-ui-react\";\nimport { userActions, validatorActions } from \"../../actions\";\nimport queryString from \"query-string\";\nimport { withTranslation } from \"react-i18next\";\nimport i18n from \"i18next\";\nimport \"./EmailVerification.css\";\nimport { VerificatioNavBar } from \"./Navbar\";\nimport { authService, userService } from \"../../services\";\nimport Footer from \"../LandingPage/Footer\";\nimport { history } from \"../../helpers\";\nexport class VerificationContainer extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      loading: true,\n      email: \"\",\n      token: \"\",\n      password: \"\",\n      accountCreatedBy: \"\"\n    };\n    this.schema = {\n      required: [\"password\"],\n      properties: {\n        password: {\n          title: \"Password\",\n          type: \"string\",\n          minLength: 8,\n          maxLength: 1024\n        }\n      }\n    };\n\n    this.resendVerificationMail = async e => {\n      e.preventDefault();\n      this.setState({\n        loading: true\n      });\n      await this.props.resendVerificationMail(this.state.email);\n      this.setState({\n        loading: false\n      });\n    };\n\n    this.handleChange = (e, {\n      name,\n      value\n    }) => {\n      this.props.validateInput(this.schema, name, value); // user[name] = value;\n\n      this.setState({ ...this.state,\n        [name]: value\n      });\n    };\n\n    this.handleSubmit = async e => {\n      e.preventDefault();\n      this.setState({ ...this.state,\n        submitted: true\n      });\n      const {\n        password,\n        email,\n        token\n      } = this.state;\n      await this.props.validateForm(this.schema, {\n        password\n      });\n      this.setState({ ...this.state,\n        submitted: false\n      });\n      if (!this.props.valid) return;\n      await this.props.verifyEmail(email, token, password);\n    };\n  }\n\n  async componentDidMount() {\n    document.body.dir = i18n.dir();\n    authService.logout(); // in case there is a logged in user: remove token\n\n    const {\n      token,\n      address,\n      edit\n    } = queryString.parse(this.props.location.search);\n\n    if (token && address) {\n      if (edit === \"true\") {\n        await this.props.verifyUpdatedEmail(address, token);\n        this.setState({\n          loading: false,\n          email: address\n        });\n        return;\n      }\n\n      const {\n        user\n      } = (await userService.getUserByEmail(address)).data;\n      if (!user) return;\n      if (user.accountCreatedBy === \"user\") await this.props.verifyEmail(address, token);\n      this.setState({\n        password: \"\",\n        loading: false,\n        email: address,\n        token,\n        accountCreatedBy: user.accountCreatedBy\n      });\n    }\n  }\n\n  handleBackButton() {\n    history.push(\"/welcome\");\n  }\n\n  ResendAlert(alert) {\n    const language = localStorage.getItem(\"i18nextLng\");\n    const {\n      t\n    } = this.props;\n\n    if (alert && alert.type === \"error\") {\n      return /*#__PURE__*/React.createElement(\"div\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 82,\n          columnNumber: 9\n        }\n      }, /*#__PURE__*/React.createElement(VerificatioNavBar, {\n        title: t(\"emailVerification:failedVerification\"),\n        subtitle: t(\"emailVerification:failedVerificationNavbarSubTitle\"),\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 83,\n          columnNumber: 11\n        }\n      }), /*#__PURE__*/React.createElement(Segment, {\n        className: `emailVerification ${language}`,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 87,\n          columnNumber: 11\n        }\n      }, /*#__PURE__*/React.createElement(\"h4\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 88,\n          columnNumber: 13\n        }\n      }, \" \", t(\"emailVerification:failedVerificationDescription\"), \" \"), /*#__PURE__*/React.createElement(Button, {\n        onClick: this.handleBackButton,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 89,\n          columnNumber: 13\n        }\n      }, t(\"emailVerification:backButton\"))));\n    }\n  }\n\n  LoginAlert(alert) {\n    const language = localStorage.getItem(\"i18nextLng\");\n    const {\n      t\n    } = this.props;\n\n    if (alert && alert.type === \"success\") {\n      return /*#__PURE__*/React.createElement(\"div\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 101,\n          columnNumber: 9\n        }\n      }, /*#__PURE__*/React.createElement(VerificatioNavBar, {\n        title: t(\"emailVerification:successVerification\"),\n        subtitle: t(\"emailVerification:successVerificationNavbarSubTitle\"),\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 102,\n          columnNumber: 11\n        }\n      }), /*#__PURE__*/React.createElement(Segment, {\n        className: `emailVerification ${language}`,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 106,\n          columnNumber: 11\n        }\n      }, /*#__PURE__*/React.createElement(\"h4\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 107,\n          columnNumber: 13\n        }\n      }, \" \", t(\"emailVerification:successVerificationDescription\"), \" \"), /*#__PURE__*/React.createElement(Button, {\n        onClick: this.handleBackButton,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 108,\n          columnNumber: 13\n        }\n      }, t(\"emailVerification:backButton\"))));\n    }\n  }\n\n  render() {\n    const {\n      alert,\n      errors\n    } = this.props;\n    return /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 134,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(Dimmer, {\n      active: this.state.loading,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 135,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(Loader, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 136,\n        columnNumber: 11\n      }\n    })), /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 138,\n        columnNumber: 9\n      }\n    }, alert && alert.header && (this.ResendAlert(alert) || this.LoginAlert(alert)), this.state.accountCreatedBy === \"admin\" && /*#__PURE__*/React.createElement(React.Fragment, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 143,\n        columnNumber: 15\n      }\n    }, /*#__PURE__*/React.createElement(Form, {\n      size: \"large\",\n      onSubmit: this.handleSubmit,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 144,\n        columnNumber: 17\n      }\n    }, /*#__PURE__*/React.createElement(Segment, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 145,\n        columnNumber: 19\n      }\n    }, /*#__PURE__*/React.createElement(Form.Input, {\n      name: \"email\",\n      size: \"large\",\n      icon: \"mail\",\n      iconPosition: \"left\",\n      disabled: true,\n      value: this.state.email,\n      placeholder: this.state.email,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 146,\n        columnNumber: 21\n      }\n    }), /*#__PURE__*/React.createElement(Form.Input, {\n      name: \"password\",\n      size: \"large\",\n      icon: \"lock\",\n      iconPosition: \"left\",\n      placeholder: \"Password\",\n      value: this.state.password,\n      type: \"password\",\n      onChange: this.handleChange,\n      error: errors && errors.password,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 156,\n        columnNumber: 21\n      }\n    }), /*#__PURE__*/React.createElement(Button, {\n      color: \"teal\",\n      fluid: true,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 168,\n        columnNumber: 21\n      }\n    }, \"Verify Account\"))))), /*#__PURE__*/React.createElement(Footer, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 176,\n        columnNumber: 9\n      }\n    }));\n  }\n\n}\n\nfunction mapState(state) {\n  const {\n    alert\n  } = state;\n  const {\n    valid,\n    errors\n  } = state.validation;\n  return {\n    valid,\n    errors,\n    alert\n  };\n}\n\nconst actionCreators = {\n  verifyEmail: userActions.verifyMail,\n  resendVerificationMail: userActions.resendVerificationMail,\n  verifyUpdatedEmail: userActions.verifyUpdatedEmail,\n  validateInput: validatorActions.validateInput,\n  validateForm: validatorActions.validateForm\n};\nconst connectedVerificationPage = connect(mapState, actionCreators)(withTranslation(\"emailVerification\")(VerificationContainer));\nexport { connectedVerificationPage as VerificationPage };","map":{"version":3,"sources":["/media/norhan/New Volume/work/React-projects/test-redux/src/containers/VerificationPage/VerificationPage.jsx"],"names":["React","Component","connect","Grid","Dimmer","Loader","Form","Segment","Button","userActions","validatorActions","queryString","withTranslation","i18n","VerificatioNavBar","authService","userService","Footer","history","VerificationContainer","state","loading","email","token","password","accountCreatedBy","schema","required","properties","title","type","minLength","maxLength","resendVerificationMail","e","preventDefault","setState","props","handleChange","name","value","validateInput","handleSubmit","submitted","validateForm","valid","verifyEmail","componentDidMount","document","body","dir","logout","address","edit","parse","location","search","verifyUpdatedEmail","user","getUserByEmail","data","handleBackButton","push","ResendAlert","alert","language","localStorage","getItem","t","LoginAlert","render","errors","header","mapState","validation","actionCreators","verifyMail","connectedVerificationPage","VerificationPage"],"mappings":"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","sourcesContent":["import React, { Component } from \"react\";\r\nimport { connect } from \"react-redux\";\r\nimport {\r\n  Grid,\r\n  Dimmer,\r\n  Loader,\r\n  Form,\r\n  Segment,\r\n  Button,\r\n} from \"semantic-ui-react\";\r\nimport { userActions, validatorActions } from \"../../actions\";\r\nimport queryString from \"query-string\";\r\nimport { withTranslation } from \"react-i18next\";\r\nimport i18n from \"i18next\";\r\nimport \"./EmailVerification.css\";\r\nimport { VerificatioNavBar } from \"./Navbar\";\r\nimport { authService, userService } from \"../../services\";\r\nimport Footer from \"../LandingPage/Footer\";\r\nimport { history } from \"../../helpers\";\r\nexport class VerificationContainer extends Component {\r\n  state = {\r\n    loading: true,\r\n    email: \"\",\r\n    token: \"\",\r\n    password: \"\",\r\n    accountCreatedBy: \"\",\r\n  };\r\n  schema = {\r\n    required: [\"password\"],\r\n    properties: {\r\n      password: {\r\n        title: \"Password\",\r\n        type: \"string\",\r\n        minLength: 8,\r\n        maxLength: 1024,\r\n      },\r\n    },\r\n  };\r\n  async componentDidMount() {\r\n    document.body.dir = i18n.dir();\r\n    authService.logout(); // in case there is a logged in user: remove token\r\n    const { token, address, edit } = queryString.parse(\r\n      this.props.location.search\r\n    );\r\n\r\n    if (token && address) {\r\n      if (edit === \"true\") {\r\n        await this.props.verifyUpdatedEmail(address, token);\r\n        this.setState({ loading: false, email: address });\r\n        return;\r\n      }\r\n\r\n      const { user } = (await userService.getUserByEmail(address)).data;\r\n      if (!user) return;\r\n      if (user.accountCreatedBy === \"user\")\r\n        await this.props.verifyEmail(address, token);\r\n      this.setState({\r\n        password: \"\",\r\n        loading: false,\r\n        email: address,\r\n        token,\r\n        accountCreatedBy: user.accountCreatedBy,\r\n      });\r\n    }\r\n  }\r\n\r\n  resendVerificationMail = async (e) => {\r\n    e.preventDefault();\r\n    this.setState({ loading: true });\r\n    await this.props.resendVerificationMail(this.state.email);\r\n    this.setState({ loading: false });\r\n  };\r\n\r\n  handleBackButton() {\r\n    history.push(\"/welcome\");\r\n  }\r\n  ResendAlert(alert) {\r\n    const language = localStorage.getItem(\"i18nextLng\");\r\n    const { t } = this.props;\r\n    if (alert && alert.type === \"error\") {\r\n      return (\r\n        <div>\r\n          <VerificatioNavBar\r\n            title={t(\"emailVerification:failedVerification\")}\r\n            subtitle={t(\"emailVerification:failedVerificationNavbarSubTitle\")}\r\n          />\r\n          <Segment className={`emailVerification ${language}`}>\r\n            <h4> {t(\"emailVerification:failedVerificationDescription\")} </h4>\r\n            <Button onClick={this.handleBackButton}>{t(\"emailVerification:backButton\")}</Button>\r\n          </Segment>\r\n        </div>\r\n      );\r\n    }\r\n  }\r\n\r\n  LoginAlert(alert) {\r\n    const language = localStorage.getItem(\"i18nextLng\");\r\n    const { t } = this.props;\r\n    if (alert && alert.type === \"success\") {\r\n      return (\r\n        <div>\r\n          <VerificatioNavBar\r\n            title={t(\"emailVerification:successVerification\")}\r\n            subtitle={t(\"emailVerification:successVerificationNavbarSubTitle\")}\r\n          />\r\n          <Segment className={`emailVerification ${language}`}>\r\n            <h4> {t(\"emailVerification:successVerificationDescription\")} </h4>\r\n            <Button onClick={this.handleBackButton}>{t(\"emailVerification:backButton\")}</Button>\r\n          </Segment>\r\n        </div>\r\n      );\r\n    }\r\n  }\r\n\r\n  handleChange = (e, { name, value }) => {\r\n    this.props.validateInput(this.schema, name, value);\r\n    // user[name] = value;\r\n    this.setState({ ...this.state, [name]: value });\r\n  };\r\n\r\n  handleSubmit = async (e) => {\r\n    e.preventDefault();\r\n    this.setState({ ...this.state, submitted: true });\r\n    const { password, email, token } = this.state;\r\n    await this.props.validateForm(this.schema, { password });\r\n    this.setState({ ...this.state, submitted: false });\r\n    if (!this.props.valid) return;\r\n    await this.props.verifyEmail(email, token, password);\r\n  };\r\n\r\n  render() {\r\n    const { alert, errors } = this.props;\r\n    return (\r\n      <div>\r\n        <Dimmer active={this.state.loading}>\r\n          <Loader />\r\n        </Dimmer>\r\n        <div>\r\n            {alert &&\r\n              alert.header &&\r\n              (this.ResendAlert(alert) || this.LoginAlert(alert))}\r\n            {this.state.accountCreatedBy === \"admin\" && (\r\n              <React.Fragment>\r\n                <Form size=\"large\" onSubmit={this.handleSubmit}>\r\n                  <Segment>\r\n                    <Form.Input\r\n                      name=\"email\"\r\n                      size=\"large\"\r\n                      icon=\"mail\"\r\n                      iconPosition=\"left\"\r\n                      disabled\r\n                      value={this.state.email}\r\n                      placeholder={this.state.email}\r\n                    />\r\n\r\n                    <Form.Input\r\n                      name=\"password\"\r\n                      size=\"large\"\r\n                      icon=\"lock\"\r\n                      iconPosition=\"left\"\r\n                      placeholder=\"Password\"\r\n                      value={this.state.password}\r\n                      type=\"password\"\r\n                      onChange={this.handleChange}\r\n                      error={errors && errors.password}\r\n                    />\r\n\r\n                    <Button color=\"teal\" fluid>\r\n                      Verify Account\r\n                    </Button>\r\n                  </Segment>\r\n                </Form>\r\n              </React.Fragment>\r\n            )}\r\n           </div>\r\n        <Footer />\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nfunction mapState(state) {\r\n  const { alert } = state;\r\n  const { valid, errors } = state.validation;\r\n  return { valid, errors, alert };\r\n}\r\n\r\nconst actionCreators = {\r\n  verifyEmail: userActions.verifyMail,\r\n  resendVerificationMail: userActions.resendVerificationMail,\r\n  verifyUpdatedEmail: userActions.verifyUpdatedEmail,\r\n  validateInput: validatorActions.validateInput,\r\n  validateForm: validatorActions.validateForm,\r\n};\r\n\r\nconst connectedVerificationPage = connect(\r\n  mapState,\r\n  actionCreators\r\n)(withTranslation(\"emailVerification\")(VerificationContainer));\r\nexport { connectedVerificationPage as VerificationPage };\r\n"]},"metadata":{},"sourceType":"module"}