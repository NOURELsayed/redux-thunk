{"ast":null,"code":"import jwtDecode from \"jwt-decode\";\nimport { httpService } from \"./http.service\";\nimport { apiUrl } from \"../config\";\nconst apiEndpoint = apiUrl + \"/login\";\nconst tokenKey = \"token\";\nconst refreshTokenKey = \"refreshToken\";\nconst cancel = 'cancelRequests';\nexport const authService = {\n  login,\n  logout,\n  loginWithJwt,\n  getCurrentUser,\n  getJwt,\n  removeJwtToken,\n  refreshToken,\n  setCancelRequests,\n  getCancelRequests\n};\n\nasync function login(phone, password) {\n  const {\n    data: jwt\n  } = await httpService.post(apiEndpoint, {\n    phone,\n    password\n  });\n  return jwt;\n}\n\nfunction logout() {\n  localStorage.removeItem(tokenKey);\n  httpService.setJwt('');\n}\n\nasync function loginWithJwt(jwt, refreshToken) {\n  localStorage.setItem(tokenKey, jwt);\n\n  if (refreshToken !== null) {\n    localStorage.setItem(refreshTokenKey, refreshToken);\n  }\n\n  httpService.setJwt(jwt);\n}\n\nfunction getCurrentUser() {\n  try {\n    const jwt = localStorage.getItem(tokenKey);\n    return jwtDecode(jwt).user;\n  } catch (ex) {\n    return null;\n  }\n}\n\nfunction getJwt() {\n  return localStorage.getItem(tokenKey);\n}\n\nfunction removeJwtToken() {\n  localStorage.removeItem(tokenKey);\n  httpService.setJwt('');\n}\n\nasync function refreshToken() {\n  removeJwtToken();\n  const refreshToken = localStorage.getItem(refreshTokenKey);\n  const response = await httpService.post(`${apiEndpoint}/token`, {\n    refreshToken\n  });\n  if (response) loginWithJwt(response.data.token, null);\n  return response.data.token;\n}\n\nfunction setCancelRequests(boolCancel) {\n  localStorage.setItem(cancel, boolCancel);\n}\n\nfunction getCancelRequests() {\n  return localStorage.getItem(cancel);\n}","map":{"version":3,"sources":["/media/norhan/New Volume/work/React-projects/test-redux/src/services/auth.service.js"],"names":["jwtDecode","httpService","apiUrl","apiEndpoint","tokenKey","refreshTokenKey","cancel","authService","login","logout","loginWithJwt","getCurrentUser","getJwt","removeJwtToken","refreshToken","setCancelRequests","getCancelRequests","phone","password","data","jwt","post","localStorage","removeItem","setJwt","setItem","getItem","user","ex","response","token","boolCancel"],"mappings":"AAAA,OAAOA,SAAP,MAAsB,YAAtB;AACA,SAAQC,WAAR,QAA0B,gBAA1B;AACA,SAAQC,MAAR,QAAqB,WAArB;AAEA,MAAMC,WAAW,GAAGD,MAAM,GAAG,QAA7B;AACA,MAAME,QAAQ,GAAG,OAAjB;AACA,MAAMC,eAAe,GAAG,cAAxB;AACA,MAAMC,MAAM,GAAG,gBAAf;AAEA,OAAO,MAAMC,WAAW,GAAG;AACzBC,EAAAA,KADyB;AAEzBC,EAAAA,MAFyB;AAGzBC,EAAAA,YAHyB;AAIzBC,EAAAA,cAJyB;AAKzBC,EAAAA,MALyB;AAMzBC,EAAAA,cANyB;AAOzBC,EAAAA,YAPyB;AAQzBC,EAAAA,iBARyB;AASzBC,EAAAA;AATyB,CAApB;;AAYP,eAAeR,KAAf,CAAqBS,KAArB,EAA4BC,QAA5B,EAAsC;AACpC,QAAM;AAACC,IAAAA,IAAI,EAAEC;AAAP,MAAc,MAAMnB,WAAW,CAACoB,IAAZ,CAAiBlB,WAAjB,EAA8B;AAACc,IAAAA,KAAD;AAAQC,IAAAA;AAAR,GAA9B,CAA1B;AACA,SAAOE,GAAP;AACD;;AAED,SAASX,MAAT,GAAkB;AAChBa,EAAAA,YAAY,CAACC,UAAb,CAAwBnB,QAAxB;AACAH,EAAAA,WAAW,CAACuB,MAAZ,CAAmB,EAAnB;AACD;;AAED,eAAed,YAAf,CAA4BU,GAA5B,EAAiCN,YAAjC,EAA+C;AAC7CQ,EAAAA,YAAY,CAACG,OAAb,CAAqBrB,QAArB,EAA+BgB,GAA/B;;AACA,MAAIN,YAAY,KAAK,IAArB,EAA2B;AACzBQ,IAAAA,YAAY,CAACG,OAAb,CAAqBpB,eAArB,EAAsCS,YAAtC;AACD;;AACDb,EAAAA,WAAW,CAACuB,MAAZ,CAAmBJ,GAAnB;AACD;;AAED,SAAST,cAAT,GAA0B;AACxB,MAAI;AACF,UAAMS,GAAG,GAAGE,YAAY,CAACI,OAAb,CAAqBtB,QAArB,CAAZ;AACA,WAAOJ,SAAS,CAACoB,GAAD,CAAT,CAAeO,IAAtB;AACD,GAHD,CAGE,OAAOC,EAAP,EAAW;AACX,WAAO,IAAP;AACD;AACF;;AAED,SAAShB,MAAT,GAAkB;AAChB,SAAOU,YAAY,CAACI,OAAb,CAAqBtB,QAArB,CAAP;AACD;;AAED,SAASS,cAAT,GAA0B;AACxBS,EAAAA,YAAY,CAACC,UAAb,CAAwBnB,QAAxB;AACAH,EAAAA,WAAW,CAACuB,MAAZ,CAAmB,EAAnB;AACD;;AAED,eAAeV,YAAf,GAA8B;AAC5BD,EAAAA,cAAc;AACd,QAAMC,YAAY,GAAGQ,YAAY,CAACI,OAAb,CAAqBrB,eAArB,CAArB;AACA,QAAMwB,QAAQ,GAAG,MAAM5B,WAAW,CAACoB,IAAZ,CAAkB,GAAElB,WAAY,QAAhC,EAAyC;AAAEW,IAAAA;AAAF,GAAzC,CAAvB;AACA,MAAIe,QAAJ,EAAcnB,YAAY,CAACmB,QAAQ,CAACV,IAAT,CAAcW,KAAf,EAAsB,IAAtB,CAAZ;AACd,SAAOD,QAAQ,CAACV,IAAT,CAAcW,KAArB;AACD;;AAED,SAASf,iBAAT,CAA2BgB,UAA3B,EAAuC;AACrCT,EAAAA,YAAY,CAACG,OAAb,CAAqBnB,MAArB,EAA6ByB,UAA7B;AACD;;AAED,SAASf,iBAAT,GAA6B;AAC3B,SAAOM,YAAY,CAACI,OAAb,CAAqBpB,MAArB,CAAP;AACD","sourcesContent":["import jwtDecode from \"jwt-decode\";\r\nimport {httpService} from \"./http.service\";\r\nimport {apiUrl} from \"../config\";\r\n\r\nconst apiEndpoint = apiUrl + \"/login\";\r\nconst tokenKey = \"token\";\r\nconst refreshTokenKey = \"refreshToken\";\r\nconst cancel = 'cancelRequests';\r\n\r\nexport const authService = {\r\n  login,\r\n  logout,\r\n  loginWithJwt,\r\n  getCurrentUser,\r\n  getJwt,\r\n  removeJwtToken,\r\n  refreshToken,\r\n  setCancelRequests,\r\n  getCancelRequests,\r\n};\r\n\r\nasync function login(phone, password) {\r\n  const {data: jwt} = await httpService.post(apiEndpoint, {phone, password});\r\n  return jwt;\r\n}\r\n\r\nfunction logout() {\r\n  localStorage.removeItem(tokenKey);\r\n  httpService.setJwt('');\r\n}\r\n\r\nasync function loginWithJwt(jwt, refreshToken) {\r\n  localStorage.setItem(tokenKey, jwt);\r\n  if (refreshToken !== null) {\r\n    localStorage.setItem(refreshTokenKey, refreshToken);\r\n  }\r\n  httpService.setJwt(jwt);\r\n}\r\n\r\nfunction getCurrentUser() {\r\n  try {\r\n    const jwt = localStorage.getItem(tokenKey);\r\n    return jwtDecode(jwt).user;\r\n  } catch (ex) {\r\n    return null;\r\n  }\r\n}\r\n\r\nfunction getJwt() {\r\n  return localStorage.getItem(tokenKey);\r\n}\r\n\r\nfunction removeJwtToken() {\r\n  localStorage.removeItem(tokenKey);\r\n  httpService.setJwt('');\r\n}\r\n\r\nasync function refreshToken() {\r\n  removeJwtToken();\r\n  const refreshToken = localStorage.getItem(refreshTokenKey);\r\n  const response = await httpService.post(`${apiEndpoint}/token`, { refreshToken });\r\n  if (response) loginWithJwt(response.data.token, null);\r\n  return response.data.token;\r\n}\r\n\r\nfunction setCancelRequests(boolCancel) {\r\n  localStorage.setItem(cancel, boolCancel);\r\n}\r\n\r\nfunction getCancelRequests() {\r\n  return localStorage.getItem(cancel);\r\n}"]},"metadata":{},"sourceType":"module"}