{"ast":null,"code":"import { avatarConstants } from '../constants';\nimport { avatarService } from '../services';\nimport { alertActions } from './';\nexport const avatarActions = {\n  getActiveAvatar,\n  setActiveAvatar,\n  changeAvatar\n};\n\nfunction getActiveAvatar() {\n  return async dispatch => {\n    await dispatch(request());\n\n    try {\n      const {\n        data\n      } = await avatarService.getActiveAvatar();\n      dispatch(success(data));\n    } catch (ex) {\n      dispatch(failure(ex.message));\n      dispatch(alertActions.error({\n        header: \"Bad Request\",\n        content: ex.message\n      }));\n    }\n  };\n\n  function request() {\n    return {\n      type: avatarConstants.VIEW_ACTIVE_AVATAR_REQUEST\n    };\n  }\n\n  function success(data) {\n    return {\n      type: avatarConstants.VIEW_ACTIVE_AVATAR_SUCCESS,\n      avatarUrl: data.avatar\n    };\n  }\n\n  function failure(error) {\n    return {\n      type: avatarConstants.VIEW_ACTIVE_AVATAR_FAILURE,\n      error\n    };\n  }\n}\n\nfunction setActiveAvatar(avatarUrl) {\n  return async dispatch => {\n    await dispatch(request());\n\n    try {\n      const {\n        data\n      } = await avatarService.setActiveAvatar(avatarUrl);\n      dispatch(clear());\n      dispatch(success(data));\n      dispatch(alertActions.success({\n        header: data.message\n      }));\n    } catch (ex) {\n      dispatch(failure(ex.message));\n      dispatch(alertActions.error({\n        header: \"Bad Request\",\n        content: ex.message\n      }));\n    }\n  };\n\n  function request() {\n    return {\n      type: avatarConstants.SUBMIT_ACTIVE_AVATAR_REQUEST\n    };\n  }\n\n  function success(data) {\n    return {\n      type: avatarConstants.SUBMIT_ACTIVE_AVATAR_SUCCESS,\n      avatarUrl: data.avatar\n    };\n  }\n\n  function failure(error) {\n    return {\n      type: avatarConstants.SUBMIT_ACTIVE_AVATAR_FAILURE,\n      error\n    };\n  }\n\n  function clear() {\n    return {\n      type: avatarConstants.CLEAR\n    };\n  }\n}\n\nfunction changeAvatar(avatarUrl) {\n  return dispatch => {\n    dispatch({\n      type: avatarConstants.CHANGE_AVATAR,\n      avatarUrl\n    });\n  };\n}","map":{"version":3,"sources":["/media/norhan/New Volume/work/React-projects/test-redux/src/actions/avatar.actions.js"],"names":["avatarConstants","avatarService","alertActions","avatarActions","getActiveAvatar","setActiveAvatar","changeAvatar","dispatch","request","data","success","ex","failure","message","error","header","content","type","VIEW_ACTIVE_AVATAR_REQUEST","VIEW_ACTIVE_AVATAR_SUCCESS","avatarUrl","avatar","VIEW_ACTIVE_AVATAR_FAILURE","clear","SUBMIT_ACTIVE_AVATAR_REQUEST","SUBMIT_ACTIVE_AVATAR_SUCCESS","SUBMIT_ACTIVE_AVATAR_FAILURE","CLEAR","CHANGE_AVATAR"],"mappings":"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","sourcesContent":["import { avatarConstants } from '../constants';\r\nimport { avatarService } from '../services';\r\nimport { alertActions } from './';\r\n\r\nexport const avatarActions = {\r\n    getActiveAvatar,\r\n    setActiveAvatar,\r\n    changeAvatar,\r\n};\r\n\r\nfunction getActiveAvatar() {\r\n    return async (dispatch) => {\r\n      await dispatch(request());\r\n      try {\r\n        const {data} = await avatarService.getActiveAvatar();\r\n        dispatch(success(data));\r\n      } catch (ex) {\r\n        dispatch(failure(ex.message));\r\n        dispatch(\r\n          alertActions.error({\r\n              header: \"Bad Request\",\r\n              content: ex.message,\r\n          }),\r\n        );\r\n      }\r\n    };\r\n  \r\n    function request() {\r\n      return {type: avatarConstants.VIEW_ACTIVE_AVATAR_REQUEST};\r\n    }\r\n  \r\n    function success(data) {\r\n      return {type: avatarConstants.VIEW_ACTIVE_AVATAR_SUCCESS, avatarUrl: data.avatar};\r\n    }\r\n  \r\n    function failure(error) {\r\n      return {type: avatarConstants.VIEW_ACTIVE_AVATAR_FAILURE, error};\r\n    }\r\n}\r\n\r\nfunction setActiveAvatar(avatarUrl) {\r\n    return async (dispatch) => {\r\n      await dispatch(request());\r\n      try {\r\n        const {data} = await avatarService.setActiveAvatar(avatarUrl);\r\n        dispatch(clear());\r\n        dispatch(success(data));\r\n        dispatch(alertActions.success({ header: data.message }));\r\n      } catch (ex) {\r\n        dispatch(failure(ex.message));\r\n        dispatch(\r\n          alertActions.error({\r\n              header: \"Bad Request\",\r\n              content: ex.message,\r\n          }),\r\n        );\r\n      }\r\n    };\r\n  \r\n    function request() {\r\n      return {type: avatarConstants.SUBMIT_ACTIVE_AVATAR_REQUEST};\r\n    }\r\n  \r\n    function success(data) {\r\n      return {type: avatarConstants.SUBMIT_ACTIVE_AVATAR_SUCCESS, avatarUrl: data.avatar };\r\n    }\r\n  \r\n    function failure(error) {\r\n      return {type: avatarConstants.SUBMIT_ACTIVE_AVATAR_FAILURE, error};\r\n    }\r\n\r\n    function clear() {\r\n      return { type: avatarConstants.CLEAR };\r\n    }  \r\n}\r\n\r\nfunction changeAvatar(avatarUrl) {\r\n  return (dispatch) => {\r\n    dispatch({type: avatarConstants.CHANGE_AVATAR, avatarUrl});\r\n  };\r\n}"]},"metadata":{},"sourceType":"module"}