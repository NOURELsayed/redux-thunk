{"ast":null,"code":"import jwtDecode from \"jwt-decode\";\nimport { alertConstants } from '../constants';\nimport { authService, httpService } from '../services';\nexport const checkRequests = ({\n  dispatch\n}) => next => async action => {\n  if (action.type.includes('REQUEST')) {\n    let isExpired = false;\n    let decoded;\n    const token = authService.getJwt();\n    const dateNow = new Date();\n\n    if (token) {\n      decoded = jwtDecode(token, {\n        complete: true\n      });\n      if (decoded.exp < dateNow.getTime() / 1000) isExpired = true;\n    }\n\n    if (isExpired) {\n      try {\n        await authService.refreshToken();\n      } catch (error) {\n        authService.setCancelRequests(true);\n        setTimeout(() => {\n          authService.setCancelRequests(false);\n          httpService.setJwt('');\n        }, 3000);\n      }\n    }\n  }\n\n  if ((action.type.includes('FAILURE') || action.type.includes('ALERT_ERROR')) && authService.getCancelRequests() === 'true') {\n    action = {\n      type: alertConstants.ERROR,\n      header: 'Session Expired',\n      content: ''\n    };\n  }\n\n  next(action);\n};","map":{"version":3,"sources":["/media/norhan/New Volume/work/React-projects/test-redux/src/middlewares/dispatchChecks.js"],"names":["jwtDecode","alertConstants","authService","httpService","checkRequests","dispatch","next","action","type","includes","isExpired","decoded","token","getJwt","dateNow","Date","complete","exp","getTime","refreshToken","error","setCancelRequests","setTimeout","setJwt","getCancelRequests","ERROR","header","content"],"mappings":"AAAA,OAAOA,SAAP,MAAsB,YAAtB;AACA,SAAQC,cAAR,QAA6B,cAA7B;AACA,SAASC,WAAT,EAAsBC,WAAtB,QAAyC,aAAzC;AAEA,OAAO,MAAMC,aAAa,GAAG,CAAC;AAAEC,EAAAA;AAAF,CAAD,KAAkBC,IAAI,IAAI,MAAOC,MAAP,IAAkB;AACrE,MAAIA,MAAM,CAACC,IAAP,CAAYC,QAAZ,CAAqB,SAArB,CAAJ,EAAqC;AACjC,QAAIC,SAAS,GAAG,KAAhB;AACA,QAAIC,OAAJ;AACA,UAAMC,KAAK,GAAGV,WAAW,CAACW,MAAZ,EAAd;AACA,UAAMC,OAAO,GAAG,IAAIC,IAAJ,EAAhB;;AACA,QAAIH,KAAJ,EAAW;AACPD,MAAAA,OAAO,GAAGX,SAAS,CAACY,KAAD,EAAQ;AAACI,QAAAA,QAAQ,EAAE;AAAX,OAAR,CAAnB;AACA,UAAGL,OAAO,CAACM,GAAR,GAAeH,OAAO,CAACI,OAAR,KAAkB,IAApC,EAA2CR,SAAS,GAAG,IAAZ;AAC9C;;AACD,QAAIA,SAAJ,EAAe;AACX,UAAI;AACA,cAAMR,WAAW,CAACiB,YAAZ,EAAN;AACH,OAFD,CAEE,OAAOC,KAAP,EAAc;AACZlB,QAAAA,WAAW,CAACmB,iBAAZ,CAA8B,IAA9B;AACAC,QAAAA,UAAU,CAAC,MAAM;AACbpB,UAAAA,WAAW,CAACmB,iBAAZ,CAA8B,KAA9B;AACAlB,UAAAA,WAAW,CAACoB,MAAZ,CAAmB,EAAnB;AACH,SAHS,EAGP,IAHO,CAAV;AAIH;AACJ;AACJ;;AAED,MAAI,CAAChB,MAAM,CAACC,IAAP,CAAYC,QAAZ,CAAqB,SAArB,KAAmCF,MAAM,CAACC,IAAP,CAAYC,QAAZ,CAAqB,aAArB,CAApC,KAA4EP,WAAW,CAACsB,iBAAZ,OAAoC,MAApH,EAA4H;AACxHjB,IAAAA,MAAM,GAAG;AACLC,MAAAA,IAAI,EAAEP,cAAc,CAACwB,KADhB;AAELC,MAAAA,MAAM,EAAE,iBAFH;AAGLC,MAAAA,OAAO,EAAE;AAHJ,KAAT;AAKH;;AAEDrB,EAAAA,IAAI,CAACC,MAAD,CAAJ;AACH,CAhCM","sourcesContent":["import jwtDecode from \"jwt-decode\";\r\nimport {alertConstants} from '../constants';\r\nimport { authService, httpService } from '../services';\r\n\r\nexport const checkRequests = ({ dispatch }) => next => async (action) => {\r\n    if (action.type.includes('REQUEST')) {\r\n        let isExpired = false;\r\n        let decoded;\r\n        const token = authService.getJwt();\r\n        const dateNow = new Date();\r\n        if (token) {\r\n            decoded = jwtDecode(token, {complete: true});\r\n            if(decoded.exp < (dateNow.getTime()/1000)) isExpired = true;\r\n        }\r\n        if (isExpired) {\r\n            try {\r\n                await authService.refreshToken();\r\n            } catch (error) {\r\n                authService.setCancelRequests(true);  \r\n                setTimeout(() => {   \r\n                    authService.setCancelRequests(false);\r\n                    httpService.setJwt('');\r\n                }, 3000);\r\n            }\r\n        }\r\n    }\r\n\r\n    if ((action.type.includes('FAILURE') || action.type.includes('ALERT_ERROR')) && authService.getCancelRequests() === 'true') {\r\n        action = {\r\n            type: alertConstants.ERROR,\r\n            header: 'Session Expired',\r\n            content: '',\r\n        }\r\n    }\r\n\r\n    next(action);\r\n} "]},"metadata":{},"sourceType":"module"}