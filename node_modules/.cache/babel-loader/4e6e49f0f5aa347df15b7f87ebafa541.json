{"ast":null,"code":"var _jsxFileName = \"/media/norhan/New Volume/work/React-projects/test-redux/src/containers/auctionContainer/auctionContainer.jsx\";\nimport React, { Component } from \"react\";\nimport { connect } from \"react-redux\";\nimport { Statistic, Input, Icon, Grid, Button, Divider, Form, Message } from \"semantic-ui-react\";\nimport { Link } from \"react-router-dom\";\nimport socket from \"./../../socket/socket\";\nimport { auctionAction } from \"../../actions\";\nimport * as moment from \"moment\";\nimport { auction } from \"./../../reducers/auction.reducer\";\nexport class auctionContainer extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      bidAmount: 0,\n      bidMessage: \"\",\n      disabled: true,\n      arrow: true,\n      availableQuantity: \"\",\n      requiredQuantity: \"\",\n      quantityErrorMsg: \"\",\n      btnDisabled: true\n    };\n\n    this.arrowComponent = () => {\n      if (this.state.arrow) {\n        return /*#__PURE__*/React.createElement(Icon, {\n          name: \"angle up\",\n          size: \"big\",\n          color: \"green\",\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 37,\n            columnNumber: 14\n          }\n        });\n      }\n\n      return null;\n    };\n\n    this.manualBidClick = () => {\n      const {\n        _id\n      } = this.props.postData.post.auction;\n      socket.emit(\"manual bid\", {\n        auctionId: _id,\n        requiredQuantity: this.state.requiredQuantity\n      }, ack => {\n        if (ack.success === false) {\n          this.setState({ ...this.state,\n            bidMessage: ack.message\n          });\n        }\n      });\n    };\n\n    this.handleClick = e => {\n      const {\n        loggedIn\n      } = this.props;\n\n      if (loggedIn) {\n        const inputBid = e.target.value,\n              bidIncrement = this.props.postData.post.auction.bidIncrement,\n              lastBid = this.props.lastBid,\n              {\n          _id\n        } = this.props.postData.post.auction;\n\n        if (isNaN(inputBid)) {\n          this.setState({ ...this.state,\n            bidMessage: \"Invalid Value\"\n          });\n        } else if (inputBid > bidIncrement + lastBid) {\n          socket.emit(\"auto bid\", {\n            auctionId: _id,\n            maxAmount: Number(inputBid),\n            requiredQuantity: this.state.requiredQuantity\n          }, ack => {\n            if (ack.success === false) {\n              this.setState({ ...this.state,\n                bidMessage: ack.message\n              });\n            }\n          });\n        } else if (inputBid <= lastBid) {\n          this.setState({ ...this.state,\n            bidMessage: `Unacceptable Amount Please enter Higher Amount than  ${lastBid}`\n          });\n        }\n      } else {\n        this.setState({ ...this.state,\n          bidMessage: \"Login Or Register to can Bid\"\n        });\n      }\n    };\n\n    this.handleInputChange = e => {\n      this.setState({ ...this.state,\n        bidAmount: e.target.value\n      });\n    };\n\n    this.handleQuantityChange = (e, {\n      value\n    }) => {\n      if (value > this.state.availableQuantity) return this.setState({ ...this.state,\n        quantityErrorMsg: \"value should be lower than available quantity\",\n        btnDisabled: true\n      });\n      this.setState({ ...this.state,\n        requiredQuantity: value,\n        btnDisabled: false,\n        quantityErrorMsg: \"\"\n      });\n    };\n\n    this.handleButton = () => {\n      this.setState({ ...this.state,\n        disabled: !this.state.disabled\n      });\n    };\n  }\n\n  formatDate(date) {\n    return moment(date).format(\"YYYY-MM-DD HH:mm:ss\");\n  }\n\n  arrowTimer() {\n    this.setState({ ...this.state,\n      arrow: false\n    });\n  }\n\n  componentDidMount() {\n    const {\n      id\n    } = this.props.user;\n    setTimeout(function () {\n      if (this.props.postData.post.auction) {\n        if (!this.currentBidAmount) {\n          socket.emit(\"join auction\", {\n            auctionId: this.props.postData.post.auction._id\n          }, ack => {});\n          socket.on(\"auction info\", data => {\n            this.setState({ ...this.state,\n              availableQuantity: data.availableQuantity\n            });\n            this.currentBidAmount = data.currentBidAmount;\n            this.props.socketCallback(data);\n            setTimeout(function () {\n              this.setState({\n                arrow: false\n              });\n            }.bind(this), 1500);\n\n            if (data.actualBidder == id) {\n              this.setState({\n                bidMessage: \"You are the highst bidder\",\n                arrow: true\n              });\n            } else {\n              this.setState({\n                bidMessage: \"Out of Bid\",\n                arrow: true\n              });\n            }\n          });\n        }\n      }\n    }.bind(this), 1000);\n  }\n\n  render() {\n    const {\n      post\n    } = this.props.postData;\n    const {\n      lastBid,\n      seller\n    } = this.props;\n    const {\n      bidMessage\n    } = this.state;\n    const {\n      auction\n    } = post;\n    const {\n      disabled\n    } = this.state;\n    const {\n      btnDisabled,\n      quantityErrorMsg\n    } = this.state;\n    return /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 162,\n        columnNumber: 7\n      }\n    }, auction && /*#__PURE__*/React.createElement(Grid, {\n      columns: 2,\n      relaxed: \"very\",\n      stackable: true,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 164,\n        columnNumber: 11\n      }\n    }, /*#__PURE__*/React.createElement(Grid.Row, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 165,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(Grid.Column, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 166,\n        columnNumber: 15\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 167,\n        columnNumber: 17\n      }\n    }, this.arrowComponent()), /*#__PURE__*/React.createElement(Statistic, {\n      color: \"blue\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 168,\n        columnNumber: 17\n      }\n    }, /*#__PURE__*/React.createElement(Statistic.Value, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 169,\n        columnNumber: 19\n      }\n    }, lastBid), /*#__PURE__*/React.createElement(Statistic.Label, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 170,\n        columnNumber: 19\n      }\n    }, \"Bid Amount\"), /*#__PURE__*/React.createElement(Statistic.Label, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 171,\n        columnNumber: 19\n      }\n    }, /*#__PURE__*/React.createElement(Link, {\n      to: `/bid/history/${post.auction._id}`,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 172,\n        columnNumber: 21\n      }\n    }, \"Bidding History\")), /*#__PURE__*/React.createElement(Statistic.Label, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 176,\n        columnNumber: 19\n      }\n    }, \"End in \", this.formatDate(auction.endDate)), /*#__PURE__*/React.createElement(Statistic.Label, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 179,\n        columnNumber: 19\n      }\n    }, \"Bid increment \", auction.bidIncrement))), /*#__PURE__*/React.createElement(Grid.Column, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 184,\n        columnNumber: 15\n      }\n    }, !seller ? /*#__PURE__*/React.createElement(Grid, {\n      columns: 2,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 186,\n        columnNumber: 19\n      }\n    }, /*#__PURE__*/React.createElement(Grid.Row, {\n      style: {\n        textAlign: \"center\"\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 187,\n        columnNumber: 21\n      }\n    }, /*#__PURE__*/React.createElement(Button, {\n      style: {\n        textAlign: \"center\",\n        marginLeft: \"120px\"\n      },\n      color: \"teal\",\n      onClick: this.handleButton,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 188,\n        columnNumber: 23\n      }\n    }, \"Bid!\")), /*#__PURE__*/React.createElement(Grid.Row, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 196,\n        columnNumber: 21\n      }\n    }, !disabled && /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 198,\n        columnNumber: 25\n      }\n    }, /*#__PURE__*/React.createElement(Form.Input, {\n      style: {\n        width: \"100px\",\n        marginLeft: \"85px\",\n        marginBottom: \"10px\",\n        color: \"green\"\n      },\n      placeholder: \"Quantity\",\n      type: \"number\",\n      min: 1,\n      max: this.state.availableQuantity,\n      onChange: this.handleQuantityChange,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 199,\n        columnNumber: 27\n      }\n    }), quantityErrorMsg && /*#__PURE__*/React.createElement(Message, {\n      error: true,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 213,\n        columnNumber: 29\n      }\n    }, quantityErrorMsg), /*#__PURE__*/React.createElement(Input, {\n      style: {\n        width: \"100px\",\n        marginLeft: \"85px\",\n        color: \"green\"\n      },\n      action: {\n        color: \"teal\",\n        content: \"Auto Bid\",\n        value: this.state.bidAmount,\n        disabled: btnDisabled,\n        onClick: e => this.handleClick(e)\n      },\n      onChange: this.handleInputChange,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 215,\n        columnNumber: 27\n      }\n    }), /*#__PURE__*/React.createElement(Divider, {\n      horizontal: true,\n      style: {\n        color: \"salmon\"\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 231,\n        columnNumber: 27\n      }\n    }, \"Or\"), /*#__PURE__*/React.createElement(Button, {\n      disabled: btnDisabled,\n      style: {\n        textAlign: \"center\",\n        marginLeft: \"108px\"\n      },\n      color: \"teal\",\n      onClick: this.manualBidClick,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 235,\n        columnNumber: 27\n      }\n    }, \"Increment bid!\"), /*#__PURE__*/React.createElement(Statistic, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 243,\n        columnNumber: 27\n      }\n    }, /*#__PURE__*/React.createElement(Statistic.Label, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 244,\n        columnNumber: 29\n      }\n    }, /*#__PURE__*/React.createElement(\"h4\", {\n      style: {\n        textalign: \"center\",\n        color: \"salmon\"\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 245,\n        columnNumber: 31\n      }\n    }, bidMessage)))))) : /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 257,\n        columnNumber: 19\n      }\n    })))));\n  }\n\n}\n\nfunction mapState(state) {\n  const {\n    postData\n  } = state.post;\n  const {\n    user\n  } = state.authentication;\n  const {\n    lastBid\n  } = state.auction;\n  const {\n    loggedIn\n  } = state.authentication;\n  return {\n    postData,\n    user,\n    lastBid,\n    loggedIn\n  };\n}\n\nconst actionCreators = {\n  socketCallback: auctionAction.auctionInfo\n};\nconst connectedAuctionContainer = connect(mapState, actionCreators)(auctionContainer);\nexport { connectedAuctionContainer as AuctionContainer };","map":{"version":3,"sources":["/media/norhan/New Volume/work/React-projects/test-redux/src/containers/auctionContainer/auctionContainer.jsx"],"names":["React","Component","connect","Statistic","Input","Icon","Grid","Button","Divider","Form","Message","Link","socket","auctionAction","moment","auction","auctionContainer","state","bidAmount","bidMessage","disabled","arrow","availableQuantity","requiredQuantity","quantityErrorMsg","btnDisabled","arrowComponent","manualBidClick","_id","props","postData","post","emit","auctionId","ack","success","setState","message","handleClick","e","loggedIn","inputBid","target","value","bidIncrement","lastBid","isNaN","maxAmount","Number","handleInputChange","handleQuantityChange","handleButton","formatDate","date","format","arrowTimer","componentDidMount","id","user","setTimeout","currentBidAmount","on","data","socketCallback","bind","actualBidder","render","seller","endDate","textAlign","marginLeft","width","marginBottom","color","content","onClick","textalign","mapState","authentication","actionCreators","auctionInfo","connectedAuctionContainer","AuctionContainer"],"mappings":"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","sourcesContent":["import React, { Component } from \"react\";\r\nimport { connect } from \"react-redux\";\r\nimport {\r\n  Statistic,\r\n  Input,\r\n  Icon,\r\n  Grid,\r\n  Button,\r\n  Divider,\r\n  Form,\r\n  Message,\r\n} from \"semantic-ui-react\";\r\nimport { Link } from \"react-router-dom\";\r\nimport socket from \"./../../socket/socket\";\r\nimport { auctionAction } from \"../../actions\";\r\nimport * as moment from \"moment\";\r\nimport { auction } from \"./../../reducers/auction.reducer\";\r\n\r\nexport class auctionContainer extends Component {\r\n  currentBidAmount;\r\n  formatDate(date) {\r\n    return moment(date).format(\"YYYY-MM-DD HH:mm:ss\");\r\n  }\r\n\r\n  state = {\r\n    bidAmount: 0,\r\n    bidMessage: \"\",\r\n    disabled: true,\r\n    arrow: true,\r\n    availableQuantity: \"\",\r\n    requiredQuantity: \"\",\r\n    quantityErrorMsg: \"\",\r\n    btnDisabled: true,\r\n  };\r\n  arrowComponent = () => {\r\n    if (this.state.arrow) {\r\n      return <Icon name=\"angle up\" size=\"big\" color=\"green\" />;\r\n    }\r\n\r\n    return null;\r\n  };\r\n  arrowTimer() {\r\n    this.setState({ ...this.state, arrow: false });\r\n  }\r\n  manualBidClick = () => {\r\n    const { _id } = this.props.postData.post.auction;\r\n    socket.emit(\r\n      \"manual bid\",\r\n      { auctionId: _id, requiredQuantity: this.state.requiredQuantity },\r\n      (ack) => {\r\n        if (ack.success === false) {\r\n          this.setState({ ...this.state, bidMessage: ack.message });\r\n        }\r\n      }\r\n    );\r\n  };\r\n  handleClick = (e) => {\r\n    const { loggedIn } = this.props;\r\n\r\n    if (loggedIn) {\r\n      const inputBid = e.target.value,\r\n        bidIncrement = this.props.postData.post.auction.bidIncrement,\r\n        lastBid = this.props.lastBid,\r\n        { _id } = this.props.postData.post.auction;\r\n      if (isNaN(inputBid)) {\r\n        this.setState({ ...this.state, bidMessage: \"Invalid Value\" });\r\n      } else if (inputBid > bidIncrement + lastBid) {\r\n        socket.emit(\r\n          \"auto bid\",\r\n          {\r\n            auctionId: _id,\r\n            maxAmount: Number(inputBid),\r\n            requiredQuantity: this.state.requiredQuantity,\r\n          },\r\n          (ack) => {\r\n            if (ack.success === false) {\r\n              this.setState({ ...this.state, bidMessage: ack.message });\r\n            }\r\n          }\r\n        );\r\n      } else if (inputBid <= lastBid) {\r\n        this.setState({\r\n          ...this.state,\r\n          bidMessage: `Unacceptable Amount Please enter Higher Amount than  ${lastBid}`,\r\n        });\r\n      }\r\n    } else {\r\n      this.setState({\r\n        ...this.state,\r\n        bidMessage: \"Login Or Register to can Bid\",\r\n      });\r\n    }\r\n  };\r\n  handleInputChange = (e) => {\r\n    this.setState({ ...this.state, bidAmount: e.target.value });\r\n  };\r\n\r\n  handleQuantityChange = (e, { value }) => {\r\n    if (value > this.state.availableQuantity)\r\n      return this.setState({\r\n        ...this.state,\r\n        quantityErrorMsg: \"value should be lower than available quantity\",\r\n        btnDisabled: true,\r\n      });\r\n    this.setState({\r\n      ...this.state,\r\n      requiredQuantity: value,\r\n      btnDisabled: false,\r\n      quantityErrorMsg: \"\",\r\n    });\r\n  };\r\n  handleButton = () => {\r\n    this.setState({ ...this.state, disabled: !this.state.disabled });\r\n  };\r\n  componentDidMount() {\r\n    const { id } = this.props.user;\r\n    setTimeout(\r\n      function () {\r\n        if (this.props.postData.post.auction) {\r\n          if (!this.currentBidAmount) {\r\n            socket.emit(\r\n              \"join auction\",\r\n              { auctionId: this.props.postData.post.auction._id },\r\n              (ack) => {}\r\n            );\r\n            socket.on(\"auction info\", (data) => {\r\n              this.setState({\r\n                ...this.state,\r\n                availableQuantity: data.availableQuantity,\r\n              });\r\n              this.currentBidAmount = data.currentBidAmount;\r\n              this.props.socketCallback(data);\r\n              setTimeout(\r\n                function () {\r\n                  this.setState({ arrow: false });\r\n                }.bind(this),\r\n                1500\r\n              );\r\n              if (data.actualBidder == id) {\r\n                this.setState({\r\n                  bidMessage: \"You are the highst bidder\",\r\n                  arrow: true,\r\n                });\r\n              } else {\r\n                this.setState({ bidMessage: \"Out of Bid\", arrow: true });\r\n              }\r\n            });\r\n          }\r\n        }\r\n      }.bind(this),\r\n      1000\r\n    );\r\n  }\r\n  render() {\r\n    const { post } = this.props.postData;\r\n    const { lastBid, seller } = this.props;\r\n    const { bidMessage } = this.state;\r\n    const { auction } = post;\r\n    const { disabled } = this.state;\r\n    const { btnDisabled, quantityErrorMsg } = this.state;\r\n    return (\r\n      <div>\r\n        {auction && (\r\n          <Grid columns={2} relaxed=\"very\" stackable>\r\n            <Grid.Row>\r\n              <Grid.Column>\r\n                <div>{this.arrowComponent()}</div>\r\n                <Statistic color=\"blue\">\r\n                  <Statistic.Value>{lastBid}</Statistic.Value>\r\n                  <Statistic.Label>Bid Amount</Statistic.Label>\r\n                  <Statistic.Label>\r\n                    <Link to={`/bid/history/${post.auction._id}`}>\r\n                      Bidding History\r\n                    </Link>\r\n                  </Statistic.Label>\r\n                  <Statistic.Label>\r\n                    End in {this.formatDate(auction.endDate)}\r\n                  </Statistic.Label>\r\n                  <Statistic.Label>\r\n                    Bid increment {auction.bidIncrement}\r\n                  </Statistic.Label>\r\n                </Statistic>\r\n              </Grid.Column>\r\n              <Grid.Column>\r\n                {!seller ? (\r\n                  <Grid columns={2}>\r\n                    <Grid.Row style={{ textAlign: \"center\" }}>\r\n                      <Button\r\n                        style={{ textAlign: \"center\", marginLeft: \"120px\" }}\r\n                        color=\"teal\"\r\n                        onClick={this.handleButton}\r\n                      >\r\n                        Bid!\r\n                      </Button>\r\n                    </Grid.Row>\r\n                    <Grid.Row>\r\n                      {!disabled && (\r\n                        <div>\r\n                          <Form.Input\r\n                            style={{\r\n                              width: \"100px\",\r\n                              marginLeft: \"85px\",\r\n                              marginBottom: \"10px\",\r\n                              color: \"green\",\r\n                            }}\r\n                            placeholder=\"Quantity\"\r\n                            type=\"number\"\r\n                            min={1}\r\n                            max={this.state.availableQuantity}\r\n                            onChange={this.handleQuantityChange}\r\n                          />\r\n                          {quantityErrorMsg && (\r\n                            <Message error>{quantityErrorMsg}</Message>\r\n                          )}\r\n                          <Input\r\n                            style={{\r\n                              width: \"100px\",\r\n                              marginLeft: \"85px\",\r\n                              color: \"green\",\r\n                            }}\r\n                            action={{\r\n                              color: \"teal\",\r\n                              content: \"Auto Bid\",\r\n                              value: this.state.bidAmount,\r\n                              disabled: btnDisabled,\r\n\r\n                              onClick: (e) => this.handleClick(e),\r\n                            }}\r\n                            onChange={this.handleInputChange}\r\n                          />\r\n                          <Divider horizontal style={{ color: \"salmon\" }}>\r\n                            Or\r\n                          </Divider>\r\n\r\n                          <Button\r\n                            disabled={btnDisabled}\r\n                            style={{ textAlign: \"center\", marginLeft: \"108px\" }}\r\n                            color=\"teal\"\r\n                            onClick={this.manualBidClick}\r\n                          >\r\n                            Increment bid!\r\n                          </Button>\r\n                          <Statistic>\r\n                            <Statistic.Label>\r\n                              <h4\r\n                                style={{ textalign: \"center\", color: \"salmon\" }}\r\n                              >\r\n                                {bidMessage}\r\n                              </h4>\r\n                            </Statistic.Label>\r\n                          </Statistic>\r\n                        </div>\r\n                      )}\r\n                    </Grid.Row>\r\n                  </Grid>\r\n                ) : (\r\n                  <div></div>\r\n                )}\r\n              </Grid.Column>\r\n            </Grid.Row>\r\n          </Grid>\r\n        )}\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nfunction mapState(state) {\r\n  const { postData } = state.post;\r\n  const { user } = state.authentication;\r\n  const { lastBid } = state.auction;\r\n  const { loggedIn } = state.authentication;\r\n  return { postData, user, lastBid, loggedIn };\r\n}\r\n\r\nconst actionCreators = {\r\n  socketCallback: auctionAction.auctionInfo,\r\n};\r\n\r\nconst connectedAuctionContainer = connect(\r\n  mapState,\r\n  actionCreators\r\n)(auctionContainer);\r\nexport { connectedAuctionContainer as AuctionContainer };\r\n"]},"metadata":{},"sourceType":"module"}