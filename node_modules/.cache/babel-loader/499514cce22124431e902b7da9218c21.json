{"ast":null,"code":"var AJVError = {\n  Type: 'type',\n  Maximum: 'maximum',\n  Minimum: 'minimum',\n  ExclusiveMinimum: 'exclusiveMinimum',\n  ExclusiveMaximum: 'exclusiveMaximum',\n  MultipleOf: 'multipleOf',\n  MinLength: 'minLength',\n  MaxLength: 'maxLength',\n  Pattern: 'pattern',\n  Format: 'format',\n  MaxItems: 'maxItems',\n  MinItems: 'minItems',\n  UniqueItems: 'uniqueItems',\n  Contains: 'contains',\n  MaxProperties: 'maxProperties',\n  MinProperties: 'minProperties',\n  Required: 'required',\n  AdditionalProperties: 'additionalProperties',\n  Dependencies: 'dependencies',\n  PropertyNames: 'propertyNames',\n  Enum: 'enum',\n  Const: 'const',\n  Not: 'not',\n  OneOf: 'oneOf',\n  AnyOf: 'anyOf',\n  AllOf: 'allOf',\n  If: 'if'\n};\n\nfunction getAJVErrorMessage(opts) {\n  if (!opts) {\n    opts = {};\n  }\n\n  var keyword = opts.keyword;\n  var message = opts.message;\n  var params = opts.params;\n  var dataPath = opts.dataPath;\n  dataPath = dataPath.slice(1).replace(/\\//g, '.');\n  message = message.toLowerCase();\n  var msg = '';\n\n  switch (keyword) {\n    case AJVError.AdditionalProperties:\n      {\n        msg = message + ' \\'' + params.additionalProperty + '\\'';\n\n        if (dataPath.trim()) {\n          msg = msg + ' in ' + dataPath;\n        }\n\n        break;\n      }\n\n    case AJVError.Not:\n      {\n        msg = dataPath.trim();\n\n        if (msg) {\n          msg = msg + ' is/are ';\n        }\n\n        msg = msg + 'not valid';\n        break;\n      }\n\n    case AJVError.OneOf:\n    case AJVError.AnyOf:\n      {\n        msg = message.slice(0, -9);\n        break;\n      }\n\n    default:\n      {\n        if (!dataPath.trim()) {\n          msg = message;\n          break;\n        }\n\n        msg = dataPath + ' ' + message;\n        break;\n      }\n  }\n\n  return msg;\n}\n\nvar AJVErrorParser = {};\nAJVErrorParser.getAJVErrorMessage = getAJVErrorMessage;\n\nAJVErrorParser.parseErrors = function (errors, opts) {\n  if (!opts) {\n    opts = {\n      json: true\n    };\n  }\n\n  var json = opts.json;\n  var delimiter = opts.delimiter || '\\n';\n  var messages = [];\n\n  for (var idx = 0; idx < errors.length; idx++) {\n    var error = errors[idx];\n    messages.push(getAJVErrorMessage(error));\n  }\n\n  if (json) {\n    return messages;\n  }\n\n  var response = delimiter + messages.join(delimiter);\n  return response;\n};\n\nif (typeof module !== 'undefined' && module.exports) {\n  module.exports = AJVErrorParser;\n}","map":{"version":3,"sources":["/media/norhan/New Volume/work/React-projects/test-redux/node_modules/ajv-error-parser/ajv-error-parser.js"],"names":["AJVError","Type","Maximum","Minimum","ExclusiveMinimum","ExclusiveMaximum","MultipleOf","MinLength","MaxLength","Pattern","Format","MaxItems","MinItems","UniqueItems","Contains","MaxProperties","MinProperties","Required","AdditionalProperties","Dependencies","PropertyNames","Enum","Const","Not","OneOf","AnyOf","AllOf","If","getAJVErrorMessage","opts","keyword","message","params","dataPath","slice","replace","toLowerCase","msg","additionalProperty","trim","AJVErrorParser","parseErrors","errors","json","delimiter","messages","idx","length","error","push","response","join","module","exports"],"mappings":"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","sourcesContent":["var AJVError = {\n    Type: 'type',\n    Maximum: 'maximum',\n    Minimum: 'minimum',\n    ExclusiveMinimum: 'exclusiveMinimum',\n    ExclusiveMaximum: 'exclusiveMaximum',\n    MultipleOf: 'multipleOf',\n    MinLength: 'minLength',\n    MaxLength: 'maxLength',\n    Pattern: 'pattern',\n    Format: 'format',\n    MaxItems: 'maxItems',\n    MinItems: 'minItems',\n    UniqueItems: 'uniqueItems',\n    Contains: 'contains',\n    MaxProperties: 'maxProperties',\n    MinProperties: 'minProperties',\n    Required: 'required',\n    AdditionalProperties: 'additionalProperties',\n    Dependencies: 'dependencies',\n    PropertyNames: 'propertyNames',\n    Enum: 'enum',\n    Const: 'const',\n    Not: 'not',\n    OneOf: 'oneOf',\n    AnyOf: 'anyOf',\n    AllOf: 'allOf',\n    If: 'if'\n};\n\nfunction getAJVErrorMessage(opts) {\n    if (!opts) {\n        opts = {};\n    }\n    var keyword = opts.keyword;\n    var message = opts.message;\n    var params = opts.params;\n    var dataPath = opts.dataPath;\n\n    dataPath = dataPath.slice(1).replace(/\\//g, '.');\n    message = message.toLowerCase();\n    var msg = '';\n    switch (keyword) {\n        case AJVError.AdditionalProperties: {\n            msg = message + ' \\'' + params.additionalProperty + '\\'';\n            if (dataPath.trim()) {\n                msg = msg + ' in ' + dataPath;\n            }\n            break;\n        }\n        case AJVError.Not: {\n            msg = dataPath.trim();\n            if (msg) {\n                msg = msg + ' is/are ';\n            }\n            msg = msg + 'not valid';\n            break;\n        }\n        case AJVError.OneOf:\n        case AJVError.AnyOf: {\n            msg = message.slice(0, -9);\n            break;\n        }\n        default: {\n            if (!dataPath.trim()) {\n                msg = message;\n                break;\n            }\n            msg = dataPath + ' ' + message;\n            break;\n        }\n    }\n    return msg;\n}\n\nvar AJVErrorParser = {};\n\nAJVErrorParser.getAJVErrorMessage = getAJVErrorMessage;\nAJVErrorParser.parseErrors = function(errors, opts) {\n    if (!opts) {\n        opts = { json: true };\n    }\n    var json = opts.json;\n    var delimiter = opts.delimiter || '\\n';\n    var messages = [];\n    for (var idx = 0; idx < errors.length; idx++) {\n        var error = errors[idx];\n        messages.push(getAJVErrorMessage(error));\n    }\n    if (json) {\n        return messages;\n    }\n    var response = delimiter + messages.join(delimiter);\n    return response;\n};\n\nif (typeof module !== 'undefined' && module.exports) {\n    module.exports = AJVErrorParser;\n}"]},"metadata":{},"sourceType":"script"}