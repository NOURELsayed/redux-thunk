{"ast":null,"code":"import { servicePointConstants, orderConstants } from \"../constants\";\nimport * as moment from \"moment\";\nconst initialState = {\n  personInCharge: servicePointConstants.USER,\n  nearestServicePointChecked: false,\n  servicePoints: []\n};\nexport function servicePoint(state = initialState, action) {\n  switch (action.type) {\n    ////////////////////////GET DATA//////////////////////\n    case servicePointConstants.GET_SERVICE_POINTS_REQUEST:\n      return { ...state\n      };\n\n    case servicePointConstants.GET_SERVICE_POINTS_SUCCESS:\n      let selectedServicePoint = state.servicePointId;\n\n      if (!selectedServicePoint && action.servicePoints && action.servicePoints.length > 0) {\n        selectedServicePoint = action.servicePoints[0]._id;\n      }\n\n      return { ...state,\n        servicePoints: action.servicePoints,\n        servicePointId: selectedServicePoint\n      };\n\n    case servicePointConstants.GET_SERVICE_POINTS_FAILURE:\n      return { ...state\n      };\n\n    /*----------------------------Form Actions------------------------------ */\n\n    case servicePointConstants.PERSON_IN_CHARGE_CHANGED:\n      return { ...state,\n        personInCharge: action.personInCharge\n      };\n\n    case servicePointConstants.NEAREAST_SERVICE_POINT_CHOICE_CHANGED:\n      return { ...state,\n        nearestServicePointChecked: action.nearestServicePointChecked\n      };\n\n    case servicePointConstants.SELECTED_SERVICE_POINT_CHANGED:\n      return { ...state,\n        servicePointId: action.servicePointId\n      };\n\n    case servicePointConstants.SELECTED_ARRIVAL_DATE_CHANGED:\n      return { ...state,\n        arrivalDate: action.date\n      };\n\n    case servicePointConstants.SELECTED_ARRIVAL_TIME_CHANGED:\n      return { ...state,\n        arrivalTime: action.time\n      };\n\n    case servicePointConstants.AUTHORIZED_PERSON_NAME_CHANGED:\n      return { ...state,\n        authorizedName: action.name\n      };\n\n    case servicePointConstants.AUTHORIZED_PERSON_ID_CHANGED:\n      return { ...state,\n        authorizedID: action.id\n      };\n\n    case servicePointConstants.CONFIRM_AUTHORIZED_PERSON_DATA_SUCCESS:\n      console.log(\"will return from reducer : \", { ...state,\n        authorizedDataConfirmed: true,\n        authorisedUserId: action.userId\n      });\n      return { ...state,\n        authorizedDataConfirmed: true,\n        authorisedUserId: action.userId\n      };\n\n    case servicePointConstants.CLEAR:\n      return {\n        personInCharge: servicePointConstants.USER,\n        nearestServicePointChecked: false,\n        servicePoints: [],\n        authorizedName: '',\n        authorizedID: '',\n        authorisedUserId: '',\n        servicePointId: '',\n        arrivalDate: '',\n        arrivalTime: ''\n      };\n\n    case orderConstants.VIEW_ORDER_SUCCESS:\n      let person = servicePointConstants.USER;\n      let authorizedName = '';\n      let authorizedID = '';\n      let servicePointId = '';\n\n      if (action.orderData.buyerData.authorizedPerson) {\n        person = servicePointConstants.AUTHORIZED_PERSON;\n        authorizedName = action.orderData.buyerData.authorizedPerson.name;\n        authorizedID = action.orderData.buyerData.authorizedPerson.nationalID;\n      }\n\n      if (action.orderData.buyerData.SP) {\n        servicePointId = action.orderData.buyerData.SP._id;\n      }\n\n      let date = action.orderData.buyerData.timeslot && new Date(action.orderData.buyerData.timeslot).toLocaleDateString();\n      let time = action.orderData.buyerData.timeslot && new Date(action.orderData.buyerData.timeslot).toLocaleTimeString([], {\n        hour12: false\n      });\n      date = date && moment(date).format('Y-MM-DD');\n      time = time && parseInt(moment(time, \"HH:mm:ss\").format(\"HH:mm\"));\n      return { ...state,\n        servicePointId: servicePointId,\n        personInCharge: person,\n        authorizedName: authorizedName,\n        authorizedID: authorizedID,\n        arrivalDate: date,\n        arrivalTime: time\n      };\n\n    case orderConstants.VIEW_ORDER_SELLER_SUCCESS:\n      let personSeller = servicePointConstants.USER;\n      let authorizedNameSeller = '';\n      let authorizedIDSeller = '';\n      let servicePointIdSeller = '';\n\n      if (action.orderData.sellerData.authorizedPerson) {\n        personSeller = servicePointConstants.AUTHORIZED_PERSON;\n        authorizedNameSeller = action.orderData.sellerData.authorizedPerson.name;\n        authorizedIDSeller = action.orderData.sellerData.authorizedPerson.nationalID;\n      }\n\n      if (action.orderData.sellerData.SP) {\n        servicePointIdSeller = action.orderData.sellerData.SP._id;\n      }\n\n      let dateSeller = action.orderData.sellerData.timeslot && new Date(action.orderData.sellerData.timeslot).toLocaleDateString();\n      let timeSeller = action.orderData.sellerData.timeslot && new Date(action.orderData.sellerData.timeslot).toLocaleTimeString([], {\n        hour12: false\n      });\n      dateSeller = dateSeller && moment(dateSeller).format('Y-MM-DD');\n      timeSeller = timeSeller && parseInt(moment(timeSeller, \"HH:mm:ss\").format(\"HH:mm\"));\n      return { ...state,\n        servicePointId: servicePointIdSeller,\n        personInCharge: personSeller,\n        authorizedName: authorizedNameSeller,\n        authorizedID: authorizedIDSeller,\n        arrivalDate: dateSeller,\n        arrivalTime: timeSeller\n      };\n\n    default:\n      return { ...state\n      };\n  }\n}","map":{"version":3,"sources":["/media/norhan/New Volume/work/React-projects/test-redux/src/reducers/servicePoint.reducer.js"],"names":["servicePointConstants","orderConstants","moment","initialState","personInCharge","USER","nearestServicePointChecked","servicePoints","servicePoint","state","action","type","GET_SERVICE_POINTS_REQUEST","GET_SERVICE_POINTS_SUCCESS","selectedServicePoint","servicePointId","length","_id","GET_SERVICE_POINTS_FAILURE","PERSON_IN_CHARGE_CHANGED","NEAREAST_SERVICE_POINT_CHOICE_CHANGED","SELECTED_SERVICE_POINT_CHANGED","SELECTED_ARRIVAL_DATE_CHANGED","arrivalDate","date","SELECTED_ARRIVAL_TIME_CHANGED","arrivalTime","time","AUTHORIZED_PERSON_NAME_CHANGED","authorizedName","name","AUTHORIZED_PERSON_ID_CHANGED","authorizedID","id","CONFIRM_AUTHORIZED_PERSON_DATA_SUCCESS","console","log","authorizedDataConfirmed","authorisedUserId","userId","CLEAR","VIEW_ORDER_SUCCESS","person","orderData","buyerData","authorizedPerson","AUTHORIZED_PERSON","nationalID","SP","timeslot","Date","toLocaleDateString","toLocaleTimeString","hour12","format","parseInt","VIEW_ORDER_SELLER_SUCCESS","personSeller","authorizedNameSeller","authorizedIDSeller","servicePointIdSeller","sellerData","dateSeller","timeSeller"],"mappings":"AAAA,SAASA,qBAAT,EAA+BC,cAA/B,QAAqD,cAArD;AACA,OAAO,KAAKC,MAAZ,MAAwB,QAAxB;AACA,MAAMC,YAAY,GAAG;AACnBC,EAAAA,cAAc,EAAEJ,qBAAqB,CAACK,IADnB;AAEnBC,EAAAA,0BAA0B,EAAE,KAFT;AAGnBC,EAAAA,aAAa,EAAE;AAHI,CAArB;AAMA,OAAO,SAASC,YAAT,CAAsBC,KAAK,GAAGN,YAA9B,EAA4CO,MAA5C,EAAoD;AACzD,UAAQA,MAAM,CAACC,IAAf;AACE;AACA,SAAKX,qBAAqB,CAACY,0BAA3B;AACE,aAAO,EACL,GAAGH;AADE,OAAP;;AAGF,SAAKT,qBAAqB,CAACa,0BAA3B;AACE,UAAIC,oBAAoB,GAAGL,KAAK,CAACM,cAAjC;;AACA,UACE,CAACD,oBAAD,IACAJ,MAAM,CAACH,aADP,IAEAG,MAAM,CAACH,aAAP,CAAqBS,MAArB,GAA8B,CAHhC,EAIE;AACAF,QAAAA,oBAAoB,GAAGJ,MAAM,CAACH,aAAP,CAAqB,CAArB,EAAwBU,GAA/C;AACD;;AACD,aAAO,EACL,GAAGR,KADE;AAELF,QAAAA,aAAa,EAAEG,MAAM,CAACH,aAFjB;AAGLQ,QAAAA,cAAc,EAAED;AAHX,OAAP;;AAKF,SAAKd,qBAAqB,CAACkB,0BAA3B;AACE,aAAO,EACL,GAAGT;AADE,OAAP;;AAIF;;AACA,SAAKT,qBAAqB,CAACmB,wBAA3B;AACE,aAAO,EACL,GAAGV,KADE;AAELL,QAAAA,cAAc,EAAEM,MAAM,CAACN;AAFlB,OAAP;;AAIF,SAAKJ,qBAAqB,CAACoB,qCAA3B;AACE,aAAO,EACL,GAAGX,KADE;AAELH,QAAAA,0BAA0B,EAAEI,MAAM,CAACJ;AAF9B,OAAP;;AAIF,SAAKN,qBAAqB,CAACqB,8BAA3B;AACE,aAAO,EACL,GAAGZ,KADE;AAELM,QAAAA,cAAc,EAAEL,MAAM,CAACK;AAFlB,OAAP;;AAIF,SAAKf,qBAAqB,CAACsB,6BAA3B;AACE,aAAO,EACL,GAAGb,KADE;AAELc,QAAAA,WAAW,EAAEb,MAAM,CAACc;AAFf,OAAP;;AAIF,SAAKxB,qBAAqB,CAACyB,6BAA3B;AACE,aAAO,EACL,GAAGhB,KADE;AAELiB,QAAAA,WAAW,EAAEhB,MAAM,CAACiB;AAFf,OAAP;;AAKF,SAAK3B,qBAAqB,CAAC4B,8BAA3B;AACE,aAAO,EACL,GAAGnB,KADE;AAELoB,QAAAA,cAAc,EAAEnB,MAAM,CAACoB;AAFlB,OAAP;;AAKF,SAAK9B,qBAAqB,CAAC+B,4BAA3B;AACE,aAAO,EACL,GAAGtB,KADE;AAELuB,QAAAA,YAAY,EAAEtB,MAAM,CAACuB;AAFhB,OAAP;;AAIF,SAAKjC,qBAAqB,CAACkC,sCAA3B;AACEC,MAAAA,OAAO,CAACC,GAAR,CAAY,6BAAZ,EAA2C,EACzC,GAAG3B,KADsC;AAEzC4B,QAAAA,uBAAuB,EAAE,IAFgB;AAGzCC,QAAAA,gBAAgB,EAAE5B,MAAM,CAAC6B;AAHgB,OAA3C;AAKA,aAAO,EACL,GAAG9B,KADE;AAEL4B,QAAAA,uBAAuB,EAAE,IAFpB;AAGLC,QAAAA,gBAAgB,EAAE5B,MAAM,CAAC6B;AAHpB,OAAP;;AAKF,SAAKvC,qBAAqB,CAACwC,KAA3B;AACE,aAAO;AACLpC,QAAAA,cAAc,EAAEJ,qBAAqB,CAACK,IADjC;AAELC,QAAAA,0BAA0B,EAAE,KAFvB;AAGLC,QAAAA,aAAa,EAAE,EAHV;AAILsB,QAAAA,cAAc,EAAE,EAJX;AAKLG,QAAAA,YAAY,EAAE,EALT;AAMLM,QAAAA,gBAAgB,EAAE,EANb;AAOLvB,QAAAA,cAAc,EAAE,EAPX;AAQLQ,QAAAA,WAAW,EAAE,EARR;AASLG,QAAAA,WAAW,EAAE;AATR,OAAP;;AAWA,SAAKzB,cAAc,CAACwC,kBAApB;AACE,UAAIC,MAAM,GAAC1C,qBAAqB,CAACK,IAAjC;AACA,UAAIwB,cAAc,GAAC,EAAnB;AACA,UAAIG,YAAY,GAAC,EAAjB;AACA,UAAIjB,cAAc,GAAC,EAAnB;;AACA,UAAGL,MAAM,CAACiC,SAAP,CAAiBC,SAAjB,CAA2BC,gBAA9B,EAA+C;AAC7CH,QAAAA,MAAM,GAAC1C,qBAAqB,CAAC8C,iBAA7B;AACAjB,QAAAA,cAAc,GAACnB,MAAM,CAACiC,SAAP,CAAiBC,SAAjB,CAA2BC,gBAA3B,CAA4Cf,IAA3D;AACAE,QAAAA,YAAY,GAACtB,MAAM,CAACiC,SAAP,CAAiBC,SAAjB,CAA2BC,gBAA3B,CAA4CE,UAAzD;AACD;;AACD,UAAGrC,MAAM,CAACiC,SAAP,CAAiBC,SAAjB,CAA2BI,EAA9B,EAAiC;AAC/BjC,QAAAA,cAAc,GAAEL,MAAM,CAACiC,SAAP,CAAiBC,SAAjB,CAA2BI,EAA3B,CAA8B/B,GAA9C;AACD;;AACD,UAAIO,IAAI,GAAGd,MAAM,CAACiC,SAAP,CAAiBC,SAAjB,CAA2BK,QAA3B,IAAuC,IAAIC,IAAJ,CAASxC,MAAM,CAACiC,SAAP,CAAiBC,SAAjB,CAA2BK,QAApC,EAA8CE,kBAA9C,EAAlD;AACA,UAAIxB,IAAI,GAAGjB,MAAM,CAACiC,SAAP,CAAiBC,SAAjB,CAA2BK,QAA3B,IAAuC,IAAIC,IAAJ,CAASxC,MAAM,CAACiC,SAAP,CAAiBC,SAAjB,CAA2BK,QAApC,EAA8CG,kBAA9C,CAAiE,EAAjE,EAAqE;AAACC,QAAAA,MAAM,EAAE;AAAT,OAArE,CAAlD;AACA7B,MAAAA,IAAI,GAAGA,IAAI,IAAItB,MAAM,CAACsB,IAAD,CAAN,CAAa8B,MAAb,CAAoB,SAApB,CAAf;AACA3B,MAAAA,IAAI,GAAGA,IAAI,IAAI4B,QAAQ,CAACrD,MAAM,CAACyB,IAAD,EAAO,UAAP,CAAN,CAAyB2B,MAAzB,CAAgC,OAAhC,CAAD,CAAvB;AACA,aAAO,EACH,GAAG7C,KADA;AAEHM,QAAAA,cAAc,EAAEA,cAFb;AAGHX,QAAAA,cAAc,EAACsC,MAHZ;AAIHb,QAAAA,cAAc,EAAEA,cAJb;AAKHG,QAAAA,YAAY,EAAEA,YALX;AAMHT,QAAAA,WAAW,EAACC,IANT;AAOHE,QAAAA,WAAW,EAACC;AAPT,OAAP;;AASA,SAAK1B,cAAc,CAACuD,yBAApB;AACA,UAAIC,YAAY,GAACzD,qBAAqB,CAACK,IAAvC;AACA,UAAIqD,oBAAoB,GAAC,EAAzB;AACA,UAAIC,kBAAkB,GAAC,EAAvB;AACA,UAAIC,oBAAoB,GAAC,EAAzB;;AACA,UAAGlD,MAAM,CAACiC,SAAP,CAAiBkB,UAAjB,CAA4BhB,gBAA/B,EAAgD;AAC9CY,QAAAA,YAAY,GAACzD,qBAAqB,CAAC8C,iBAAnC;AACAY,QAAAA,oBAAoB,GAAChD,MAAM,CAACiC,SAAP,CAAiBkB,UAAjB,CAA4BhB,gBAA5B,CAA6Cf,IAAlE;AACA6B,QAAAA,kBAAkB,GAACjD,MAAM,CAACiC,SAAP,CAAiBkB,UAAjB,CAA4BhB,gBAA5B,CAA6CE,UAAhE;AACD;;AACD,UAAGrC,MAAM,CAACiC,SAAP,CAAiBkB,UAAjB,CAA4Bb,EAA/B,EAAkC;AAChCY,QAAAA,oBAAoB,GAAElD,MAAM,CAACiC,SAAP,CAAiBkB,UAAjB,CAA4Bb,EAA5B,CAA+B/B,GAArD;AACD;;AACD,UAAI6C,UAAU,GAAGpD,MAAM,CAACiC,SAAP,CAAiBkB,UAAjB,CAA4BZ,QAA5B,IAAwC,IAAIC,IAAJ,CAASxC,MAAM,CAACiC,SAAP,CAAiBkB,UAAjB,CAA4BZ,QAArC,EAA+CE,kBAA/C,EAAzD;AACA,UAAIY,UAAU,GAAGrD,MAAM,CAACiC,SAAP,CAAiBkB,UAAjB,CAA4BZ,QAA5B,IAAwC,IAAIC,IAAJ,CAASxC,MAAM,CAACiC,SAAP,CAAiBkB,UAAjB,CAA4BZ,QAArC,EAA+CG,kBAA/C,CAAkE,EAAlE,EAAsE;AAACC,QAAAA,MAAM,EAAE;AAAT,OAAtE,CAAzD;AACAS,MAAAA,UAAU,GAAGA,UAAU,IAAI5D,MAAM,CAAC4D,UAAD,CAAN,CAAmBR,MAAnB,CAA0B,SAA1B,CAA3B;AACAS,MAAAA,UAAU,GAAGA,UAAU,IAAIR,QAAQ,CAACrD,MAAM,CAAC6D,UAAD,EAAa,UAAb,CAAN,CAA+BT,MAA/B,CAAsC,OAAtC,CAAD,CAAnC;AACA,aAAO,EACH,GAAG7C,KADA;AAEHM,QAAAA,cAAc,EAAE6C,oBAFb;AAGHxD,QAAAA,cAAc,EAACqD,YAHZ;AAIH5B,QAAAA,cAAc,EAAE6B,oBAJb;AAKH1B,QAAAA,YAAY,EAAE2B,kBALX;AAMHpC,QAAAA,WAAW,EAACuC,UANT;AAOHpC,QAAAA,WAAW,EAACqC;AAPT,OAAP;;AASJ;AACE,aAAO,EACL,GAAGtD;AADE,OAAP;AA3IJ;AA+ID","sourcesContent":["import { servicePointConstants,orderConstants } from \"../constants\";\r\nimport * as moment from \"moment\";\r\nconst initialState = {\r\n  personInCharge: servicePointConstants.USER,\r\n  nearestServicePointChecked: false,\r\n  servicePoints: [],\r\n};\r\n\r\nexport function servicePoint(state = initialState, action) {\r\n  switch (action.type) {\r\n    ////////////////////////GET DATA//////////////////////\r\n    case servicePointConstants.GET_SERVICE_POINTS_REQUEST:\r\n      return {\r\n        ...state,\r\n      };\r\n    case servicePointConstants.GET_SERVICE_POINTS_SUCCESS:\r\n      let selectedServicePoint = state.servicePointId;\r\n      if (\r\n        !selectedServicePoint &&\r\n        action.servicePoints &&\r\n        action.servicePoints.length > 0\r\n      ) {\r\n        selectedServicePoint = action.servicePoints[0]._id;\r\n      }\r\n      return {\r\n        ...state,\r\n        servicePoints: action.servicePoints,\r\n        servicePointId: selectedServicePoint,\r\n      };\r\n    case servicePointConstants.GET_SERVICE_POINTS_FAILURE:\r\n      return {\r\n        ...state,\r\n      };\r\n\r\n    /*----------------------------Form Actions------------------------------ */\r\n    case servicePointConstants.PERSON_IN_CHARGE_CHANGED:\r\n      return {\r\n        ...state,\r\n        personInCharge: action.personInCharge,\r\n      };\r\n    case servicePointConstants.NEAREAST_SERVICE_POINT_CHOICE_CHANGED:\r\n      return {\r\n        ...state,\r\n        nearestServicePointChecked: action.nearestServicePointChecked,\r\n      };\r\n    case servicePointConstants.SELECTED_SERVICE_POINT_CHANGED:\r\n      return {\r\n        ...state,\r\n        servicePointId: action.servicePointId,\r\n      };\r\n    case servicePointConstants.SELECTED_ARRIVAL_DATE_CHANGED:\r\n      return {\r\n        ...state,\r\n        arrivalDate: action.date,\r\n      };\r\n    case servicePointConstants.SELECTED_ARRIVAL_TIME_CHANGED:\r\n      return {\r\n        ...state,\r\n        arrivalTime: action.time,\r\n      };\r\n\r\n    case servicePointConstants.AUTHORIZED_PERSON_NAME_CHANGED:\r\n      return {\r\n        ...state,\r\n        authorizedName: action.name,\r\n      };\r\n\r\n    case servicePointConstants.AUTHORIZED_PERSON_ID_CHANGED:\r\n      return {\r\n        ...state,\r\n        authorizedID: action.id,\r\n      };\r\n    case servicePointConstants.CONFIRM_AUTHORIZED_PERSON_DATA_SUCCESS:\r\n      console.log(\"will return from reducer : \", {\r\n        ...state,\r\n        authorizedDataConfirmed: true,\r\n        authorisedUserId: action.userId,\r\n      });\r\n      return {\r\n        ...state,\r\n        authorizedDataConfirmed: true,\r\n        authorisedUserId: action.userId,\r\n      };\r\n    case servicePointConstants.CLEAR:            \r\n      return {\r\n        personInCharge: servicePointConstants.USER,\r\n        nearestServicePointChecked: false,\r\n        servicePoints: [],\r\n        authorizedName: '',\r\n        authorizedID: '',\r\n        authorisedUserId: '',\r\n        servicePointId: '',\r\n        arrivalDate: '',\r\n        arrivalTime: '',\r\n      }; \r\n      case orderConstants.VIEW_ORDER_SUCCESS:\r\n        let person=servicePointConstants.USER;\r\n        let authorizedName='';\r\n        let authorizedID='';\r\n        let servicePointId='';\r\n        if(action.orderData.buyerData.authorizedPerson){\r\n          person=servicePointConstants.AUTHORIZED_PERSON\r\n          authorizedName=action.orderData.buyerData.authorizedPerson.name;\r\n          authorizedID=action.orderData.buyerData.authorizedPerson.nationalID;\r\n        }\r\n        if(action.orderData.buyerData.SP){\r\n          servicePointId= action.orderData.buyerData.SP._id;\r\n        }\r\n        let date = action.orderData.buyerData.timeslot && new Date(action.orderData.buyerData.timeslot).toLocaleDateString()\r\n        let time = action.orderData.buyerData.timeslot && new Date(action.orderData.buyerData.timeslot).toLocaleTimeString([], {hour12: false})\r\n        date = date && moment(date).format('Y-MM-DD');\r\n        time = time && parseInt(moment(time, \"HH:mm:ss\").format(\"HH:mm\"));\r\n        return {\r\n            ...state,\r\n            servicePointId: servicePointId,\r\n            personInCharge:person,\r\n            authorizedName: authorizedName,\r\n            authorizedID: authorizedID,\r\n            arrivalDate:date,\r\n            arrivalTime:time,\r\n          };\r\n        case orderConstants.VIEW_ORDER_SELLER_SUCCESS:\r\n        let personSeller=servicePointConstants.USER;\r\n        let authorizedNameSeller='';\r\n        let authorizedIDSeller='';\r\n        let servicePointIdSeller='';\r\n        if(action.orderData.sellerData.authorizedPerson){\r\n          personSeller=servicePointConstants.AUTHORIZED_PERSON\r\n          authorizedNameSeller=action.orderData.sellerData.authorizedPerson.name;\r\n          authorizedIDSeller=action.orderData.sellerData.authorizedPerson.nationalID;\r\n        }\r\n        if(action.orderData.sellerData.SP){\r\n          servicePointIdSeller= action.orderData.sellerData.SP._id;\r\n        }\r\n        let dateSeller = action.orderData.sellerData.timeslot && new Date(action.orderData.sellerData.timeslot).toLocaleDateString()\r\n        let timeSeller = action.orderData.sellerData.timeslot && new Date(action.orderData.sellerData.timeslot).toLocaleTimeString([], {hour12: false})\r\n        dateSeller = dateSeller && moment(dateSeller).format('Y-MM-DD');\r\n        timeSeller = timeSeller && parseInt(moment(timeSeller, \"HH:mm:ss\").format(\"HH:mm\"));\r\n        return {\r\n            ...state,\r\n            servicePointId: servicePointIdSeller,\r\n            personInCharge:personSeller,\r\n            authorizedName: authorizedNameSeller,\r\n            authorizedID: authorizedIDSeller,\r\n            arrivalDate:dateSeller,\r\n            arrivalTime:timeSeller,\r\n          };\r\n    default:\r\n      return {\r\n        ...state,\r\n      };\r\n  }\r\n}\r\n"]},"metadata":{},"sourceType":"module"}