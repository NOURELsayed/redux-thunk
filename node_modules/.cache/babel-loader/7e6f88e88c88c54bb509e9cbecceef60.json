{"ast":null,"code":"var _jsxFileName = \"/media/norhan/New Volume/work/React-projects/test-redux/src/containers/ProfilePage/Badges.jsx\";\nimport React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport { Segment, Grid, Label, Card, Icon, Button } from 'semantic-ui-react';\nimport { badgesActions, userActions } from '../../actions';\n\nclass Badges extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {};\n\n    this.handleOptBadge = async badgeID => {\n      await this.props.activateBadge(badgeID);\n      await this.props.viewBadgesToOpt();\n      await this.props.getUserProfileData();\n    };\n  }\n\n  async componentDidMount() {\n    await this.props.viewBadgesToOpt();\n    await this.props.getUserProfileData();\n  }\n\n  render() {\n    const {\n      badgesToOpt\n    } = this.props;\n    const {\n      badges\n    } = this.props.userProfile;\n    return /*#__PURE__*/React.createElement(Segment, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 23,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(Grid, {\n      columns: 2,\n      divided: true,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 24,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(Grid.Row, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 25,\n        columnNumber: 17\n      }\n    }, /*#__PURE__*/React.createElement(Grid.Column, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 26,\n        columnNumber: 21\n      }\n    }, /*#__PURE__*/React.createElement(Label, {\n      size: \"large\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 27,\n        columnNumber: 25\n      }\n    }, \"Earned Badges\"), badges.map(badge => {\n      return /*#__PURE__*/React.createElement(Card, {\n        fluid: true,\n        key: badge._id,\n        color: \"teal\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 30,\n          columnNumber: 29\n        }\n      }, /*#__PURE__*/React.createElement(Card.Content, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 31,\n          columnNumber: 33\n        }\n      }, /*#__PURE__*/React.createElement(Card.Header, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 32,\n          columnNumber: 37\n        }\n      }, /*#__PURE__*/React.createElement(Icon, {\n        name: \"trophy\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 32,\n          columnNumber: 50\n        }\n      }), badge.badgeTitle), /*#__PURE__*/React.createElement(Card.Meta, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 33,\n          columnNumber: 37\n        }\n      }, /*#__PURE__*/React.createElement(\"strong\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 33,\n          columnNumber: 48\n        }\n      }, \"Is Active: \"), badge.isActive ? \"Yes\" : \"No\"), /*#__PURE__*/React.createElement(Card.Meta, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 34,\n          columnNumber: 37\n        }\n      }, /*#__PURE__*/React.createElement(\"strong\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 34,\n          columnNumber: 48\n        }\n      }, \"Is Violated: \"), badge.isViolated ? \"Yes\" : \"No\"), /*#__PURE__*/React.createElement(Card.Description, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 35,\n          columnNumber: 37\n        }\n      }, badge.badge.description)), !badge.isActive && /*#__PURE__*/React.createElement(Card.Content, {\n        extra: true,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 37,\n          columnNumber: 53\n        }\n      }, /*#__PURE__*/React.createElement(Button, {\n        basic: true,\n        color: \"teal\",\n        circular: true,\n        onClick: () => {\n          this.handleOptBadge(badge.badge._id);\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 38,\n          columnNumber: 33\n        }\n      }, \"Re-Gain\")));\n    })), /*#__PURE__*/React.createElement(Grid.Column, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 47,\n        columnNumber: 21\n      }\n    }, /*#__PURE__*/React.createElement(Label, {\n      size: \"large\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 48,\n        columnNumber: 21\n      }\n    }, \"Badges To Opt\"), badgesToOpt.map(badgeToOpt => {\n      return /*#__PURE__*/React.createElement(Card, {\n        fluid: true,\n        key: badgeToOpt._id,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 51,\n          columnNumber: 29\n        }\n      }, /*#__PURE__*/React.createElement(Card.Content, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 52,\n          columnNumber: 33\n        }\n      }, /*#__PURE__*/React.createElement(Card.Header, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 53,\n          columnNumber: 37\n        }\n      }, /*#__PURE__*/React.createElement(Icon, {\n        name: \"trophy\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 53,\n          columnNumber: 50\n        }\n      }), badgeToOpt.title), /*#__PURE__*/React.createElement(Card.Meta, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 54,\n          columnNumber: 37\n        }\n      }, badgeToOpt.description), /*#__PURE__*/React.createElement(Card.Description, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 55,\n          columnNumber: 37\n        }\n      }, /*#__PURE__*/React.createElement(Button, {\n        icon: \"check\",\n        circular: true,\n        color: \"teal\",\n        onClick: () => this.handleOptBadge(badgeToOpt._id),\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 55,\n          columnNumber: 55\n        }\n      }))));\n    })))));\n  }\n\n}\n\nfunction mapState(state) {\n  const {\n    userProfile\n  } = state.users;\n  const {\n    optedBadges,\n    badgesToOpt\n  } = state.badges;\n  return {\n    userProfile,\n    optedBadges,\n    badgesToOpt\n  };\n}\n\nconst actionCreators = {\n  getUserProfileData: userActions.viewProfile,\n  viewOptedBadges: badgesActions.viewOptedBadges,\n  activateBadge: badgesActions.activateBadge,\n  viewBadgesToOpt: badgesActions.viewBadgesToOpt\n};\nconst connectedBadges = connect(mapState, actionCreators)(Badges);\nexport { connectedBadges as Badges };","map":{"version":3,"sources":["/media/norhan/New Volume/work/React-projects/test-redux/src/containers/ProfilePage/Badges.jsx"],"names":["React","Component","connect","Segment","Grid","Label","Card","Icon","Button","badgesActions","userActions","Badges","state","handleOptBadge","badgeID","props","activateBadge","viewBadgesToOpt","getUserProfileData","componentDidMount","render","badgesToOpt","badges","userProfile","map","badge","_id","badgeTitle","isActive","isViolated","description","badgeToOpt","title","mapState","users","optedBadges","actionCreators","viewProfile","viewOptedBadges","connectedBadges"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { Segment, Grid, Label,Card, Icon, Button } from 'semantic-ui-react';\r\nimport { badgesActions, userActions } from '../../actions';\r\n\r\nclass Badges extends Component {\r\n    state={}\r\n    async componentDidMount() {\r\n        await this.props.viewBadgesToOpt();\r\n        await this.props.getUserProfileData();\r\n    }\r\n\r\n    handleOptBadge= async(badgeID)=>{\r\n        await this.props.activateBadge(badgeID);\r\n        await this.props.viewBadgesToOpt();\r\n        await this.props.getUserProfileData();\r\n    }\r\n\r\n    render() { \r\n        const {badgesToOpt}=this.props;\r\n        const { badges } = this.props.userProfile;   \r\n        return ( \r\n        <Segment>\r\n            <Grid columns={2} divided>\r\n                <Grid.Row>\r\n                    <Grid.Column>\r\n                        <Label size=\"large\">Earned Badges</Label>\r\n                        {badges.map(badge=>{\r\n                          return(\r\n                            <Card fluid key={badge._id} color=\"teal\">\r\n                                <Card.Content>\r\n                                    <Card.Header><Icon name=\"trophy\"/>{badge.badgeTitle}</Card.Header>\r\n                                    <Card.Meta><strong>Is Active: </strong>{badge.isActive?\"Yes\":\"No\"}</Card.Meta>\r\n                                    <Card.Meta><strong>Is Violated: </strong>{badge.isViolated?\"Yes\":\"No\"}</Card.Meta>\r\n                                    <Card.Description>{badge.badge.description}</Card.Description>\r\n                                </Card.Content>\r\n                                {!badge.isActive && <Card.Content extra >\r\n                                <Button basic color='teal' circular onClick={()=>{this.handleOptBadge(badge.badge._id)}}>\r\n                                    Re-Gain\r\n                                </Button>\r\n                                </Card.Content>}\r\n                            </Card>\r\n                          )  \r\n                         \r\n                        })}\r\n                    </Grid.Column>\r\n                    <Grid.Column>\r\n                    <Label size=\"large\">Badges To Opt</Label>\r\n                    {badgesToOpt.map(badgeToOpt=>{\r\n                          return(\r\n                            <Card fluid key={badgeToOpt._id}>\r\n                                <Card.Content>\r\n                                    <Card.Header><Icon name=\"trophy\"/>{badgeToOpt.title}</Card.Header>\r\n                                    <Card.Meta>{badgeToOpt.description}</Card.Meta>\r\n                                    <Card.Description><Button icon=\"check\" circular color=\"teal\" onClick={()=>this.handleOptBadge(badgeToOpt._id)}/></Card.Description>\r\n                                </Card.Content>\r\n                            </Card>\r\n                          )  \r\n                         \r\n                        })}\r\n                    </Grid.Column>\r\n                </Grid.Row>\r\n            </Grid>\r\n        </Segment> );\r\n    }\r\n}\r\n \r\nfunction mapState(state) {\r\n    const { userProfile } = state.users;\r\n    const {optedBadges,badgesToOpt} = state.badges\r\n    return { userProfile,optedBadges,badgesToOpt };\r\n}\r\nconst actionCreators = {\r\n    getUserProfileData: userActions.viewProfile,\r\n    viewOptedBadges: badgesActions.viewOptedBadges,\r\n    activateBadge: badgesActions.activateBadge,\r\n    viewBadgesToOpt:badgesActions.viewBadgesToOpt,\r\n};\r\n\r\nconst connectedBadges = connect(mapState, actionCreators)(Badges);\r\nexport { connectedBadges as Badges };\r\n"]},"metadata":{},"sourceType":"module"}