{"ast":null,"code":"var _jsxFileName = \"/media/norhan/New Volume/work/React-projects/test-redux/src/containers/ProfilePage/UpdateAddressModal.jsx\";\nimport React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport { Button, Modal, Input, Grid, Icon } from 'semantic-ui-react';\nimport { userActions } from './../../actions/user.actions';\n\nclass UpdateAddressModal extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      apartment: '',\n      apartmentValid: false,\n      floor: '',\n      floorValid: false,\n      building: '',\n      buildingValid: false,\n      street: '',\n      streetValid: false,\n      district: '',\n      districtValid: false,\n      city: '',\n      cityValid: false,\n      country: '',\n      countryValid: false\n    };\n\n    this.enableSubmit = () => {\n      return this.state.apartmentValid && this.state.floorValid && this.state.buildingValid && this.state.streetValid && this.state.districtValid && this.state.cityValid && this.state.countryValid;\n    };\n\n    this.show = () => {\n      this.setState({ ...this.props.userProfile.permanentAddress,\n        apartmentValid: !isNaN(parseInt(this.props.userProfile.permanentAddress.apartment)),\n        floorValid: !isNaN(parseInt(this.props.userProfile.permanentAddress.floor)),\n        buildingValid: !isNaN(parseInt(this.props.userProfile.permanentAddress.building)),\n        streetValid: this.props.userProfile.permanentAddress.street && this.props.userProfile.permanentAddress.street.length > 0,\n        districtValid: this.props.userProfile.permanentAddress.district && this.props.userProfile.permanentAddress.district.length > 0,\n        cityValid: this.props.userProfile.permanentAddress.city && this.props.userProfile.permanentAddress.city.length > 0,\n        countryValid: this.props.userProfile.permanentAddress.country && this.props.userProfile.permanentAddress.country.length > 0\n      });\n      this.props.showUpdateAddressModal(true);\n    };\n\n    this.close = () => this.props.showUpdateAddressModal(false);\n\n    this.intInputChanged = (e, {\n      value,\n      name\n    }) => {\n      let valueAsInt = parseInt(value);\n      const newState = {};\n      newState[name] = isNaN(valueAsInt) ? value : valueAsInt;\n      newState[name + 'Valid'] = !isNaN(valueAsInt);\n      this.setState(newState);\n    };\n\n    this.inputChanged = (e, {\n      value,\n      name\n    }) => {\n      const newState = {};\n      newState[name] = value;\n      newState[name + 'Valid'] = value.length > 0;\n      this.setState(newState);\n    };\n  }\n\n  render() {\n    const {\n      openUpdateAddress\n    } = this.props;\n    let permanentAddress = this.state;\n    return /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 82,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(Button, {\n      onClick: this.show,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 83,\n        columnNumber: 17\n      }\n    }, \"Edit\"), /*#__PURE__*/React.createElement(Modal, {\n      open: openUpdateAddress,\n      onClose: this.close,\n      closeIcon: true,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 84,\n        columnNumber: 17\n      }\n    }, /*#__PURE__*/React.createElement(Modal.Header, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 85,\n        columnNumber: 21\n      }\n    }, \"Update addresss\"), /*#__PURE__*/React.createElement(Modal.Content, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 86,\n        columnNumber: 21\n      }\n    }, /*#__PURE__*/React.createElement(Grid, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 87,\n        columnNumber: 25\n      }\n    }, /*#__PURE__*/React.createElement(Grid.Row, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 88,\n        columnNumber: 29\n      }\n    }, /*#__PURE__*/React.createElement(Grid.Column, {\n      width: 3,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 89,\n        columnNumber: 33\n      }\n    }, \"apartment :\"), /*#__PURE__*/React.createElement(Grid.Column, {\n      width: 5,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 90,\n        columnNumber: 33\n      }\n    }, /*#__PURE__*/React.createElement(Input, {\n      placeholder: \"apartment : \",\n      name: \"apartment\",\n      onChange: this.intInputChanged,\n      value: permanentAddress.apartment || '',\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 91,\n        columnNumber: 37\n      }\n    }), this.state.apartmentValid ? /*#__PURE__*/React.createElement(Icon, {\n      color: \"green\",\n      name: \"checkmark\",\n      size: \"small\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 98,\n        columnNumber: 41\n      }\n    }) : /*#__PURE__*/React.createElement(Icon, {\n      color: \"yellow\",\n      name: \"warning\",\n      size: \"small\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 104,\n        columnNumber: 41\n      }\n    }))), /*#__PURE__*/React.createElement(Grid.Row, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 112,\n        columnNumber: 29\n      }\n    }, /*#__PURE__*/React.createElement(Grid.Column, {\n      width: 3,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 113,\n        columnNumber: 33\n      }\n    }, \"floor :\"), /*#__PURE__*/React.createElement(Grid.Column, {\n      width: 5,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 114,\n        columnNumber: 33\n      }\n    }, /*#__PURE__*/React.createElement(Input, {\n      placeholder: \"floor : \",\n      name: \"floor\",\n      onChange: this.intInputChanged,\n      value: permanentAddress.floor || '',\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 115,\n        columnNumber: 37\n      }\n    }), this.state.floorValid ? /*#__PURE__*/React.createElement(Icon, {\n      color: \"green\",\n      name: \"checkmark\",\n      size: \"small\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 122,\n        columnNumber: 41\n      }\n    }) : /*#__PURE__*/React.createElement(Icon, {\n      color: \"yellow\",\n      name: \"warning\",\n      size: \"small\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 128,\n        columnNumber: 41\n      }\n    }))), /*#__PURE__*/React.createElement(Grid.Row, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 136,\n        columnNumber: 29\n      }\n    }, /*#__PURE__*/React.createElement(Grid.Column, {\n      width: 3,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 137,\n        columnNumber: 33\n      }\n    }, \"building :\"), /*#__PURE__*/React.createElement(Grid.Column, {\n      width: 5,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 138,\n        columnNumber: 33\n      }\n    }, /*#__PURE__*/React.createElement(Input, {\n      placeholder: \"building : \",\n      name: \"building\",\n      onChange: this.intInputChanged,\n      value: permanentAddress.building || '',\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 139,\n        columnNumber: 37\n      }\n    }), this.state.buildingValid ? /*#__PURE__*/React.createElement(Icon, {\n      color: \"green\",\n      name: \"checkmark\",\n      size: \"small\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 146,\n        columnNumber: 41\n      }\n    }) : /*#__PURE__*/React.createElement(Icon, {\n      color: \"yellow\",\n      name: \"warning\",\n      size: \"small\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 152,\n        columnNumber: 41\n      }\n    }))), /*#__PURE__*/React.createElement(Grid.Row, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 160,\n        columnNumber: 29\n      }\n    }, /*#__PURE__*/React.createElement(Grid.Column, {\n      width: 3,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 161,\n        columnNumber: 33\n      }\n    }, \"street :\"), /*#__PURE__*/React.createElement(Grid.Column, {\n      width: 5,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 162,\n        columnNumber: 33\n      }\n    }, /*#__PURE__*/React.createElement(Input, {\n      placeholder: \"street : \",\n      name: \"street\",\n      onChange: this.inputChanged,\n      value: permanentAddress.street || '',\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 163,\n        columnNumber: 37\n      }\n    }), this.state.streetValid ? /*#__PURE__*/React.createElement(Icon, {\n      color: \"green\",\n      name: \"checkmark\",\n      size: \"small\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 170,\n        columnNumber: 41\n      }\n    }) : /*#__PURE__*/React.createElement(Icon, {\n      color: \"yellow\",\n      name: \"warning\",\n      size: \"small\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 176,\n        columnNumber: 41\n      }\n    }))), /*#__PURE__*/React.createElement(Grid.Row, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 184,\n        columnNumber: 29\n      }\n    }, /*#__PURE__*/React.createElement(Grid.Column, {\n      width: 3,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 185,\n        columnNumber: 33\n      }\n    }, \"district :\"), /*#__PURE__*/React.createElement(Grid.Column, {\n      width: 5,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 186,\n        columnNumber: 33\n      }\n    }, /*#__PURE__*/React.createElement(Input, {\n      placeholder: \"district : \",\n      name: \"district\",\n      onChange: this.inputChanged,\n      value: permanentAddress.district || '',\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 187,\n        columnNumber: 37\n      }\n    }), this.state.districtValid ? /*#__PURE__*/React.createElement(Icon, {\n      color: \"green\",\n      name: \"checkmark\",\n      size: \"small\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 194,\n        columnNumber: 41\n      }\n    }) : /*#__PURE__*/React.createElement(Icon, {\n      color: \"yellow\",\n      name: \"warning\",\n      size: \"small\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 200,\n        columnNumber: 41\n      }\n    }))), /*#__PURE__*/React.createElement(Grid.Row, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 208,\n        columnNumber: 29\n      }\n    }, /*#__PURE__*/React.createElement(Grid.Column, {\n      width: 3,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 209,\n        columnNumber: 33\n      }\n    }, \"city :\"), /*#__PURE__*/React.createElement(Grid.Column, {\n      width: 5,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 210,\n        columnNumber: 33\n      }\n    }, /*#__PURE__*/React.createElement(Input, {\n      placeholder: \"city : \",\n      name: \"city\",\n      onChange: this.inputChanged,\n      value: permanentAddress.city || '',\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 211,\n        columnNumber: 37\n      }\n    }), this.state.cityValid ? /*#__PURE__*/React.createElement(Icon, {\n      color: \"green\",\n      name: \"checkmark\",\n      size: \"small\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 218,\n        columnNumber: 41\n      }\n    }) : /*#__PURE__*/React.createElement(Icon, {\n      color: \"yellow\",\n      name: \"warning\",\n      size: \"small\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 224,\n        columnNumber: 41\n      }\n    }))), /*#__PURE__*/React.createElement(Grid.Row, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 232,\n        columnNumber: 29\n      }\n    }, /*#__PURE__*/React.createElement(Grid.Column, {\n      width: 3,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 233,\n        columnNumber: 33\n      }\n    }, \"country :\"), /*#__PURE__*/React.createElement(Grid.Column, {\n      width: 5,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 234,\n        columnNumber: 33\n      }\n    }, /*#__PURE__*/React.createElement(Input, {\n      placeholder: \"country : \",\n      name: \"country\",\n      onChange: this.inputChanged,\n      value: permanentAddress.country || '',\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 235,\n        columnNumber: 37\n      }\n    }), this.state.countryValid ? /*#__PURE__*/React.createElement(Icon, {\n      color: \"green\",\n      name: \"checkmark\",\n      size: \"small\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 242,\n        columnNumber: 41\n      }\n    }) : /*#__PURE__*/React.createElement(Icon, {\n      color: \"yellow\",\n      name: \"warning\",\n      size: \"small\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 248,\n        columnNumber: 41\n      }\n    }))))), /*#__PURE__*/React.createElement(Modal.Actions, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 258,\n        columnNumber: 21\n      }\n    }, /*#__PURE__*/React.createElement(Button.Group, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 259,\n        columnNumber: 25\n      }\n    }, /*#__PURE__*/React.createElement(Button, {\n      onClick: this.close,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 260,\n        columnNumber: 29\n      }\n    }, \"Cancel\"), /*#__PURE__*/React.createElement(Button.Or, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 261,\n        columnNumber: 29\n      }\n    }), this.enableSubmit() ? /*#__PURE__*/React.createElement(Button, {\n      positive: true,\n      onClick: () => {\n        this.props.handleUpdateAddressButtonClicked({\n          apartment: this.state.apartment,\n          floor: this.state.floor,\n          building: this.state.building,\n          street: this.state.street,\n          district: this.state.district,\n          city: this.state.city,\n          country: this.state.country\n        });\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 263,\n        columnNumber: 33\n      }\n    }, \"Save\") : /*#__PURE__*/React.createElement(Button, {\n      disabled: true,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 282,\n        columnNumber: 33\n      }\n    }, \"Save\")))));\n  }\n\n}\n\nfunction mapState(state) {\n  const {\n    openUpdateAddress,\n    userProfile\n  } = state.users;\n  return {\n    openUpdateAddress,\n    userProfile\n  };\n}\n\nconst actionCreators = {\n  handleUpdateAddressButtonClicked: userActions.updateAddress,\n  showUpdateAddressModal: userActions.showUpdateAddressModal\n};\nconst connectedUpdateAddressModal = connect(mapState, actionCreators)(UpdateAddressModal);\nexport { connectedUpdateAddressModal as UpdateAddressModal };","map":{"version":3,"sources":["/media/norhan/New Volume/work/React-projects/test-redux/src/containers/ProfilePage/UpdateAddressModal.jsx"],"names":["React","Component","connect","Button","Modal","Input","Grid","Icon","userActions","UpdateAddressModal","state","apartment","apartmentValid","floor","floorValid","building","buildingValid","street","streetValid","district","districtValid","city","cityValid","country","countryValid","enableSubmit","show","setState","props","userProfile","permanentAddress","isNaN","parseInt","length","showUpdateAddressModal","close","intInputChanged","e","value","name","valueAsInt","newState","inputChanged","render","openUpdateAddress","handleUpdateAddressButtonClicked","mapState","users","actionCreators","updateAddress","connectedUpdateAddressModal"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { Button, Modal, Input, Grid, Icon } from 'semantic-ui-react';\r\nimport { userActions } from './../../actions/user.actions';\r\n\r\nclass UpdateAddressModal extends Component {\r\n    state = {\r\n        apartment: '',\r\n        apartmentValid: false,\r\n        floor: '',\r\n        floorValid: false,\r\n        building: '',\r\n        buildingValid: false,\r\n        street: '',\r\n        streetValid: false,\r\n        district: '',\r\n        districtValid: false,\r\n        city: '',\r\n        cityValid: false,\r\n        country: '',\r\n        countryValid: false,\r\n    };\r\n    enableSubmit = () => {\r\n        return (\r\n            this.state.apartmentValid &&\r\n            this.state.floorValid &&\r\n            this.state.buildingValid &&\r\n            this.state.streetValid &&\r\n            this.state.districtValid &&\r\n            this.state.cityValid &&\r\n            this.state.countryValid\r\n        );\r\n    };\r\n\r\n    show = () => {\r\n        this.setState({\r\n            ...this.props.userProfile.permanentAddress,\r\n            apartmentValid: !isNaN(\r\n                parseInt(this.props.userProfile.permanentAddress.apartment),\r\n            ),\r\n            floorValid: !isNaN(\r\n                parseInt(this.props.userProfile.permanentAddress.floor),\r\n            ),\r\n            buildingValid: !isNaN(\r\n                parseInt(this.props.userProfile.permanentAddress.building),\r\n            ),\r\n            streetValid:\r\n                this.props.userProfile.permanentAddress.street &&\r\n                this.props.userProfile.permanentAddress.street.length > 0,\r\n            districtValid:\r\n                this.props.userProfile.permanentAddress.district &&\r\n                this.props.userProfile.permanentAddress.district.length > 0,\r\n            cityValid:\r\n                this.props.userProfile.permanentAddress.city &&\r\n                this.props.userProfile.permanentAddress.city.length > 0,\r\n            countryValid:\r\n                this.props.userProfile.permanentAddress.country &&\r\n                this.props.userProfile.permanentAddress.country.length > 0,\r\n        });\r\n        this.props.showUpdateAddressModal(true);\r\n    };\r\n    close = () => this.props.showUpdateAddressModal(false);\r\n    intInputChanged = (e, { value, name }) => {\r\n        let valueAsInt = parseInt(value);\r\n        const newState = {};\r\n        newState[name] = isNaN(valueAsInt) ? value : valueAsInt;\r\n        newState[name + 'Valid'] = !isNaN(valueAsInt);\r\n        this.setState(newState);\r\n    };\r\n\r\n    inputChanged = (e, { value, name }) => {\r\n        const newState = {};\r\n        newState[name] = value;\r\n        newState[name + 'Valid'] = value.length > 0;\r\n        this.setState(newState);\r\n    };\r\n\r\n    render() {\r\n        const { openUpdateAddress } = this.props;\r\n        let permanentAddress = this.state;\r\n        return (\r\n            <div>\r\n                <Button onClick={this.show}>Edit</Button>\r\n                <Modal open={openUpdateAddress} onClose={this.close} closeIcon>\r\n                    <Modal.Header>Update addresss</Modal.Header>\r\n                    <Modal.Content>\r\n                        <Grid>\r\n                            <Grid.Row>\r\n                                <Grid.Column width={3}>apartment :</Grid.Column>\r\n                                <Grid.Column width={5}>\r\n                                    <Input\r\n                                        placeholder='apartment : '\r\n                                        name='apartment'\r\n                                        onChange={this.intInputChanged}\r\n                                        value={permanentAddress.apartment || ''}\r\n                                    />\r\n                                    {this.state.apartmentValid ? (\r\n                                        <Icon\r\n                                            color='green'\r\n                                            name='checkmark'\r\n                                            size='small'\r\n                                        />\r\n                                    ) : (\r\n                                        <Icon\r\n                                            color='yellow'\r\n                                            name='warning'\r\n                                            size='small'\r\n                                        />\r\n                                    )}\r\n                                </Grid.Column>\r\n                            </Grid.Row>\r\n                            <Grid.Row>\r\n                                <Grid.Column width={3}>floor :</Grid.Column>\r\n                                <Grid.Column width={5}>\r\n                                    <Input\r\n                                        placeholder='floor : '\r\n                                        name='floor'\r\n                                        onChange={this.intInputChanged}\r\n                                        value={permanentAddress.floor || ''}\r\n                                    />\r\n                                    {this.state.floorValid ? (\r\n                                        <Icon\r\n                                            color='green'\r\n                                            name='checkmark'\r\n                                            size='small'\r\n                                        />\r\n                                    ) : (\r\n                                        <Icon\r\n                                            color='yellow'\r\n                                            name='warning'\r\n                                            size='small'\r\n                                        />\r\n                                    )}\r\n                                </Grid.Column>\r\n                            </Grid.Row>\r\n                            <Grid.Row>\r\n                                <Grid.Column width={3}>building :</Grid.Column>\r\n                                <Grid.Column width={5}>\r\n                                    <Input\r\n                                        placeholder='building : '\r\n                                        name='building'\r\n                                        onChange={this.intInputChanged}\r\n                                        value={permanentAddress.building || ''}\r\n                                    />\r\n                                    {this.state.buildingValid ? (\r\n                                        <Icon\r\n                                            color='green'\r\n                                            name='checkmark'\r\n                                            size='small'\r\n                                        />\r\n                                    ) : (\r\n                                        <Icon\r\n                                            color='yellow'\r\n                                            name='warning'\r\n                                            size='small'\r\n                                        />\r\n                                    )}\r\n                                </Grid.Column>\r\n                            </Grid.Row>\r\n                            <Grid.Row>\r\n                                <Grid.Column width={3}>street :</Grid.Column>\r\n                                <Grid.Column width={5}>\r\n                                    <Input\r\n                                        placeholder='street : '\r\n                                        name='street'\r\n                                        onChange={this.inputChanged}\r\n                                        value={permanentAddress.street || ''}\r\n                                    />\r\n                                    {this.state.streetValid ? (\r\n                                        <Icon\r\n                                            color='green'\r\n                                            name='checkmark'\r\n                                            size='small'\r\n                                        />\r\n                                    ) : (\r\n                                        <Icon\r\n                                            color='yellow'\r\n                                            name='warning'\r\n                                            size='small'\r\n                                        />\r\n                                    )}\r\n                                </Grid.Column>\r\n                            </Grid.Row>\r\n                            <Grid.Row>\r\n                                <Grid.Column width={3}>district :</Grid.Column>\r\n                                <Grid.Column width={5}>\r\n                                    <Input\r\n                                        placeholder='district : '\r\n                                        name='district'\r\n                                        onChange={this.inputChanged}\r\n                                        value={permanentAddress.district || ''}\r\n                                    />\r\n                                    {this.state.districtValid ? (\r\n                                        <Icon\r\n                                            color='green'\r\n                                            name='checkmark'\r\n                                            size='small'\r\n                                        />\r\n                                    ) : (\r\n                                        <Icon\r\n                                            color='yellow'\r\n                                            name='warning'\r\n                                            size='small'\r\n                                        />\r\n                                    )}\r\n                                </Grid.Column>\r\n                            </Grid.Row>\r\n                            <Grid.Row>\r\n                                <Grid.Column width={3}>city :</Grid.Column>\r\n                                <Grid.Column width={5}>\r\n                                    <Input\r\n                                        placeholder='city : '\r\n                                        name='city'\r\n                                        onChange={this.inputChanged}\r\n                                        value={permanentAddress.city || ''}\r\n                                    />\r\n                                    {this.state.cityValid ? (\r\n                                        <Icon\r\n                                            color='green'\r\n                                            name='checkmark'\r\n                                            size='small'\r\n                                        />\r\n                                    ) : (\r\n                                        <Icon\r\n                                            color='yellow'\r\n                                            name='warning'\r\n                                            size='small'\r\n                                        />\r\n                                    )}\r\n                                </Grid.Column>\r\n                            </Grid.Row>\r\n                            <Grid.Row>\r\n                                <Grid.Column width={3}>country :</Grid.Column>\r\n                                <Grid.Column width={5}>\r\n                                    <Input\r\n                                        placeholder='country : '\r\n                                        name='country'\r\n                                        onChange={this.inputChanged}\r\n                                        value={permanentAddress.country || ''}\r\n                                    />\r\n                                    {this.state.countryValid ? (\r\n                                        <Icon\r\n                                            color='green'\r\n                                            name='checkmark'\r\n                                            size='small'\r\n                                        />\r\n                                    ) : (\r\n                                        <Icon\r\n                                            color='yellow'\r\n                                            name='warning'\r\n                                            size='small'\r\n                                        />\r\n                                    )}\r\n                                </Grid.Column>\r\n                            </Grid.Row>\r\n                        </Grid>\r\n                    </Modal.Content>\r\n                    <Modal.Actions>\r\n                        <Button.Group>\r\n                            <Button onClick={this.close}>Cancel</Button>\r\n                            <Button.Or />\r\n                            {this.enableSubmit() ? (\r\n                                <Button\r\n                                    positive\r\n                                    onClick={() => {\r\n                                        this.props.handleUpdateAddressButtonClicked(\r\n                                            {\r\n                                                apartment: this.state.apartment,\r\n                                                floor: this.state.floor,\r\n                                                building: this.state.building,\r\n                                                street: this.state.street,\r\n                                                district: this.state.district,\r\n                                                city: this.state.city,\r\n                                                country: this.state.country,\r\n                                            },\r\n                                        );\r\n                                    }}\r\n                                >\r\n                                    Save\r\n                                </Button>\r\n                            ) : (\r\n                                <Button disabled>Save</Button>\r\n                            )}\r\n                        </Button.Group>\r\n                    </Modal.Actions>\r\n                </Modal>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nfunction mapState(state) {\r\n    const { openUpdateAddress, userProfile } = state.users;\r\n    return { openUpdateAddress, userProfile };\r\n}\r\n\r\nconst actionCreators = {\r\n    handleUpdateAddressButtonClicked: userActions.updateAddress,\r\n    showUpdateAddressModal: userActions.showUpdateAddressModal,\r\n};\r\n\r\nconst connectedUpdateAddressModal = connect(\r\n    mapState,\r\n    actionCreators,\r\n)(UpdateAddressModal);\r\n\r\nexport { connectedUpdateAddressModal as UpdateAddressModal };\r\n"]},"metadata":{},"sourceType":"module"}