{"ast":null,"code":"import { questionConstants } from '../constants';\nimport { questionService } from \"./../services\";\nimport { alertActions } from './';\nexport const questionActions = {\n  postQuestion,\n  postAnswer,\n  fetchQuestionsToUserRequest,\n  fetchPostQuestion\n};\n\nfunction postQuestion(questionObj) {\n  return async dispatch => {\n    await dispatch(request());\n\n    try {\n      const {\n        data\n      } = await questionService.postQuestion(questionObj);\n      dispatch(success(data));\n    } catch (ex) {\n      dispatch(failure(ex));\n      dispatch(alertActions.error({\n        header: \"can't add Question right now, please try later\",\n        content: ex.message\n      }));\n    }\n  };\n\n  function request() {\n    return {\n      type: questionConstants.QUESTION_REQUEST\n    };\n  }\n\n  function success(data) {\n    return {\n      type: questionConstants.QUESTION_SUCCESS,\n      data\n    };\n  }\n\n  function failure(error) {\n    return {\n      type: questionConstants.QUESTION_FAILURE,\n      error\n    };\n  }\n}\n\nfunction postAnswer(answerObj) {\n  return async dispatch => {\n    await dispatch(request());\n\n    try {\n      const {\n        data\n      } = await questionService.postAnswer(answerObj);\n      dispatch(success(data));\n    } catch (ex) {\n      dispatch(failure(ex));\n      dispatch(alertActions.error({\n        header: \"can't add Question right now, please try later\",\n        content: ex.message\n      }));\n    }\n  };\n\n  function request() {\n    return {\n      type: questionConstants.ANSWER_REQUEST\n    };\n  }\n\n  function success(data) {\n    return {\n      type: questionConstants.ANSWER_SUCCESS,\n      data\n    };\n  }\n\n  function failure(error) {\n    return {\n      type: questionConstants.ANSWER_FAILURE,\n      error\n    };\n  }\n}\n\nfunction fetchQuestionsToUserRequest(options) {\n  return async dispatch => {\n    await dispatch(request());\n\n    try {\n      const {\n        data\n      } = await questionService.fetchQuestionsToUserRequest(options);\n      dispatch(success(data));\n    } catch (ex) {\n      dispatch(failure(ex));\n      dispatch(alertActions.error({\n        content: ex.message\n      }));\n    }\n  };\n\n  function request() {\n    return {\n      type: questionConstants.GETQUESTIONSTOUSERREQUEST_REQUEST\n    };\n  }\n\n  function success(data) {\n    return {\n      type: questionConstants.GETQUESTIONSTOUSERREQUEST_SUCCESS,\n      data\n    };\n  }\n\n  function failure(error) {\n    return {\n      type: questionConstants.GETQUESTIONSTOUSERREQUEST_FAILURE,\n      error\n    };\n  }\n}\n\nfunction fetchPostQuestion(postId) {\n  return async dispatch => {\n    await dispatch(request(postId));\n\n    try {\n      const {\n        data\n      } = await questionService.fetchPostQuestion(postId);\n      dispatch(success(data.questions));\n    } catch (ex) {\n      dispatch(failure(ex));\n    }\n  };\n\n  function request() {\n    return {\n      type: questionConstants.FETCH_POST_QUESTIONS_REQUEST\n    };\n  }\n\n  function success(postquestions) {\n    return {\n      type: questionConstants.FETCH_POST_QUESTIONS_SUCCESS,\n      postquestions\n    };\n  }\n\n  function failure(error) {\n    return {\n      type: questionConstants.FETCH_POST_QUESTIONS_FAILURE,\n      error\n    };\n  }\n}","map":{"version":3,"sources":["/media/norhan/New Volume/work/React-projects/test-redux/src/actions/question.actions.js"],"names":["questionConstants","questionService","alertActions","questionActions","postQuestion","postAnswer","fetchQuestionsToUserRequest","fetchPostQuestion","questionObj","dispatch","request","data","success","ex","failure","error","header","content","message","type","QUESTION_REQUEST","QUESTION_SUCCESS","QUESTION_FAILURE","answerObj","ANSWER_REQUEST","ANSWER_SUCCESS","ANSWER_FAILURE","options","GETQUESTIONSTOUSERREQUEST_REQUEST","GETQUESTIONSTOUSERREQUEST_SUCCESS","GETQUESTIONSTOUSERREQUEST_FAILURE","postId","questions","FETCH_POST_QUESTIONS_REQUEST","postquestions","FETCH_POST_QUESTIONS_SUCCESS","FETCH_POST_QUESTIONS_FAILURE"],"mappings":"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","sourcesContent":["import {questionConstants} from '../constants';\r\nimport { questionService } from \"./../services\";\r\nimport { alertActions } from './';\r\n\r\nexport const questionActions = {\r\n    postQuestion,postAnswer,fetchQuestionsToUserRequest,\r\n    fetchPostQuestion\r\n};\r\n \r\nfunction postQuestion(questionObj) {\r\n    return async dispatch => {\r\n      await dispatch(request());\r\n      try {\r\n        const { data } = await questionService.postQuestion(questionObj);\r\n        dispatch(success(data));        \r\n      } catch (ex) {\r\n        dispatch(failure(ex));\r\n        dispatch(\r\n          alertActions.error({\r\n            header: \"can't add Question right now, please try later\",\r\n            content: ex.message\r\n          })\r\n        );\r\n      }\r\n    };\r\n    function request() {\r\n      return {\r\n        type: questionConstants.QUESTION_REQUEST\r\n      };\r\n    }\r\n    function success(data) {\r\n      return {\r\n        type: questionConstants.QUESTION_SUCCESS,\r\n        data\r\n      };\r\n    }\r\n    function failure(error) {\r\n      return {\r\n        type: questionConstants.QUESTION_FAILURE,\r\n        error\r\n      };\r\n    }\r\n  }\r\n\r\n\r\n\r\n  \r\nfunction postAnswer(answerObj) {\r\n    return async dispatch => {\r\n      await dispatch(request());\r\n      try {\r\n        const { data } = await questionService.postAnswer(answerObj);\r\n        dispatch(success(data));\r\n        \r\n      } catch (ex) {\r\n        dispatch(failure(ex));\r\n        dispatch(\r\n          alertActions.error({\r\n            header: \"can't add Question right now, please try later\",\r\n            content: ex.message\r\n          })\r\n        );\r\n      }\r\n    };\r\n    function request() {\r\n\r\n      return {\r\n        type: questionConstants.ANSWER_REQUEST\r\n      };\r\n    }\r\n    function success(data) {\r\n      return {\r\n        type: questionConstants.ANSWER_SUCCESS,\r\n        data\r\n      };\r\n    }\r\n    function failure(error) {\r\n      return {\r\n        type: questionConstants.ANSWER_FAILURE,\r\n        error\r\n      };\r\n    }\r\n  }\r\n\r\n  function fetchQuestionsToUserRequest(options) {\r\n    return async dispatch => {\r\n      await dispatch(request());\r\n      try {\r\n        const { data } = await questionService.fetchQuestionsToUserRequest(options);\r\n        dispatch(success(data));\r\n        \r\n      } catch (ex) {\r\n        dispatch(failure(ex));\r\n        dispatch(\r\n          alertActions.error({\r\n            content: ex.message\r\n          })\r\n        );\r\n      }\r\n    };\r\n    function request() {\r\n\r\n      return {\r\n        type: questionConstants.GETQUESTIONSTOUSERREQUEST_REQUEST\r\n      };\r\n    }\r\n    function success(data) {\r\n      return {\r\n        type: questionConstants.GETQUESTIONSTOUSERREQUEST_SUCCESS,\r\n        data\r\n      };\r\n    }\r\n    function failure(error) {\r\n      return {\r\n        type: questionConstants.GETQUESTIONSTOUSERREQUEST_FAILURE,\r\n        error\r\n      };\r\n    }\r\n  }\r\n\r\n  function fetchPostQuestion(postId) {\r\n    return async dispatch => {\r\n      await dispatch(request(postId));\r\n      try {\r\n        const { data } = await questionService.fetchPostQuestion(postId);\r\n        dispatch(success(data.questions));\r\n      } catch (ex) {\r\n        dispatch(failure(ex));\r\n      }\r\n    };\r\n    function request() {\r\n\r\n      return {\r\n        type: questionConstants.FETCH_POST_QUESTIONS_REQUEST\r\n      };\r\n    }\r\n    function success(postquestions) {\r\n      return {\r\n        type: questionConstants.FETCH_POST_QUESTIONS_SUCCESS,\r\n        postquestions\r\n      };\r\n    }\r\n    function failure(error) {\r\n      return {\r\n        type: questionConstants.FETCH_POST_QUESTIONS_FAILURE,\r\n        error\r\n      };\r\n    }\r\n  }"]},"metadata":{},"sourceType":"module"}