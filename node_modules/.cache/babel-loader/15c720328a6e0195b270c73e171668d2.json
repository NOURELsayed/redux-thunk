{"ast":null,"code":"var _jsxFileName = \"/media/norhan/New Volume/work/React-projects/test-redux/src/containers/ReportProblem/TicketPage.jsx\";\nimport React, { Component } from \"react\";\nimport { connect } from \"react-redux\";\nimport { Label, Card, Segment, Image, Grid, Comment, Header, Form, Button, Icon } from \"semantic-ui-react\";\nimport { Link } from \"react-router-dom\";\nimport { reportProblemActions, avatarActions } from \"../../actions\";\nimport { backendUrl } from \"../../config\";\nimport Slider from \"react-slick\";\nimport { isEmpty } from \"lodash\";\n\nclass TicketPage extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      reply: ''\n    };\n\n    this.handleReplyFieldChange = (e, {\n      value\n    }) => {\n      if (this.state.reply === '' && value === ' ') return;\n      this.setState({\n        reply: value\n      });\n    };\n\n    this.handleSubmitReply = async e => {\n      e.preventDefault();\n      if (this.props.ticketData.isResolved === true) return;\n      if (this.state.reply === '') return;\n      await this.props.submitReply(this.state.reply, this.props.ticketData._id);\n      this.setState({\n        reply: ''\n      });\n    };\n\n    this.renderImages = ticket => {\n      const settings = {\n        dots: false,\n        autoplay: true,\n        autoplaySpeed: 2000,\n        infinite: true,\n        speed: 1000,\n        slidesToShow: 1,\n        slidesToScroll: 1,\n        arrows: false,\n        adaptiveHeight: false\n      };\n      return /*#__PURE__*/React.createElement(Slider, Object.assign({}, settings, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 47,\n          columnNumber: 7\n        }\n      }), ticket.images.map(image => {\n        return /*#__PURE__*/React.createElement(\"div\", {\n          key: image,\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 50,\n            columnNumber: 13\n          }\n        }, /*#__PURE__*/React.createElement(Image, {\n          centered: true,\n          src: `${backendUrl}/${image}`,\n          rounded: true,\n          wrapped: true,\n          fluid: true,\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 51,\n            columnNumber: 15\n          }\n        }));\n      }));\n    };\n  }\n\n  async componentDidMount() {\n    await this.props.getTicketData(this.props.match.params.id);\n    await this.props.getUserAvatar();\n  }\n\n  render() {\n    const {\n      ticketData: ticket,\n      userAvatar\n    } = this.props;\n    return /*#__PURE__*/React.createElement(Segment, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 69,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(Grid, {\n      style: {\n        marginLeft: '10px'\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 70,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(Grid.Row, {\n      style: {\n        marginButtom: '40px'\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 71,\n        columnNumber: 11\n      }\n    }, /*#__PURE__*/React.createElement(Button, {\n      icon: true,\n      labelPosition: \"left\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 72,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(Icon, {\n      name: \"left arrow\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 73,\n        columnNumber: 15\n      }\n    }), /*#__PURE__*/React.createElement(Link, {\n      to: `/tickets`,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 74,\n        columnNumber: 15\n      }\n    }, \"Return to My Tickets\"))), /*#__PURE__*/React.createElement(Grid.Row, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 79,\n        columnNumber: 11\n      }\n    }, /*#__PURE__*/React.createElement(Label, {\n      color: \"teal\",\n      size: \"huge\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 80,\n        columnNumber: 13\n      }\n    }, \"Ticket: #\", ticket && ticket._id)), /*#__PURE__*/React.createElement(Grid.Row, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 82,\n        columnNumber: 11\n      }\n    }, /*#__PURE__*/React.createElement(Grid.Column, {\n      width: 4,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 83,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(Grid.Row, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 84,\n        columnNumber: 15\n      }\n    }, /*#__PURE__*/React.createElement(Link, {\n      to: \"\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 85,\n        columnNumber: 17\n      }\n    }, ticket && this.renderImages(ticket)))), /*#__PURE__*/React.createElement(Grid.Column, {\n      width: 8,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 88,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(Card, {\n      fluid: true,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 89,\n        columnNumber: 15\n      }\n    }, /*#__PURE__*/React.createElement(Card.Content, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 90,\n        columnNumber: 17\n      }\n    }, /*#__PURE__*/React.createElement(Card.Header, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 91,\n        columnNumber: 19\n      }\n    }, /*#__PURE__*/React.createElement(\"strong\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 91,\n        columnNumber: 32\n      }\n    }, \"Ticket Subject : \"), ticket && ticket.subject), /*#__PURE__*/React.createElement(Card.Meta, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 92,\n        columnNumber: 19\n      }\n    }, /*#__PURE__*/React.createElement(\"strong\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 93,\n        columnNumber: 21\n      }\n    }, \"Status : \"), ticket && ticket.status), /*#__PURE__*/React.createElement(Card.Meta, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 96,\n        columnNumber: 19\n      }\n    }, /*#__PURE__*/React.createElement(\"strong\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 97,\n        columnNumber: 21\n      }\n    }, \"Issue Date : \"), ticket && ticket.issueDate), /*#__PURE__*/React.createElement(Card.Meta, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 100,\n        columnNumber: 19\n      }\n    }, /*#__PURE__*/React.createElement(\"strong\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 101,\n        columnNumber: 21\n      }\n    }, \"Resolve Date : \"), ticket && ticket.resolveDate), /*#__PURE__*/React.createElement(Card.Description, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 104,\n        columnNumber: 19\n      }\n    }, /*#__PURE__*/React.createElement(\"strong\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 105,\n        columnNumber: 21\n      }\n    }, \"Category:\"), \" \", ticket && ticket.category), /*#__PURE__*/React.createElement(Card.Description, {\n      style: {\n        marginBottom: '20px'\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 108,\n        columnNumber: 19\n      }\n    }, /*#__PURE__*/React.createElement(\"strong\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 109,\n        columnNumber: 21\n      }\n    }, \"Description : \"), ticket && ticket.description), /*#__PURE__*/React.createElement(Card.Description, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 112,\n        columnNumber: 19\n      }\n    }, /*#__PURE__*/React.createElement(Comment.Group, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 113,\n        columnNumber: 21\n      }\n    }, /*#__PURE__*/React.createElement(Header, {\n      as: \"h4\",\n      dividing: true,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 114,\n        columnNumber: 23\n      }\n    }, \"Replies\"), ticket && ticket.replies ? ticket.replies.map(reply => {\n      return /*#__PURE__*/React.createElement(Comment, {\n        key: reply.text,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 121,\n          columnNumber: 29\n        }\n      }, reply.userReplier ? isEmpty(userAvatar) ? /*#__PURE__*/React.createElement(Comment.Avatar, {\n        src: \"https://react.semantic-ui.com/images/wireframe/image.png\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 124,\n          columnNumber: 35\n        }\n      }) : /*#__PURE__*/React.createElement(Comment.Avatar, {\n        src: userAvatar,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 126,\n          columnNumber: 35\n        }\n      }) : /*#__PURE__*/React.createElement(Comment.Avatar, {\n        src: \"https://react.semantic-ui.com/images/avatar/small/elliot.jpg\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 129,\n          columnNumber: 33\n        }\n      }), /*#__PURE__*/React.createElement(Comment.Content, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 132,\n          columnNumber: 31\n        }\n      }, /*#__PURE__*/React.createElement(Comment.Author, {\n        as: \"a\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 133,\n          columnNumber: 33\n        }\n      }, reply.userReplier ? 'You' : 'Customer Support'), /*#__PURE__*/React.createElement(Comment.Text, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 134,\n          columnNumber: 33\n        }\n      }, reply.text)));\n    }) : null, ticket && ticket.isResolved === true ? null : /*#__PURE__*/React.createElement(Form, {\n      onSubmit: this.handleSubmitReply,\n      reply: true,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 145,\n        columnNumber: 24\n      }\n    }, /*#__PURE__*/React.createElement(Form.TextArea, {\n      name: \"reply\",\n      onChange: this.handleReplyFieldChange,\n      value: this.state.reply,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 146,\n        columnNumber: 25\n      }\n    }), /*#__PURE__*/React.createElement(Button, {\n      content: \"Add Reply\",\n      labelPosition: \"left\",\n      icon: \"edit\",\n      primary: true,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 151,\n        columnNumber: 25\n      }\n    }))))))))));\n  }\n\n}\n\nfunction mapState(state) {\n  const {\n    ticketData\n  } = state.reportProblem;\n  const {\n    userAvatar\n  } = state.avatar;\n  return {\n    ticketData,\n    userAvatar\n  };\n}\n\nconst actionCreators = {\n  getTicketData: reportProblemActions.getTicketData,\n  submitReply: reportProblemActions.submitReply,\n  getUserAvatar: avatarActions.getActiveAvatar\n};\nconst connectedTicketPage = connect(mapState, actionCreators)(TicketPage);\nexport { connectedTicketPage as TicketPage };","map":{"version":3,"sources":["/media/norhan/New Volume/work/React-projects/test-redux/src/containers/ReportProblem/TicketPage.jsx"],"names":["React","Component","connect","Label","Card","Segment","Image","Grid","Comment","Header","Form","Button","Icon","Link","reportProblemActions","avatarActions","backendUrl","Slider","isEmpty","TicketPage","state","reply","handleReplyFieldChange","e","value","setState","handleSubmitReply","preventDefault","props","ticketData","isResolved","submitReply","_id","renderImages","ticket","settings","dots","autoplay","autoplaySpeed","infinite","speed","slidesToShow","slidesToScroll","arrows","adaptiveHeight","images","map","image","componentDidMount","getTicketData","match","params","id","getUserAvatar","render","userAvatar","marginLeft","marginButtom","subject","status","issueDate","resolveDate","category","marginBottom","description","replies","text","userReplier","mapState","reportProblem","avatar","actionCreators","getActiveAvatar","connectedTicketPage"],"mappings":"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","sourcesContent":["import React, { Component } from \"react\";\r\nimport { connect } from \"react-redux\";\r\nimport { Label, Card, Segment, Image, Grid, Comment, Header, Form, Button, Icon } from \"semantic-ui-react\";\r\nimport { Link } from \"react-router-dom\";\r\n\r\nimport { reportProblemActions, avatarActions } from \"../../actions\";\r\nimport { backendUrl } from \"../../config\";\r\nimport Slider from \"react-slick\";\r\nimport { isEmpty } from \"lodash\";\r\n\r\nclass TicketPage extends Component {\r\n  state={\r\n    reply: '',\r\n  }\r\n\r\n  async componentDidMount() {\r\n    await this.props.getTicketData(this.props.match.params.id);\r\n    await this.props.getUserAvatar();\r\n  }\r\n\r\n  handleReplyFieldChange = (e, {value}) => {\r\n    if (this.state.reply === '' && value === ' ') return;\r\n    this.setState({ reply: value });\r\n  }\r\n\r\n  handleSubmitReply = async (e) => {\r\n    e.preventDefault();\r\n    if (this.props.ticketData.isResolved === true) return;\r\n    if (this.state.reply === '') return;\r\n    await this.props.submitReply(this.state.reply, this.props.ticketData._id);\r\n    this.setState({ reply: '' });\r\n  }\r\n\r\n  renderImages = ticket => {\r\n    const settings = {\r\n      dots: false,\r\n      autoplay: true,\r\n      autoplaySpeed: 2000,\r\n      infinite: true,\r\n      speed: 1000,\r\n      slidesToShow: 1,\r\n      slidesToScroll: 1,\r\n      arrows: false,\r\n      adaptiveHeight: false\r\n    };\r\n    return (\r\n      <Slider {...settings}>\r\n        {ticket.images.map(image => {\r\n          return (\r\n            <div key={image}>\r\n              <Image\r\n                centered\r\n                src={`${backendUrl}/${image}`}\r\n                rounded\r\n                wrapped\r\n                fluid\r\n              />\r\n            </div>\r\n          );\r\n        })}\r\n      </Slider>\r\n    );\r\n  };\r\n\r\n  render() {\r\n    const { ticketData: ticket, userAvatar } = this.props;\r\n    \r\n    return (\r\n      <Segment>\r\n        <Grid style={{ marginLeft: '10px' }}>\r\n          <Grid.Row style={{ marginButtom: '40px' }}>\r\n            <Button icon labelPosition='left'>\r\n              <Icon name='left arrow' />\r\n              <Link to={`/tickets`}>\r\n                Return to My Tickets\r\n              </Link>\r\n            </Button>\r\n          </Grid.Row>\r\n          <Grid.Row>\r\n            <Label color=\"teal\" size=\"huge\">Ticket: #{ticket && ticket._id}</Label>\r\n          </Grid.Row>\r\n          <Grid.Row>\r\n            <Grid.Column width={4}>\r\n              <Grid.Row>\r\n                <Link to={\"\"}>{ticket && this.renderImages(ticket)}</Link>\r\n              </Grid.Row>\r\n            </Grid.Column>\r\n            <Grid.Column width={8}>\r\n              <Card fluid>\r\n                <Card.Content>\r\n                  <Card.Header><strong>Ticket Subject : </strong>{ticket && ticket.subject}</Card.Header>\r\n                  <Card.Meta>\r\n                    <strong>Status : </strong>\r\n                    {ticket && ticket.status}\r\n                  </Card.Meta>\r\n                  <Card.Meta>\r\n                    <strong>Issue Date : </strong>\r\n                    {ticket && ticket.issueDate}\r\n                  </Card.Meta>\r\n                  <Card.Meta>\r\n                    <strong>Resolve Date : </strong>\r\n                    {ticket && ticket.resolveDate}\r\n                  </Card.Meta>\r\n                  <Card.Description>\r\n                    <strong>Category:</strong>{\" \"}\r\n                    {ticket && ticket.category}\r\n                  </Card.Description>\r\n                  <Card.Description style={{ marginBottom: '20px' }}>\r\n                    <strong>Description : </strong>\r\n                    {ticket && ticket.description}\r\n                  </Card.Description>\r\n                  <Card.Description>\r\n                    <Comment.Group>\r\n                      <Header as='h4' dividing>\r\n                        Replies\r\n                      </Header>\r\n\r\n                      {ticket && ticket.replies ? (\r\n                        ticket.replies.map(reply => {\r\n                          return (\r\n                            <Comment key={reply.text}>\r\n                              {reply.userReplier ? (\r\n                                isEmpty(userAvatar) ? (\r\n                                  <Comment.Avatar src='https://react.semantic-ui.com/images/wireframe/image.png' />\r\n                                ) : (\r\n                                  <Comment.Avatar src={userAvatar} />\r\n                                )\r\n                              ) : (\r\n                                <Comment.Avatar src='https://react.semantic-ui.com/images/avatar/small/elliot.jpg' />\r\n                              )\r\n                              }\r\n                              <Comment.Content>\r\n                                <Comment.Author as='a'>{reply.userReplier ? 'You' : 'Customer Support'}</Comment.Author>\r\n                                <Comment.Text>{reply.text}</Comment.Text>\r\n                              </Comment.Content>\r\n                            </Comment>\r\n                          )\r\n                        })\r\n                      ) : (\r\n                        null\r\n                      )}\r\n\r\n                      {ticket && ticket.isResolved === true ?\r\n                      ( null ) : \r\n                      (<Form onSubmit={this.handleSubmitReply} reply>\r\n                        <Form.TextArea \r\n                          name='reply'\r\n                          onChange={this.handleReplyFieldChange}\r\n                          value={this.state.reply}\r\n                        />\r\n                        <Button content='Add Reply' labelPosition='left' icon='edit' primary />\r\n                      </Form>)}\r\n                    </Comment.Group>\r\n                  </Card.Description>\r\n                </Card.Content>\r\n              </Card>\r\n            </Grid.Column>\r\n          </Grid.Row>\r\n        </Grid>\r\n      </Segment>\r\n    );\r\n  }\r\n}\r\n\r\nfunction mapState(state) {\r\n  const { ticketData } = state.reportProblem;\r\n  const { userAvatar } = state.avatar;\r\n  return { ticketData, userAvatar };\r\n}\r\n\r\nconst actionCreators = {\r\n    getTicketData: reportProblemActions.getTicketData,\r\n    submitReply: reportProblemActions.submitReply,\r\n    getUserAvatar: avatarActions.getActiveAvatar,\r\n};\r\n\r\nconst connectedTicketPage = connect(mapState, actionCreators)(TicketPage);\r\nexport { connectedTicketPage as TicketPage };\r\n"]},"metadata":{},"sourceType":"module"}