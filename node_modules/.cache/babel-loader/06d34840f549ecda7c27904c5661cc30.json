{"ast":null,"code":"import axios from \"axios\";\nimport { logService } from \"./\";\nimport { authService } from './auth.service';\nexport const httpService = {\n  get: axios.get,\n  post: axios.post,\n  put: axios.put,\n  delete: axios.delete,\n  setJwt\n};\nconst jwt = authService.getJwt();\nif (jwt) httpService.setJwt(jwt);\naxios.interceptors.response.use(null, async function (error) {\n  const expectedError = error.response && error.response.status >= 400 && error.response.status < 500;\n  logService.log(error);\n\n  if (expectedError) {\n    error = error.response.data; // to return error obj with {message, error if exist}\n  } else {\n    error = {\n      message: 'Technical Problem! Please try again later or contact us!'\n    };\n  }\n\n  return Promise.reject(error);\n});\n\nfunction setJwt(jwt) {\n  axios.defaults.headers.common = {\n    'Authorization': `bearer ${jwt}`,\n    'lon': '30.0054807',\n    'lat': '31.4655542'\n  };\n}","map":{"version":3,"sources":["/media/norhan/New Volume/work/React-projects/test-redux/src/services/http.service.js"],"names":["axios","logService","authService","httpService","get","post","put","delete","setJwt","jwt","getJwt","interceptors","response","use","error","expectedError","status","log","data","message","Promise","reject","defaults","headers","common"],"mappings":"AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,UAAT,QAA2B,IAA3B;AACA,SAASC,WAAT,QAA4B,gBAA5B;AAEA,OAAO,MAAMC,WAAW,GAAG;AACzBC,EAAAA,GAAG,EAAEJ,KAAK,CAACI,GADc;AAEzBC,EAAAA,IAAI,EAAEL,KAAK,CAACK,IAFa;AAGzBC,EAAAA,GAAG,EAAEN,KAAK,CAACM,GAHc;AAIzBC,EAAAA,MAAM,EAAEP,KAAK,CAACO,MAJW;AAKzBC,EAAAA;AALyB,CAApB;AAQP,MAAMC,GAAG,GAAGP,WAAW,CAACQ,MAAZ,EAAZ;AACA,IAAID,GAAJ,EAASN,WAAW,CAACK,MAAZ,CAAmBC,GAAnB;AAETT,KAAK,CAACW,YAAN,CAAmBC,QAAnB,CAA4BC,GAA5B,CAAgC,IAAhC,EAAsC,gBAAeC,KAAf,EAAsB;AAC1D,QAAMC,aAAa,GAAGD,KAAK,CAACF,QAAN,IAAkBE,KAAK,CAACF,QAAN,CAAeI,MAAf,IAAyB,GAA3C,IAAkDF,KAAK,CAACF,QAAN,CAAeI,MAAf,GAAwB,GAAhG;AACAf,EAAAA,UAAU,CAACgB,GAAX,CAAeH,KAAf;;AACA,MAAIC,aAAJ,EAAmB;AACjBD,IAAAA,KAAK,GAAGA,KAAK,CAACF,QAAN,CAAeM,IAAvB,CADiB,CACY;AAC9B,GAFD,MAGK;AACHJ,IAAAA,KAAK,GAAG;AAAEK,MAAAA,OAAO,EAAE;AAAX,KAAR;AACD;;AAED,SAAOC,OAAO,CAACC,MAAR,CAAeP,KAAf,CAAP;AACD,CAXD;;AAaA,SAASN,MAAT,CAAgBC,GAAhB,EAAqB;AACnBT,EAAAA,KAAK,CAACsB,QAAN,CAAeC,OAAf,CAAuBC,MAAvB,GAAgC;AAAE,qBAAkB,UAASf,GAAI,EAAjC;AAAoC,WAAO,YAA3C;AAAyD,WAAO;AAAhE,GAAhC;AACD","sourcesContent":["import axios from \"axios\";\r\nimport { logService } from \"./\";\r\nimport { authService } from './auth.service';\r\n\r\nexport const httpService = {\r\n  get: axios.get,\r\n  post: axios.post,\r\n  put: axios.put,\r\n  delete: axios.delete,\r\n  setJwt\r\n};\r\n\r\nconst jwt = authService.getJwt();\r\nif (jwt) httpService.setJwt(jwt);\r\n\r\naxios.interceptors.response.use(null, async function(error) {\r\n  const expectedError = error.response && error.response.status >= 400 && error.response.status < 500;\r\n  logService.log(error);\r\n  if (expectedError) {\r\n    error = error.response.data; // to return error obj with {message, error if exist}\r\n  } \r\n  else {\r\n    error = { message: 'Technical Problem! Please try again later or contact us!' };\r\n  }\r\n\r\n  return Promise.reject(error);\r\n});\r\n\r\nfunction setJwt(jwt) {\r\n  axios.defaults.headers.common = { 'Authorization': `bearer ${jwt}`, 'lon': '30.0054807', 'lat': '31.4655542' }\r\n}\r\n"]},"metadata":{},"sourceType":"module"}