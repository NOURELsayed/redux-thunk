{"ast":null,"code":"var _jsxFileName = \"/media/norhan/New Volume/work/React-projects/test-redux/src/containers/ProfilePage/Buying.jsx\";\nimport React, { Component } from \"react\";\nimport { connect } from \"react-redux\";\nimport { Grid, Tab } from \"semantic-ui-react\";\nimport moment from \"moment\";\nimport { orderActions } from \"../../actions\";\nimport \"./OrdersBuyingAndSelling.css\";\nimport BuyingAndSellingCard from \"./BuyingAndSellingCard\";\n\nclass BuyingOrders extends Component {\n  constructor(...args) {\n    super(...args);\n    this.panes = [{\n      menuItem: \"Orders\",\n      render: () => /*#__PURE__*/React.createElement(Tab.Pane, {\n        attached: false,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 14,\n          columnNumber: 9\n        }\n      }, this.renderBuyingOrders(this.props.buyingOrders))\n    }, {\n      menuItem: \"Returns\",\n      render: () => /*#__PURE__*/React.createElement(Tab.Pane, {\n        attached: false,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 21,\n          columnNumber: 21\n        }\n      }, \"Tab 2 Content\")\n    }];\n\n    this.renderBuyingOrders = buyingOrders => {\n      return buyingOrders == null || buyingOrders.length === 0 ? /*#__PURE__*/React.createElement(\"h4\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 30,\n          columnNumber: 7\n        }\n      }, \"No posts yet.\") : /*#__PURE__*/React.createElement(\"div\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 32,\n          columnNumber: 7\n        }\n      }, buyingOrders.map(buyingOrder => {\n        const dateFormat = buyingOrder.createdAt;\n        const postDate = moment(dateFormat).format(\"MMMM Do, YYYY\");\n        return /*#__PURE__*/React.createElement(BuyingAndSellingCard, {\n          orderId: buyingOrder._id,\n          createdAt: postDate,\n          status: buyingOrder.status,\n          ImgSource: buyingOrder.items[0].post.images,\n          condition: buyingOrder.items[0].post.condition,\n          title: buyingOrder.items[0].post.title,\n          buttonText: \"View order details\",\n          appointmentbuttonText: \"Make an appointment\",\n          RespondToCaseButton: \"Respond to case\",\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 37,\n            columnNumber: 13\n          }\n        });\n      }));\n    };\n  }\n\n  componentDidMount() {\n    this.props.handelviewBuyingOrders();\n  }\n\n  render() {\n    return /*#__PURE__*/React.createElement(Grid, {\n      textAlign: \"center\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 55,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(Grid.Row, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 56,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(Grid.Column, {\n      width: 10,\n      textAlign: \"left\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 57,\n        columnNumber: 11\n      }\n    }, /*#__PURE__*/React.createElement(Tab, {\n      menu: {\n        secondary: true,\n        pointing: true\n      },\n      panes: this.panes,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 58,\n        columnNumber: 13\n      }\n    }))));\n  }\n\n}\n\nfunction mapState(state) {\n  const {\n    buyingOrders\n  } = state.order;\n  return {\n    buyingOrders\n  };\n}\n\nconst actionCreators = {\n  handelviewBuyingOrders: orderActions.viewBuyingOrders\n};\nconst connectedBuyingOrders = connect(mapState, actionCreators)(BuyingOrders);\nexport { connectedBuyingOrders as BuyingOrders };","map":{"version":3,"sources":["/media/norhan/New Volume/work/React-projects/test-redux/src/containers/ProfilePage/Buying.jsx"],"names":["React","Component","connect","Grid","Tab","moment","orderActions","BuyingAndSellingCard","BuyingOrders","panes","menuItem","render","renderBuyingOrders","props","buyingOrders","length","map","buyingOrder","dateFormat","createdAt","postDate","format","_id","status","items","post","images","condition","title","componentDidMount","handelviewBuyingOrders","secondary","pointing","mapState","state","order","actionCreators","viewBuyingOrders","connectedBuyingOrders"],"mappings":"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","sourcesContent":["import React, { Component } from \"react\";\r\nimport { connect } from \"react-redux\";\r\nimport { Grid, Tab } from \"semantic-ui-react\";\r\nimport moment from \"moment\";\r\nimport { orderActions } from \"../../actions\";\r\nimport \"./OrdersBuyingAndSelling.css\";\r\nimport BuyingAndSellingCard from \"./BuyingAndSellingCard\";\r\n\r\nclass BuyingOrders extends Component {\r\n  panes = [\r\n    {\r\n      menuItem: \"Orders\",\r\n      render: () => (\r\n        <Tab.Pane attached={false}>\r\n          {this.renderBuyingOrders(this.props.buyingOrders)}\r\n        </Tab.Pane>\r\n      ),\r\n    },\r\n    {\r\n      menuItem: \"Returns\",\r\n      render: () => <Tab.Pane attached={false}>Tab 2 Content</Tab.Pane>,\r\n    },\r\n  ];\r\n\r\n  componentDidMount() {\r\n    this.props.handelviewBuyingOrders();\r\n  }\r\n  renderBuyingOrders = (buyingOrders) => {\r\n    return buyingOrders == null || buyingOrders.length === 0 ? (\r\n      <h4>No posts yet.</h4>\r\n    ) : (\r\n      <div>\r\n        {buyingOrders.map((buyingOrder) => {\r\n          const dateFormat = buyingOrder.createdAt;\r\n          const postDate = moment(dateFormat).format(\"MMMM Do, YYYY\");\r\n          return (\r\n            <BuyingAndSellingCard\r\n              orderId={buyingOrder._id}\r\n              createdAt={postDate}\r\n              status={buyingOrder.status}\r\n              ImgSource={buyingOrder.items[0].post.images}\r\n              condition={buyingOrder.items[0].post.condition}\r\n              title={buyingOrder.items[0].post.title}\r\n              buttonText=\"View order details\"\r\n              appointmentbuttonText=\"Make an appointment\"\r\n              RespondToCaseButton=\"Respond to case\"\r\n            />\r\n          );\r\n        })}\r\n      </div>\r\n    );\r\n  };\r\n  render() {\r\n    return (\r\n      <Grid textAlign=\"center\">\r\n        <Grid.Row>\r\n          <Grid.Column width={10} textAlign=\"left\">\r\n            <Tab\r\n              menu={{ secondary: true, pointing: true }}\r\n              panes={this.panes}\r\n            />\r\n          </Grid.Column>\r\n        </Grid.Row>\r\n      </Grid>\r\n    );\r\n  }\r\n}\r\n\r\nfunction mapState(state) {\r\n  const { buyingOrders } = state.order;\r\n  return {\r\n    buyingOrders,\r\n  };\r\n}\r\n\r\nconst actionCreators = {\r\n  handelviewBuyingOrders: orderActions.viewBuyingOrders,\r\n};\r\n\r\nconst connectedBuyingOrders = connect(mapState, actionCreators)(BuyingOrders);\r\n\r\nexport { connectedBuyingOrders as BuyingOrders };\r\n"]},"metadata":{},"sourceType":"module"}