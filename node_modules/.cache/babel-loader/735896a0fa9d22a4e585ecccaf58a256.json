{"ast":null,"code":"var _jsxFileName = \"/media/norhan/New Volume/work/React-projects/test-redux/src/containers/FAQ/AccordionFAQ.jsx\";\nimport React, { Component } from \"react\";\nimport { connect } from \"react-redux\";\nimport { Accordion, Icon, Grid, Segment } from \"semantic-ui-react\";\nimport { Editor, EditorState, convertFromRaw } from \"draft-js\";\nimport { faqActions } from \"../../actions\";\nimport { validatorActions } from \"../../actions\";\nimport \"../../components/RichTextEditor/RichText.css\";\n\nclass AccordionFAQ extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      activeIndex: -1,\n      faq: {\n        question: \" \",\n        answer: \" \"\n      },\n      hidePopup: false,\n      showEditModal: false\n    };\n    this.schema = {\n      required: [\"question\", \"answer\"],\n      properties: {\n        question: {\n          title: \"question\",\n          type: \"string\",\n          minLength: 1,\n          maxLength: 500\n        },\n        answer: {\n          title: \"answer\",\n          type: \"string\",\n          minLength: 1,\n          maxLength: 500\n        }\n      }\n    };\n\n    this.handleChange = (e, {\n      name,\n      value\n    }) => {\n      this.props.validateInput(this.schema, name, value);\n      const faq = { ...this.state.faq\n      };\n      faq[name] = value;\n\n      if (faq.answer === \" \") {\n        faq[\"answer\"] = this.props.answer;\n      }\n\n      if (faq.question === \" \") {\n        faq[\"question\"] = this.props.question;\n      }\n\n      this.setState({\n        faq\n      });\n    };\n\n    this.handleQuestionChange = (e, {\n      name,\n      value\n    }) => {\n      this.props.validateInput(this.schema, name, value);\n      let question = { ...this.state.faq.question\n      };\n      question = value;\n      this.setState({\n        faq: {\n          question: question,\n          answer: this.props.answer\n        }\n      });\n    };\n\n    this.handleAnswerChange = (e, {\n      name,\n      value\n    }) => {\n      this.props.validateInput(this.schema, name, value);\n      const faq = { ...this.state.faq\n      };\n      faq[name] = value;\n      this.setState({\n        faq\n      });\n    };\n\n    this.handleSubmit = async e => {\n      e.preventDefault();\n      const {\n        faq\n      } = this.state;\n      await this.props.validateForm(this.schema, faq);\n\n      if (!this.props.validation.valid) {\n        return;\n      }\n\n      if (faq.question.length >= 1 && faq.answer.length >= 1) {\n        await this.props.editFAQ(this.props.id, faq);\n        this.setState({\n          hidePopup: true\n        });\n        this.setState({\n          hidePopup: false\n        });\n      }\n    };\n\n    this.handleClick = (e, titleProps) => {\n      const {\n        index\n      } = titleProps;\n      const {\n        activeIndex\n      } = this.state;\n      const newIndex = activeIndex === index ? -1 : index;\n      this.setState({\n        activeIndex: newIndex\n      });\n    };\n\n    this.setOpen = e => {\n      const {\n        showEditModal\n      } = this.state;\n      this.setState({\n        showEditModal: !showEditModal\n      });\n    };\n  }\n\n  render() {\n    const {\n      activeIndex\n    } = this.state;\n    const styledAnswer = convertFromRaw(JSON.parse(this.props.answer));\n    var editorState = EditorState.createWithContent(styledAnswer);\n    return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(Accordion.Title, {\n      active: activeIndex === 0,\n      index: 0,\n      onClick: this.handleClick,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 101,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(Icon, {\n      name: \"dropdown\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 106,\n        columnNumber: 11\n      }\n    }), this.props.question), /*#__PURE__*/React.createElement(Grid, {\n      divided: \"vertically\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 110,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(Grid.Row, {\n      columns: 1,\n      textAlign: \"right\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 111,\n        columnNumber: 11\n      }\n    })), /*#__PURE__*/React.createElement(Accordion.Content, {\n      active: activeIndex === 0,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 115,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(Segment, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 116,\n        columnNumber: 11\n      }\n    }, /*#__PURE__*/React.createElement(Editor, {\n      editorState: editorState,\n      ref: \"editor\",\n      readOnly: true,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 117,\n        columnNumber: 13\n      }\n    }))));\n  }\n\n}\n\nconst mapState = state => ({ ...state\n});\n\nconst actionCreators = {\n  deleteFAQ: faqActions.deleteFAQ,\n  validateInput: validatorActions.validateInput,\n  validateForm: validatorActions.validateForm,\n  editFAQ: faqActions.editFAQ\n};\nconst connectedAccordionFAQ = connect(mapState, actionCreators)(AccordionFAQ);\nexport { connectedAccordionFAQ as AccordionFAQ };","map":{"version":3,"sources":["/media/norhan/New Volume/work/React-projects/test-redux/src/containers/FAQ/AccordionFAQ.jsx"],"names":["React","Component","connect","Accordion","Icon","Grid","Segment","Editor","EditorState","convertFromRaw","faqActions","validatorActions","AccordionFAQ","state","activeIndex","faq","question","answer","hidePopup","showEditModal","schema","required","properties","title","type","minLength","maxLength","handleChange","e","name","value","props","validateInput","setState","handleQuestionChange","handleAnswerChange","handleSubmit","preventDefault","validateForm","validation","valid","length","editFAQ","id","handleClick","titleProps","index","newIndex","setOpen","render","styledAnswer","JSON","parse","editorState","createWithContent","mapState","actionCreators","deleteFAQ","connectedAccordionFAQ"],"mappings":"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","sourcesContent":["import React, { Component } from \"react\";\r\nimport { connect } from \"react-redux\";\r\nimport {\r\n  Accordion,\r\n  Icon,\r\n  Grid,\r\n  Segment,\r\n} from \"semantic-ui-react\";\r\nimport { Editor, EditorState, convertFromRaw } from \"draft-js\";\r\nimport { faqActions } from \"../../actions\";\r\nimport { validatorActions } from \"../../actions\";\r\nimport \"../../components/RichTextEditor/RichText.css\";\r\n\r\nclass AccordionFAQ extends Component {\r\n  state = {\r\n    activeIndex: -1,\r\n    faq: { question: \" \", answer: \" \" },\r\n    hidePopup: false,\r\n    showEditModal: false,\r\n  };\r\n\r\n  schema = {\r\n    required: [\"question\", \"answer\"],\r\n    properties: {\r\n      question: {\r\n        title: \"question\",\r\n        type: \"string\",\r\n        minLength: 1,\r\n        maxLength: 500,\r\n      },\r\n      answer: { title: \"answer\", type: \"string\", minLength: 1, maxLength: 500 },\r\n    },\r\n  };\r\n\r\n  handleChange = (e, { name, value }) => {\r\n    this.props.validateInput(this.schema, name, value);\r\n    const faq = { ...this.state.faq };\r\n    faq[name] = value;\r\n\r\n    if (faq.answer === \" \") {\r\n      faq[\"answer\"] = this.props.answer;\r\n    }\r\n\r\n    if (faq.question === \" \") {\r\n      faq[\"question\"] = this.props.question;\r\n    }\r\n\r\n    this.setState({ faq });\r\n  };\r\n\r\n  handleQuestionChange = (e, { name, value }) => {\r\n    this.props.validateInput(this.schema, name, value);\r\n    let question = { ...this.state.faq.question };\r\n    question = value;\r\n    this.setState({ faq: { question: question, answer: this.props.answer } });\r\n  };\r\n  handleAnswerChange = (e, { name, value }) => {\r\n    this.props.validateInput(this.schema, name, value);\r\n    const faq = { ...this.state.faq };\r\n    faq[name] = value;\r\n    this.setState({ faq });\r\n  };\r\n\r\n  handleSubmit = async (e) => {\r\n    e.preventDefault();\r\n\r\n    const { faq } = this.state;\r\n    await this.props.validateForm(this.schema, faq);\r\n\r\n    if (!this.props.validation.valid) {\r\n      return;\r\n    }\r\n\r\n    if (faq.question.length >= 1 && faq.answer.length >= 1) {\r\n      await this.props.editFAQ(this.props.id, faq);\r\n      this.setState({ hidePopup: true });\r\n      this.setState({ hidePopup: false });\r\n    }\r\n  };\r\n\r\n  handleClick = (e, titleProps) => {\r\n    const { index } = titleProps;\r\n    const { activeIndex } = this.state;\r\n    const newIndex = activeIndex === index ? -1 : index;\r\n\r\n    this.setState({ activeIndex: newIndex });\r\n  };\r\n\r\n  setOpen = (e) => {\r\n    const{showEditModal}=this.state\r\n     this.setState({showEditModal:!showEditModal})\r\n  };\r\n\r\n  render() {\r\n    const { activeIndex } = this.state;\r\n    const styledAnswer = convertFromRaw(JSON.parse(this.props.answer));\r\n    var editorState = EditorState.createWithContent(styledAnswer);\r\n    \r\n    return (\r\n      <>\r\n        <Accordion.Title\r\n          active={activeIndex === 0}\r\n          index={0}\r\n          onClick={this.handleClick}\r\n        >\r\n          <Icon name='dropdown' />\r\n\r\n          {this.props.question}\r\n        </Accordion.Title>\r\n        <Grid divided='vertically'>\r\n          <Grid.Row columns={1} textAlign='right'>\r\n \r\n          </Grid.Row>\r\n        </Grid>\r\n        <Accordion.Content active={activeIndex === 0}>\r\n          <Segment>\r\n            <Editor editorState={editorState} ref='editor' readOnly />\r\n          </Segment>\r\n        </Accordion.Content>\r\n      </>\r\n    );\r\n  }\r\n}\r\n\r\nconst mapState = (state) => ({\r\n  ...state,\r\n});\r\n\r\nconst actionCreators = {\r\n  deleteFAQ: faqActions.deleteFAQ,\r\n  validateInput: validatorActions.validateInput,\r\n  validateForm: validatorActions.validateForm,\r\n  editFAQ: faqActions.editFAQ,\r\n};\r\n\r\nconst connectedAccordionFAQ = connect(mapState, actionCreators)(AccordionFAQ);\r\n\r\nexport { connectedAccordionFAQ as AccordionFAQ };\r\n"]},"metadata":{},"sourceType":"module"}