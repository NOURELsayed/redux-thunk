{"ast":null,"code":"import { shoppingCartConstants } from '../constants';\nimport { shoppingCartService } from './../services';\nimport { alertActions } from './';\nimport { history } from '../helpers';\nexport const shoppingCartActions = {\n  viewCart,\n  itemQuantityChanged,\n  removeItem,\n  addItemToCart,\n  removeAllItems,\n  proceedToCheckout,\n  resetItem\n};\n\nfunction addItemToCart(postId, buyingMethod) {\n  return async dispatch => {\n    await dispatch(request());\n\n    try {\n      const {\n        data\n      } = await shoppingCartService.updateQuantity(postId, 1, buyingMethod);\n      dispatch(success({\n        posts: data.shoppingCart\n      }));\n    } catch (ex) {\n      dispatch(failure(ex));\n      dispatch(alertActions.error({\n        header: \"can't view cart details\",\n        content: ex.message\n      }));\n    }\n  };\n\n  function request() {\n    return {\n      type: shoppingCartConstants.ADD_TO_CART_REQUEST\n    };\n  }\n\n  function success(shoppingCartData) {\n    return {\n      type: shoppingCartConstants.UPDATE_QUANTITY_CART_SUCCESS,\n      shoppingCartData\n    };\n  }\n\n  function failure(error) {\n    return {\n      type: shoppingCartConstants.VIEW_CART_FAILURE,\n      error\n    };\n  }\n}\n\nfunction viewCart() {\n  return async dispatch => {\n    await dispatch(request());\n\n    try {\n      const {\n        data\n      } = await shoppingCartService.viewShoppingCart();\n      dispatch(success(data));\n    } catch (ex) {\n      dispatch(failure(ex));\n      dispatch(alertActions.error({\n        header: \"can't view cart details\",\n        content: ex.message\n      }));\n    }\n  };\n\n  function request() {\n    return {\n      type: shoppingCartConstants.VIEW_CART_REQUEST\n    };\n  }\n\n  function success(shoppingCartData) {\n    return {\n      type: shoppingCartConstants.VIEW_CART_SUCCESS,\n      shoppingCartData\n    };\n  }\n\n  function failure(error) {\n    return {\n      type: shoppingCartConstants.VIEW_CART_FAILURE,\n      error\n    };\n  }\n}\n\nfunction itemQuantityChanged(postId, quantity, buyingMethod) {\n  return async dispatch => {\n    await dispatch(request());\n\n    try {\n      const {\n        data\n      } = await shoppingCartService.updateQuantity(postId, quantity, buyingMethod);\n      dispatch(success({\n        posts: data.shoppingCart\n      }));\n    } catch (ex) {\n      dispatch(failure(ex));\n      dispatch(alertActions.error({\n        header: \"can't view cart details\",\n        content: ex.message\n      }));\n    }\n  };\n\n  function request() {\n    return {\n      type: shoppingCartConstants.UPDATE_QUANTITY_CART_REQUEST\n    };\n  }\n\n  function success(shoppingCartData) {\n    return {\n      type: shoppingCartConstants.UPDATE_QUANTITY_CART_SUCCESS,\n      shoppingCartData\n    };\n  }\n\n  function failure(error) {\n    return {\n      type: shoppingCartConstants.UPDATE_QUANTITY_CART_FAILURE,\n      error\n    };\n  }\n}\n\nfunction removeItem(postId) {\n  return async dispatch => {\n    await dispatch(request());\n\n    try {\n      const {\n        data\n      } = await shoppingCartService.removeItem(postId);\n      dispatch(success(data.postId));\n    } catch (ex) {\n      dispatch(failure(ex));\n      dispatch(alertActions.error({\n        header: \"can't view cart details\",\n        content: ex.message\n      }));\n    }\n  };\n\n  function request() {\n    return {\n      type: shoppingCartConstants.REMOVE_ITEM_CART_REQUEST\n    };\n  }\n\n  function success(postId) {\n    return {\n      type: shoppingCartConstants.REMOVE_ITEM_CART_SUCCESS,\n      postId\n    };\n  }\n\n  function failure(error) {\n    return {\n      type: shoppingCartConstants.REMOVE_ITEM_CART_FAILURE,\n      error\n    };\n  }\n}\n\nfunction removeAllItems() {\n  return async dispatch => {\n    await dispatch(request());\n\n    try {\n      await shoppingCartService.clearCart();\n      dispatch(success());\n    } catch (ex) {\n      dispatch(failure(ex));\n      dispatch(alertActions.error({\n        header: \"can't view cart details\",\n        content: ex.message\n      }));\n    }\n  };\n\n  function request() {\n    return {\n      type: shoppingCartConstants.REMOVE_ITEM_CART_REQUEST\n    };\n  }\n\n  function success() {\n    return {\n      type: shoppingCartConstants.REMOVE_ALL_ITEMS_CART_SUCCESS\n    };\n  }\n\n  function failure(error) {\n    return {\n      type: shoppingCartConstants.REMOVE_ALL_ITEMS_CART_FAILURE,\n      error\n    };\n  }\n}\n\nfunction proceedToCheckout(postId) {\n  return async dispatch => {\n    await dispatch(request());\n\n    try {\n      //const { data } = await ;\n      dispatch(success());\n      history.push('/checkout');\n    } catch (ex) {\n      dispatch(failure(ex));\n      dispatch(alertActions.error({\n        header: \"can't Proceed to checkout\",\n        content: ex.message\n      }));\n    }\n  };\n\n  function request() {\n    return {\n      type: shoppingCartConstants.PROCEED_TO_CHECKOUT_REQUEST\n    };\n  }\n\n  function success() {\n    return {\n      type: shoppingCartConstants.PROCEED_TO_CHECKOUT_SUCCESS\n    };\n  }\n\n  function failure(error) {\n    return {\n      type: shoppingCartConstants.PROCEED_TO_CHECKOUT_FAILURE,\n      error\n    };\n  }\n}\n\nfunction resetItem(postId) {\n  return async dispatch => {\n    await dispatch(request());\n\n    try {\n      const {\n        data\n      } = await shoppingCartService.resetItem(postId);\n      dispatch(success({\n        posts: data.shoppingCart\n      }));\n    } catch (ex) {\n      dispatch(failure(ex));\n      dispatch(alertActions.error({\n        header: \"can't view cart details\",\n        content: ex.message\n      }));\n    }\n  };\n\n  function request() {\n    return {\n      type: shoppingCartConstants.UPDATE_QUANTITY_CART_REQUEST\n    };\n  }\n\n  function success(shoppingCartData) {\n    return {\n      type: shoppingCartConstants.UPDATE_QUANTITY_CART_SUCCESS,\n      shoppingCartData\n    };\n  }\n\n  function failure(error) {\n    return {\n      type: shoppingCartConstants.UPDATE_QUANTITY_CART_FAILURE,\n      error\n    };\n  }\n}","map":{"version":3,"sources":["/media/norhan/New Volume/work/React-projects/test-redux/src/actions/shoppingCart.actions.js"],"names":["shoppingCartConstants","shoppingCartService","alertActions","history","shoppingCartActions","viewCart","itemQuantityChanged","removeItem","addItemToCart","removeAllItems","proceedToCheckout","resetItem","postId","buyingMethod","dispatch","request","data","updateQuantity","success","posts","shoppingCart","ex","failure","error","header","content","message","type","ADD_TO_CART_REQUEST","shoppingCartData","UPDATE_QUANTITY_CART_SUCCESS","VIEW_CART_FAILURE","viewShoppingCart","VIEW_CART_REQUEST","VIEW_CART_SUCCESS","quantity","UPDATE_QUANTITY_CART_REQUEST","UPDATE_QUANTITY_CART_FAILURE","REMOVE_ITEM_CART_REQUEST","REMOVE_ITEM_CART_SUCCESS","REMOVE_ITEM_CART_FAILURE","clearCart","REMOVE_ALL_ITEMS_CART_SUCCESS","REMOVE_ALL_ITEMS_CART_FAILURE","push","PROCEED_TO_CHECKOUT_REQUEST","PROCEED_TO_CHECKOUT_SUCCESS","PROCEED_TO_CHECKOUT_FAILURE"],"mappings":"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","sourcesContent":["import { shoppingCartConstants } from '../constants';\r\nimport { shoppingCartService } from './../services';\r\nimport { alertActions } from './';\r\nimport { history } from '../helpers';\r\n\r\nexport const shoppingCartActions = {\r\n    viewCart,\r\n    itemQuantityChanged,\r\n    removeItem,\r\n    addItemToCart,\r\n    removeAllItems,\r\n    proceedToCheckout,\r\n    resetItem,\r\n};\r\n\r\nfunction addItemToCart(postId, buyingMethod) {\r\n    return async (dispatch) => {\r\n        await dispatch(request());\r\n        try {\r\n            const { data } = await shoppingCartService.updateQuantity(\r\n                postId,\r\n                1,\r\n                buyingMethod,\r\n            );\r\n            dispatch(success({ posts: data.shoppingCart }));\r\n        } catch (ex) {\r\n            dispatch(failure(ex));\r\n            dispatch(\r\n                alertActions.error({\r\n                    header: \"can't view cart details\",\r\n                    content: ex.message,\r\n                }),\r\n            );\r\n        }\r\n    };\r\n    function request() {\r\n        return {\r\n            type: shoppingCartConstants.ADD_TO_CART_REQUEST,\r\n        };\r\n    }\r\n\r\n    function success(shoppingCartData) {\r\n        return {\r\n            type: shoppingCartConstants.UPDATE_QUANTITY_CART_SUCCESS,\r\n            shoppingCartData,\r\n        };\r\n    }\r\n\r\n    function failure(error) {\r\n        return {\r\n            type: shoppingCartConstants.VIEW_CART_FAILURE,\r\n            error,\r\n        };\r\n    }\r\n}\r\n\r\nfunction viewCart() {\r\n    return async (dispatch) => {\r\n        await dispatch(request());\r\n        try {\r\n            const { data } = await shoppingCartService.viewShoppingCart();\r\n            dispatch(success(data));\r\n        } catch (ex) {\r\n            dispatch(failure(ex));\r\n            dispatch(\r\n                alertActions.error({\r\n                    header: \"can't view cart details\",\r\n                    content: ex.message,\r\n                }),\r\n            );\r\n        }\r\n    };\r\n\r\n    function request() {\r\n        return {\r\n            type: shoppingCartConstants.VIEW_CART_REQUEST,\r\n        };\r\n    }\r\n\r\n    function success(shoppingCartData) {\r\n        return {\r\n            type: shoppingCartConstants.VIEW_CART_SUCCESS,\r\n            shoppingCartData,\r\n        };\r\n    }\r\n\r\n    function failure(error) {\r\n        return {\r\n            type: shoppingCartConstants.VIEW_CART_FAILURE,\r\n            error,\r\n        };\r\n    }\r\n}\r\n\r\nfunction itemQuantityChanged(postId, quantity, buyingMethod) {\r\n    return async (dispatch) => {\r\n        await dispatch(request());\r\n        try {\r\n            const { data } = await shoppingCartService.updateQuantity(\r\n                postId,\r\n                quantity,\r\n                buyingMethod\r\n            );\r\n            dispatch(success({ posts: data.shoppingCart }));\r\n        } catch (ex) {\r\n            dispatch(failure(ex));\r\n            dispatch(\r\n                alertActions.error({\r\n                    header: \"can't view cart details\",\r\n                    content: ex.message,\r\n                }),\r\n            );\r\n        }\r\n    };\r\n    function request() {\r\n        return {\r\n            type: shoppingCartConstants.UPDATE_QUANTITY_CART_REQUEST,\r\n        };\r\n    }\r\n\r\n    function success(shoppingCartData) {\r\n        return {\r\n            type: shoppingCartConstants.UPDATE_QUANTITY_CART_SUCCESS,\r\n            shoppingCartData,\r\n        };\r\n    }\r\n\r\n    function failure(error) {\r\n        return {\r\n            type: shoppingCartConstants.UPDATE_QUANTITY_CART_FAILURE,\r\n            error,\r\n        };\r\n    }\r\n}\r\n\r\nfunction removeItem(postId) {\r\n    return async (dispatch) => {\r\n        await dispatch(request());\r\n        try {\r\n            const { data } = await shoppingCartService.removeItem(postId);\r\n            dispatch(success(data.postId));\r\n        } catch (ex) {\r\n            dispatch(failure(ex));\r\n            dispatch(\r\n                alertActions.error({\r\n                    header: \"can't view cart details\",\r\n                    content: ex.message,\r\n                }),\r\n            );\r\n        }\r\n    };\r\n    function request() {\r\n        return {\r\n            type: shoppingCartConstants.REMOVE_ITEM_CART_REQUEST,\r\n        };\r\n    }\r\n\r\n    function success(postId) {\r\n        return {\r\n            type: shoppingCartConstants.REMOVE_ITEM_CART_SUCCESS,\r\n            postId,\r\n        };\r\n    }\r\n\r\n    function failure(error) {\r\n        return {\r\n            type: shoppingCartConstants.REMOVE_ITEM_CART_FAILURE,\r\n            error,\r\n        };\r\n    }\r\n}\r\n\r\nfunction removeAllItems() {\r\n    return async (dispatch) => {\r\n        await dispatch(request());\r\n        try {\r\n            await shoppingCartService.clearCart();\r\n            dispatch(success());\r\n        } catch (ex) {\r\n            dispatch(failure(ex));\r\n            dispatch(\r\n                alertActions.error({\r\n                    header: \"can't view cart details\",\r\n                    content: ex.message,\r\n                }),\r\n            );\r\n        }\r\n    };\r\n    function request() {\r\n        return {\r\n            type: shoppingCartConstants.REMOVE_ITEM_CART_REQUEST,\r\n        };\r\n    }\r\n\r\n    function success() {\r\n        return {\r\n            type: shoppingCartConstants.REMOVE_ALL_ITEMS_CART_SUCCESS,\r\n        };\r\n    }\r\n\r\n    function failure(error) {\r\n        return {\r\n            type: shoppingCartConstants.REMOVE_ALL_ITEMS_CART_FAILURE,\r\n            error,\r\n        };\r\n    }\r\n}\r\n\r\nfunction proceedToCheckout(postId) {\r\n    return async (dispatch) => {\r\n        await dispatch(request());\r\n        try {\r\n            //const { data } = await ;\r\n            dispatch(success());\r\n            history.push('/checkout');\r\n        } catch (ex) {\r\n            dispatch(failure(ex));\r\n            dispatch(\r\n                alertActions.error({\r\n                    header: \"can't Proceed to checkout\",\r\n                    content: ex.message,\r\n                }),\r\n            );\r\n        }\r\n    };\r\n    function request() {\r\n        return {\r\n            type: shoppingCartConstants.PROCEED_TO_CHECKOUT_REQUEST,\r\n        };\r\n    }\r\n\r\n    function success() {\r\n        return {\r\n            type: shoppingCartConstants.PROCEED_TO_CHECKOUT_SUCCESS,\r\n        };\r\n    }\r\n\r\n    function failure(error) {\r\n        return {\r\n            type: shoppingCartConstants.PROCEED_TO_CHECKOUT_FAILURE,\r\n            error,\r\n        };\r\n    }\r\n}\r\n\r\nfunction resetItem(postId){\r\n    return async (dispatch) => {\r\n        await dispatch(request());\r\n        try {\r\n            const { data } = await shoppingCartService.resetItem( postId);\r\n            dispatch(success({ posts: data.shoppingCart }));\r\n        } catch (ex) {\r\n            dispatch(failure(ex));\r\n            dispatch(\r\n                alertActions.error({\r\n                    header: \"can't view cart details\",\r\n                    content: ex.message,\r\n                }),\r\n            );\r\n        }\r\n    };\r\n    function request() {\r\n        return {\r\n            type: shoppingCartConstants.UPDATE_QUANTITY_CART_REQUEST,\r\n        };\r\n    }\r\n\r\n    function success(shoppingCartData) {\r\n        return {\r\n            type: shoppingCartConstants.UPDATE_QUANTITY_CART_SUCCESS,\r\n            shoppingCartData,\r\n        };\r\n    }\r\n\r\n    function failure(error) {\r\n        return {\r\n            type: shoppingCartConstants.UPDATE_QUANTITY_CART_FAILURE,\r\n            error,\r\n        };\r\n    }\r\n}"]},"metadata":{},"sourceType":"module"}