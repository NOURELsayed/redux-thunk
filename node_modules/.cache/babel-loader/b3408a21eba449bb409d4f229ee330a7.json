{"ast":null,"code":"import { reportProblemConstants } from '../constants';\nimport { reportProblemService } from '../services';\nimport { alertActions } from './alert.actions';\nimport { history } from \"../helpers\";\nexport const reportProblemActions = {\n  filesAdded,\n  fileRemoved,\n  getTicketCategories,\n  createProblemTicket,\n  getMyTickets,\n  getTicketData,\n  submitReply\n};\n\nfunction filesAdded(files) {\n  return dispatch => {\n    dispatch({\n      type: reportProblemConstants.FILE_ADD,\n      files\n    });\n  };\n}\n\nfunction fileRemoved(file) {\n  return dispatch => {\n    dispatch({\n      type: reportProblemConstants.FILE_REMOVE,\n      file\n    });\n  };\n}\n\nfunction getTicketCategories() {\n  return async dispatch => {\n    await dispatch(request());\n\n    try {\n      const {\n        data\n      } = await reportProblemService.getTicketCategories();\n      dispatch(success(data));\n    } catch (ex) {\n      dispatch(failure(ex.message));\n    }\n  };\n\n  function request() {\n    return {\n      type: reportProblemConstants.GET_TICKET_CATEGORIES_REQUEST\n    };\n  }\n\n  function success(categories) {\n    return {\n      type: reportProblemConstants.GET_TICKET_CATEGORIES_SUCCESS,\n      categories\n    };\n  }\n\n  function failure(error) {\n    return {\n      type: reportProblemConstants.GET_TICKET_CATEGORIES_FAILURE,\n      error\n    };\n  }\n}\n\nfunction createProblemTicket(ticketObject) {\n  return async dispatch => {\n    await dispatch(request(ticketObject));\n\n    try {\n      const {\n        data\n      } = await reportProblemService.createTicket(ticketObject);\n      dispatch(clear());\n      dispatch(success(data));\n      dispatch(alertActions.success({\n        header: 'Problem submitted successfully'\n      }));\n      history.push(`ticket/${data._id}`);\n    } catch (ex) {\n      dispatch(failure(ex));\n      dispatch(alertActions.error({\n        header: ex.message\n      }));\n    }\n  };\n\n  function request() {\n    return {\n      type: reportProblemConstants.REPORT_PROBLEM_REQUEST\n    };\n  }\n\n  function success(ticket) {\n    return {\n      type: reportProblemConstants.REPORT_PROBLEM_SUCCESS,\n      ticket\n    };\n  }\n\n  function failure(errors) {\n    return {\n      type: reportProblemConstants.REPORT_PROBLEM_FAILURE,\n      errors\n    };\n  }\n\n  function clear() {\n    return {\n      type: reportProblemConstants.CLEAR\n    };\n  }\n}\n\nfunction getMyTickets() {\n  return async dispatch => {\n    await dispatch(request());\n\n    try {\n      const {\n        data\n      } = await reportProblemService.getMyTickets();\n      dispatch(success(data));\n    } catch (ex) {\n      dispatch(failure(ex.message));\n    }\n  };\n\n  function request() {\n    return {\n      type: reportProblemConstants.GET_TICKETS_REQUEST\n    };\n  }\n\n  function success(tickets) {\n    return {\n      type: reportProblemConstants.GET_TICKETS_SUCCESS,\n      tickets\n    };\n  }\n\n  function failure(error) {\n    return {\n      type: reportProblemConstants.GET_TICKETS_FAILURE,\n      error\n    };\n  }\n}\n\nfunction getTicketData(ticketId) {\n  return async dispatch => {\n    await dispatch(request());\n\n    try {\n      const {\n        data\n      } = await reportProblemService.getTicketData(ticketId);\n      dispatch(success(data));\n    } catch (ex) {\n      dispatch(failure(ex.message));\n    }\n  };\n\n  function request() {\n    return {\n      type: reportProblemConstants.GET_TICKET_DATA_REQUEST\n    };\n  }\n\n  function success(ticketData) {\n    return {\n      type: reportProblemConstants.GET_TICKET_DATA_SUCCESS,\n      ticketData\n    };\n  }\n\n  function failure(error) {\n    return {\n      type: reportProblemConstants.GET_TICKET_DATA_FAILURE,\n      error\n    };\n  }\n}\n\nfunction submitReply(text, ticketId) {\n  return async dispatch => {\n    await dispatch(request());\n\n    try {\n      const {\n        data\n      } = await reportProblemService.replyToTicket(text, ticketId);\n      dispatch(success(data));\n    } catch (ex) {\n      dispatch(failure(ex.message));\n    }\n  };\n\n  function request() {\n    return {\n      type: reportProblemConstants.REPLY_TO_TICKET_REQUEST\n    };\n  }\n\n  function success(ticketData) {\n    return {\n      type: reportProblemConstants.REPLY_TO_TICKET_SUCCESS,\n      ticketData\n    };\n  }\n\n  function failure(error) {\n    return {\n      type: reportProblemConstants.REPLY_TO_TICKET_FAILURE,\n      error\n    };\n  }\n}","map":{"version":3,"sources":["/media/norhan/New Volume/work/React-projects/test-redux/src/actions/reportProblem.actions.js"],"names":["reportProblemConstants","reportProblemService","alertActions","history","reportProblemActions","filesAdded","fileRemoved","getTicketCategories","createProblemTicket","getMyTickets","getTicketData","submitReply","files","dispatch","type","FILE_ADD","file","FILE_REMOVE","request","data","success","ex","failure","message","GET_TICKET_CATEGORIES_REQUEST","categories","GET_TICKET_CATEGORIES_SUCCESS","error","GET_TICKET_CATEGORIES_FAILURE","ticketObject","createTicket","clear","header","push","_id","REPORT_PROBLEM_REQUEST","ticket","REPORT_PROBLEM_SUCCESS","errors","REPORT_PROBLEM_FAILURE","CLEAR","GET_TICKETS_REQUEST","tickets","GET_TICKETS_SUCCESS","GET_TICKETS_FAILURE","ticketId","GET_TICKET_DATA_REQUEST","ticketData","GET_TICKET_DATA_SUCCESS","GET_TICKET_DATA_FAILURE","text","replyToTicket","REPLY_TO_TICKET_REQUEST","REPLY_TO_TICKET_SUCCESS","REPLY_TO_TICKET_FAILURE"],"mappings":"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","sourcesContent":["import { reportProblemConstants } from '../constants';\r\nimport { reportProblemService } from '../services';\r\nimport {alertActions} from './alert.actions';\r\nimport {history} from \"../helpers\";\r\n\r\nexport const reportProblemActions = {\r\n    filesAdded,\r\n    fileRemoved,\r\n    getTicketCategories,\r\n    createProblemTicket,\r\n    getMyTickets,\r\n    getTicketData,\r\n    submitReply,\r\n  };\r\n\r\n  function filesAdded(files) {\r\n    return (dispatch) => {\r\n      dispatch({type: reportProblemConstants.FILE_ADD, files});\r\n    };\r\n  }\r\n  \r\n  function fileRemoved(file) {\r\n    return (dispatch) => {\r\n      dispatch({type: reportProblemConstants.FILE_REMOVE, file});\r\n    };\r\n  }  \r\n\r\n  function getTicketCategories() {\r\n    return async (dispatch) => {\r\n        await dispatch(request());\r\n        try {\r\n          const {data} = await reportProblemService.getTicketCategories();\r\n          dispatch(success(data));\r\n        } catch (ex) {\r\n          dispatch(failure(ex.message));\r\n        }\r\n      };\r\n    \r\n      function request() {\r\n        return {type: reportProblemConstants.GET_TICKET_CATEGORIES_REQUEST};\r\n      }\r\n    \r\n      function success(categories) {\r\n        return {type: reportProblemConstants.GET_TICKET_CATEGORIES_SUCCESS, categories};\r\n      }\r\n    \r\n      function failure(error) {\r\n        return {type: reportProblemConstants.GET_TICKET_CATEGORIES_FAILURE, error};\r\n      }\r\n  }\r\n\r\n  function createProblemTicket(ticketObject) {\r\n    return async (dispatch) => {\r\n      await dispatch(request(ticketObject));\r\n      try {\r\n        const {data} = await reportProblemService.createTicket(ticketObject);\r\n        dispatch(clear());\r\n        dispatch(success(data));\r\n        dispatch(\r\n          alertActions.success({header: 'Problem submitted successfully'}),\r\n        );\r\n        history.push(`ticket/${data._id}`);\r\n      } catch (ex) {\r\n        dispatch(failure(ex));\r\n        dispatch(alertActions.error({header: ex.message}));\r\n      }\r\n    };\r\n  \r\n    function request() {\r\n      return {type: reportProblemConstants.REPORT_PROBLEM_REQUEST};\r\n    }\r\n  \r\n    function success(ticket) {\r\n      return {type: reportProblemConstants.REPORT_PROBLEM_SUCCESS, ticket};\r\n    }\r\n  \r\n    function failure(errors) {\r\n      return {type: reportProblemConstants.REPORT_PROBLEM_FAILURE, errors};\r\n    }\r\n  \r\n    function clear() {\r\n      return {type: reportProblemConstants.CLEAR};\r\n    }\r\n  }\r\n\r\n  function getMyTickets() {\r\n    return async (dispatch) => {\r\n        await dispatch(request());\r\n        try {\r\n          const {data} = await reportProblemService.getMyTickets();\r\n          dispatch(success(data));\r\n        } catch (ex) {\r\n          dispatch(failure(ex.message));\r\n        }\r\n      };\r\n    \r\n      function request() {\r\n        return {type: reportProblemConstants.GET_TICKETS_REQUEST};\r\n      }\r\n    \r\n      function success(tickets) {\r\n        return {type: reportProblemConstants.GET_TICKETS_SUCCESS, tickets};\r\n      }\r\n    \r\n      function failure(error) {\r\n        return {type: reportProblemConstants.GET_TICKETS_FAILURE, error};\r\n      }\r\n  }\r\n\r\n  function getTicketData(ticketId) {\r\n    return async (dispatch) => {\r\n        await dispatch(request());\r\n        try {\r\n          const {data} = await reportProblemService.getTicketData(ticketId);\r\n          dispatch(success(data));\r\n        } catch (ex) {\r\n          dispatch(failure(ex.message));\r\n        }\r\n      };\r\n    \r\n      function request() {\r\n        return {type: reportProblemConstants.GET_TICKET_DATA_REQUEST};\r\n      }\r\n    \r\n      function success(ticketData) {\r\n        return {type: reportProblemConstants.GET_TICKET_DATA_SUCCESS, ticketData};\r\n      }\r\n    \r\n      function failure(error) {\r\n        return {type: reportProblemConstants.GET_TICKET_DATA_FAILURE, error};\r\n      }\r\n  }\r\n\r\n  function submitReply(text, ticketId) {\r\n    return async (dispatch) => {\r\n        await dispatch(request());\r\n        try {\r\n          const {data} = await reportProblemService.replyToTicket(text, ticketId);\r\n          dispatch(success(data));\r\n        } catch (ex) {\r\n          dispatch(failure(ex.message));\r\n        }\r\n      };\r\n    \r\n      function request() {\r\n        return {type: reportProblemConstants.REPLY_TO_TICKET_REQUEST};\r\n      }\r\n    \r\n      function success(ticketData) {\r\n        return {type: reportProblemConstants.REPLY_TO_TICKET_SUCCESS, ticketData};\r\n      }\r\n    \r\n      function failure(error) {\r\n        return {type: reportProblemConstants.REPLY_TO_TICKET_FAILURE, error};\r\n      }\r\n  }"]},"metadata":{},"sourceType":"module"}