{"ast":null,"code":"var _jsxFileName = \"/media/norhan/New Volume/work/React-projects/test-redux/src/containers/CreatePostPage/Step1.jsx\";\nimport React, { Component, Fragment } from \"react\";\nimport { connect } from \"react-redux\";\nimport { Divider, Grid, Select, Button, Header } from \"semantic-ui-react\";\nimport { categoryActions, postActions } from \"../../actions\";\nimport { createOptions, getSubcategories } from \"../../helpers\";\n\nclass Step1 extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      change: false\n    };\n\n    this.generateCategories = () => {\n      const {\n        options\n      } = this.props.post;\n\n      if (options.length > 0) {\n        return options.map((option, index) => {\n          return /*#__PURE__*/React.createElement(Fragment, {\n            key: index + 2,\n            __self: this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 23,\n              columnNumber: 11\n            }\n          }, /*#__PURE__*/React.createElement(Select, {\n            fluid: true,\n            name: `cat_${index}`,\n            placeholder: \"Choose a category...\",\n            key: index + 3,\n            options: option,\n            onChange: this.handleCategoryChange,\n            __self: this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 24,\n              columnNumber: 13\n            }\n          }), /*#__PURE__*/React.createElement(Divider, {\n            key: index + 4,\n            horizontal: true,\n            __self: this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 32,\n              columnNumber: 13\n            }\n          }, \"**********\"));\n        });\n      }\n    };\n\n    this.handleCategoryChange = async (e, {\n      name,\n      value\n    }) => {\n      const {\n        categories\n      } = this.props.post;\n      const levelChanged = parseInt(name.split(\"cat_\").pop());\n      const subcategories = await getSubcategories(categories, value, levelChanged);\n\n      if (subcategories.length > 0) {\n        // not the leaf!.\n        const options = await createOptions(subcategories);\n        await this.props.categoriesNotLeafUpdated(subcategories, options, levelChanged);\n      } else {\n        // is leaf!\n        await this.props.categoriesLeafUpdated(levelChanged);\n        await this.props.getFields(value);\n        const categoryFields = this.props.post.categoryFields;\n        const itemData = this.itemDataArray(categoryFields);\n        const category = this.categoryObj(value, levelChanged);\n        this.props.selectedCategoryChanged(category);\n        this.props.itemDataChanged(itemData);\n      }\n    };\n\n    this.itemDataArray = fields => {\n      const itemData = {};\n\n      for (let {\n        name\n      } of fields) {\n        itemData[name.english] = \"\";\n      }\n\n      itemData.description = \"\";\n      return itemData;\n    };\n\n    this.categoryObj = (id, level) => {\n      const {\n        categories\n      } = this.props.post;\n      return categories[level].find(c => c.id === id);\n    };\n\n    this.handleChangeCategoryOnEdit = async () => {\n      this.setState({\n        change: true\n      });\n      await this.props.editPostChangeCategory();\n    };\n  }\n\n  async componentDidMount() {\n    const {\n      categories\n    } = this.props.post;\n    if (categories.length < 1) await this.props.getAllCategories();\n  }\n\n  render() {\n    const {\n      currentStep\n    } = this.props.post;\n    const {\n      category,\n      edit\n    } = this.props;\n    const {\n      change\n    } = this.state;\n    return currentStep !== 1 ? null : /*#__PURE__*/React.createElement(Grid, {\n      centered: true,\n      columns: 2,\n      style: {\n        padding: \"2em\",\n        minHeight: 500\n      },\n      textAlign: \"center\",\n      verticalAlign: \"middle\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 93,\n        columnNumber: 7\n      }\n    }, edit && !change ? category && /*#__PURE__*/React.createElement(React.Fragment, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 101,\n        columnNumber: 23\n      }\n    }, /*#__PURE__*/React.createElement(Grid.Row, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 102,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(Header, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 103,\n        columnNumber: 15\n      }\n    }, \"Category Chosen: \", category.name.english)), /*#__PURE__*/React.createElement(Grid.Row, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 107,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(Button, {\n      onClick: this.handleChangeCategoryOnEdit,\n      primary: true,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 108,\n        columnNumber: 15\n      }\n    }, \"Change\"))) : /*#__PURE__*/React.createElement(Grid.Column, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 112,\n        columnNumber: 11\n      }\n    }, this.generateCategories()));\n  }\n\n}\n\nfunction mapState(state) {\n  const {\n    post\n  } = state;\n  const {\n    valid,\n    errors\n  } = state.validation;\n  return {\n    post,\n    valid,\n    errors\n  };\n}\n\nconst actionCreators = {\n  getAllCategories: categoryActions.getAll,\n  categoriesNotLeafUpdated: postActions.categoriesNotLeafUpdated,\n  categoriesLeafUpdated: postActions.categoriesLeafUpdated,\n  selectedCategoryChanged: postActions.selectedCategoryChanged,\n  getFields: categoryActions.getFields,\n  itemDataChanged: postActions.itemDataChanged,\n  editPostChangeCategory: postActions.editPostChangeCategory\n};\nconst connectedStep1 = connect(mapState, actionCreators)(Step1);\nexport { connectedStep1 as Step1 };","map":{"version":3,"sources":["/media/norhan/New Volume/work/React-projects/test-redux/src/containers/CreatePostPage/Step1.jsx"],"names":["React","Component","Fragment","connect","Divider","Grid","Select","Button","Header","categoryActions","postActions","createOptions","getSubcategories","Step1","state","change","generateCategories","options","props","post","length","map","option","index","handleCategoryChange","e","name","value","categories","levelChanged","parseInt","split","pop","subcategories","categoriesNotLeafUpdated","categoriesLeafUpdated","getFields","categoryFields","itemData","itemDataArray","category","categoryObj","selectedCategoryChanged","itemDataChanged","fields","english","description","id","level","find","c","handleChangeCategoryOnEdit","setState","editPostChangeCategory","componentDidMount","getAllCategories","render","currentStep","edit","padding","minHeight","mapState","valid","errors","validation","actionCreators","getAll","connectedStep1"],"mappings":"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","sourcesContent":["import React, { Component, Fragment } from \"react\";\r\nimport { connect } from \"react-redux\";\r\nimport { Divider, Grid, Select, Button, Header } from \"semantic-ui-react\";\r\nimport { categoryActions, postActions } from \"../../actions\";\r\nimport { createOptions, getSubcategories } from \"../../helpers\";\r\n\r\nclass Step1 extends Component {\r\n\r\n  state = {\r\n    change: false,\r\n  }\r\n\r\n  async componentDidMount() {\r\n    const { categories } = this.props.post;\r\n    if (categories.length < 1) await this.props.getAllCategories();\r\n  }\r\n\r\n  generateCategories = () => {\r\n    const { options } = this.props.post;\r\n    if (options.length > 0) {\r\n      return options.map((option, index) => {\r\n        return (\r\n          <Fragment key={index + 2}>\r\n            <Select\r\n              fluid\r\n              name={`cat_${index}`}\r\n              placeholder=\"Choose a category...\"\r\n              key={index + 3}\r\n              options={option}\r\n              onChange={this.handleCategoryChange}\r\n            />\r\n            <Divider key={index + 4} horizontal>\r\n              **********\r\n            </Divider>\r\n          </Fragment>\r\n        );\r\n      });\r\n    }\r\n  };\r\n\r\n  handleCategoryChange = async (e, { name, value }) => {\r\n    const { categories } = this.props.post;\r\n    const levelChanged = parseInt(name.split(\"cat_\").pop());\r\n    const subcategories = await getSubcategories(\r\n      categories,\r\n      value,\r\n      levelChanged\r\n    );\r\n    if (subcategories.length > 0) {\r\n      // not the leaf!.\r\n      const options = await createOptions(subcategories);\r\n      await this.props.categoriesNotLeafUpdated(\r\n        subcategories,\r\n        options,\r\n        levelChanged\r\n      );\r\n    } else {\r\n      // is leaf!\r\n      await this.props.categoriesLeafUpdated(levelChanged);\r\n      await this.props.getFields(value);\r\n      const categoryFields = this.props.post.categoryFields;\r\n      const itemData = this.itemDataArray(categoryFields);\r\n      const category = this.categoryObj(value, levelChanged);\r\n      this.props.selectedCategoryChanged(category);\r\n      this.props.itemDataChanged(itemData);\r\n    }\r\n  };\r\n\r\n  itemDataArray = (fields) => {\r\n    const itemData = {};\r\n    for (let { name } of fields) {\r\n      itemData[name.english] = \"\";\r\n    }\r\n    itemData.description = \"\";\r\n    return itemData;\r\n  };\r\n\r\n  categoryObj = (id, level) => {\r\n    const { categories } = this.props.post;\r\n    return categories[level].find((c) => c.id === id);\r\n  };\r\n\r\n  handleChangeCategoryOnEdit = async () => {\r\n    this.setState({ change: true });\r\n    await this.props.editPostChangeCategory();\r\n  }\r\n\r\n  render() {\r\n    const { currentStep } = this.props.post;\r\n    const { category, edit } = this.props;\r\n    const { change } = this.state;\r\n    return currentStep !== 1 ? null : (\r\n      <Grid\r\n        centered\r\n        columns={2}\r\n        style={{ padding: \"2em\", minHeight: 500 }}\r\n        textAlign=\"center\"\r\n        verticalAlign=\"middle\"\r\n      >\r\n        {edit && !change ? (\r\n          category && <React.Fragment>\r\n            <Grid.Row>\r\n              <Header>\r\n                Category Chosen: {category.name.english}\r\n              </Header>\r\n            </Grid.Row>\r\n            <Grid.Row>\r\n              <Button onClick={this.handleChangeCategoryOnEdit} primary>Change</Button>\r\n            </Grid.Row>\r\n          </React.Fragment>\r\n        ) : (\r\n          <Grid.Column>{this.generateCategories()}</Grid.Column>\r\n        )}\r\n      </Grid>\r\n    );\r\n  }\r\n}\r\n\r\nfunction mapState(state) {\r\n  const { post } = state;\r\n  const { valid, errors } = state.validation;\r\n  return { post, valid, errors };\r\n}\r\n\r\nconst actionCreators = {\r\n  getAllCategories: categoryActions.getAll,\r\n  categoriesNotLeafUpdated: postActions.categoriesNotLeafUpdated,\r\n  categoriesLeafUpdated: postActions.categoriesLeafUpdated,\r\n  selectedCategoryChanged: postActions.selectedCategoryChanged,\r\n  getFields: categoryActions.getFields,\r\n  itemDataChanged: postActions.itemDataChanged,\r\n  editPostChangeCategory: postActions.editPostChangeCategory,\r\n};\r\n\r\nconst connectedStep1 = connect(mapState, actionCreators)(Step1);\r\nexport { connectedStep1 as Step1 };\r\n"]},"metadata":{},"sourceType":"module"}