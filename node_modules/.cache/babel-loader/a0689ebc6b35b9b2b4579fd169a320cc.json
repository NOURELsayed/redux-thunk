{"ast":null,"code":"import { badgesConstants } from '../constants';\nimport { badgesService } from '../services';\nimport { alertActions } from './';\nexport const badgesActions = {\n  viewOptedBadges,\n  activateBadge,\n  viewBadgesToOpt\n};\n\nfunction viewOptedBadges() {\n  return async dispatch => {\n    await dispatch(request());\n\n    try {\n      const {\n        data\n      } = await badgesService.viewOptedBadges();\n      dispatch(success(data));\n    } catch (ex) {\n      dispatch(failure(ex.message));\n    }\n  };\n\n  function request() {\n    return {\n      type: badgesConstants.VIEW_OPTED_BADGES_REQUEST\n    };\n  }\n\n  function success(badgeData) {\n    return {\n      type: badgesConstants.VIEW_OPTED_BADGES_SUCCESS,\n      badgeData\n    };\n  }\n\n  function failure(error) {\n    return {\n      type: badgesConstants.VIEW_OPTED_BADGES_FAILURE,\n      error\n    };\n  }\n}\n\nfunction activateBadge(badgeID) {\n  return async dispatch => {\n    await dispatch(request());\n\n    try {\n      const {\n        data\n      } = await badgesService.activateBadge(badgeID);\n      dispatch(success(data));\n    } catch (ex) {\n      dispatch(failure(ex.message));\n      dispatch(alertActions.error({\n        header: \"You are not allowed to re-gain\",\n        content: ex.message\n      }));\n    }\n  };\n\n  function request() {\n    return {\n      type: badgesConstants.ACTIVATE_BADGE_REQUEST\n    };\n  }\n\n  function success(userProfile) {\n    return {\n      type: badgesConstants.ACTIVATE_BADGE_SUCCESS,\n      userProfile\n    };\n  }\n\n  function failure(error) {\n    return {\n      type: badgesConstants.ACTIVATE_BADGE_FAILURE,\n      error\n    };\n  }\n}\n\nfunction viewBadgesToOpt() {\n  return async dispatch => {\n    await dispatch(request());\n\n    try {\n      const {\n        data\n      } = await badgesService.viewOptableBadges();\n      dispatch(success(data));\n    } catch (ex) {\n      dispatch(failure(ex.message));\n    }\n  };\n\n  function request() {\n    return {\n      type: badgesConstants.VIEW_BADGES_TO_OPT_REQUEST\n    };\n  }\n\n  function success(badgeData) {\n    return {\n      type: badgesConstants.VIEW_BADGES_TO_OPT_SUCCESS,\n      badgeData\n    };\n  }\n\n  function failure(error) {\n    return {\n      type: badgesConstants.VIEW_BADGES_TO_OPT_FAILURE,\n      error\n    };\n  }\n}","map":{"version":3,"sources":["/media/norhan/New Volume/work/React-projects/test-redux/src/actions/badges.actions.js"],"names":["badgesConstants","badgesService","alertActions","badgesActions","viewOptedBadges","activateBadge","viewBadgesToOpt","dispatch","request","data","success","ex","failure","message","type","VIEW_OPTED_BADGES_REQUEST","badgeData","VIEW_OPTED_BADGES_SUCCESS","error","VIEW_OPTED_BADGES_FAILURE","badgeID","header","content","ACTIVATE_BADGE_REQUEST","userProfile","ACTIVATE_BADGE_SUCCESS","ACTIVATE_BADGE_FAILURE","viewOptableBadges","VIEW_BADGES_TO_OPT_REQUEST","VIEW_BADGES_TO_OPT_SUCCESS","VIEW_BADGES_TO_OPT_FAILURE"],"mappings":"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","sourcesContent":["import {badgesConstants} from '../constants';\r\nimport {badgesService} from '../services';\r\nimport { alertActions } from './';\r\n\r\nexport const badgesActions = {\r\n    viewOptedBadges,\r\n    activateBadge,\r\n    viewBadgesToOpt,\r\n};\r\n\r\nfunction viewOptedBadges() {\r\n  return async (dispatch) => {\r\n    await dispatch(request());\r\n    try {\r\n      const {data} = await badgesService.viewOptedBadges();\r\n      dispatch(success(data));\r\n    } catch (ex) {\r\n      dispatch(failure(ex.message));\r\n    }\r\n  };\r\n\r\n  function request() {\r\n    return {type: badgesConstants.VIEW_OPTED_BADGES_REQUEST};\r\n  }\r\n\r\n  function success(badgeData) {\r\n    return {type: badgesConstants.VIEW_OPTED_BADGES_SUCCESS, badgeData};\r\n  }\r\n\r\n  function failure(error) {\r\n    return {type: badgesConstants.VIEW_OPTED_BADGES_FAILURE, error};\r\n  }\r\n}\r\nfunction activateBadge(badgeID) {\r\n    return async (dispatch) => {\r\n      await dispatch(request());\r\n      try {\r\n        const {data} = await badgesService.activateBadge(badgeID);\r\n        dispatch(success(data));\r\n      } catch (ex) {\r\n        dispatch(failure(ex.message));\r\n        dispatch(\r\n          alertActions.error({\r\n              header: \"You are not allowed to re-gain\",\r\n              content: ex.message,\r\n          }),\r\n      );\r\n      }\r\n    };\r\n  \r\n    function request() {\r\n      return {type: badgesConstants.ACTIVATE_BADGE_REQUEST};\r\n    }\r\n  \r\n    function success(userProfile) {\r\n      return {type: badgesConstants.ACTIVATE_BADGE_SUCCESS, userProfile};\r\n    }\r\n  \r\n    function failure(error) {\r\n      return {type: badgesConstants.ACTIVATE_BADGE_FAILURE, error};\r\n    }\r\n  }\r\n  function viewBadgesToOpt() {\r\n    return async (dispatch) => {\r\n      await dispatch(request());\r\n      try {\r\n        const {data} = await badgesService.viewOptableBadges();\r\n        dispatch(success(data));\r\n      } catch (ex) {\r\n        dispatch(failure(ex.message));\r\n      }\r\n    };\r\n  \r\n    function request() {\r\n      return {type: badgesConstants.VIEW_BADGES_TO_OPT_REQUEST};\r\n    }\r\n  \r\n    function success(badgeData) {\r\n      return {type: badgesConstants.VIEW_BADGES_TO_OPT_SUCCESS, badgeData};\r\n    }\r\n  \r\n    function failure(error) {\r\n      return {type: badgesConstants.VIEW_BADGES_TO_OPT_FAILURE, error};\r\n    }\r\n  }"]},"metadata":{},"sourceType":"module"}