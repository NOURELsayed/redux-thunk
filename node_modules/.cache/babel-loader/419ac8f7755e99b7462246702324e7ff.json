{"ast":null,"code":"var _jsxFileName = \"/media/norhan/New Volume/work/React-projects/test-redux/src/components/Search/SearchInput.jsx\";\nimport React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport { Input, Button, Icon } from 'semantic-ui-react';\nimport { searchActions } from './../../actions/search.actions';\n\nclass SearchInput extends Component {\n  constructor(...args) {\n    super(...args);\n    this.searchInputRef = React.createRef();\n\n    this.searchBtnClicked = async () => {\n      this.handleSearchEvent();\n    };\n\n    this.handleKeyPress = async target => {\n      if (target.charCode === 13) {\n        this.handleSearchEvent();\n      }\n    };\n\n    this.searchTextChanged = (e, data) => {\n      this.props.searchKeywordChanged(data.value);\n    };\n  }\n\n  handleSearchEvent(searchKeyword) {\n    if (!searchKeyword) {\n      searchKeyword = this.props.searchKeyWord;\n    }\n\n    const {\n      cookies\n    } = this.props;\n    let searchKeywords = cookies.get('searchKeywords');\n\n    if (typeof searchKeywords === 'undefined') {\n      searchKeywords = [];\n    }\n\n    if (!searchKeywords.includes(searchKeyword)) {\n      searchKeywords.push(searchKeyword);\n    }\n\n    cookies.set('searchKeywords', searchKeywords, {\n      path: '/search'\n    });\n    this.props.simpleSearch(searchKeyword);\n  }\n\n  componentDidMount() {\n    if (this.props.searchKeyWordURL) {\n      this.handleSearchEvent(this.props.searchKeyWordURL);\n    }\n  }\n\n  render() {\n    return /*#__PURE__*/React.createElement(\"div\", {\n      className: \"ui action input\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 48,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(Input, {\n      placeholder: \"Search...\",\n      type: \"text\",\n      ref: this.searchInputRef,\n      onChange: this.searchTextChanged,\n      value: this.props.searchKeyWord,\n      onKeyPress: this.handleKeyPress,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 49,\n        columnNumber: 17\n      }\n    }), /*#__PURE__*/React.createElement(Button, {\n      className: \"ui button\",\n      icon: true,\n      loading: this.props.isLoading,\n      onClick: this.searchBtnClicked,\n      attached: \"right\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 57,\n        columnNumber: 17\n      }\n    }, /*#__PURE__*/React.createElement(Icon, {\n      name: \"search\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 64,\n        columnNumber: 21\n      }\n    })));\n  }\n\n}\n\nfunction mapState(state) {\n  const {\n    searchKeyWord,\n    isLoading\n  } = state.search;\n  return {\n    searchKeyWord,\n    isLoading\n  };\n}\n\nconst actionCreators = {\n  simpleSearch: searchActions.simpleSearch,\n  searchKeywordChanged: searchActions.searchKeywordChanged\n};\nconst connectedSearchInput = connect(mapState, actionCreators)(SearchInput);\nexport { connectedSearchInput as SearchInput, SearchInput as SearchInputComponent };","map":{"version":3,"sources":["/media/norhan/New Volume/work/React-projects/test-redux/src/components/Search/SearchInput.jsx"],"names":["React","Component","connect","Input","Button","Icon","searchActions","SearchInput","searchInputRef","createRef","searchBtnClicked","handleSearchEvent","handleKeyPress","target","charCode","searchTextChanged","e","data","props","searchKeywordChanged","value","searchKeyword","searchKeyWord","cookies","searchKeywords","get","includes","push","set","path","simpleSearch","componentDidMount","searchKeyWordURL","render","isLoading","mapState","state","search","actionCreators","connectedSearchInput","SearchInputComponent"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { Input, Button, Icon } from 'semantic-ui-react';\r\nimport { searchActions } from './../../actions/search.actions';\r\n\r\nclass SearchInput extends Component {\r\n    handleSearchEvent(searchKeyword) {\r\n        if (!searchKeyword) {\r\n            searchKeyword = this.props.searchKeyWord;\r\n        }\r\n        const { cookies } = this.props;\r\n        let searchKeywords = cookies.get('searchKeywords');\r\n        if (typeof searchKeywords === 'undefined') {\r\n            searchKeywords = [];\r\n        }\r\n        if (!searchKeywords.includes(searchKeyword)) {\r\n            searchKeywords.push(searchKeyword);\r\n        }\r\n        cookies.set('searchKeywords', searchKeywords, { path: '/search' });\r\n        this.props.simpleSearch(searchKeyword);\r\n    }\r\n\r\n    componentDidMount() {\r\n        if (this.props.searchKeyWordURL) {\r\n            this.handleSearchEvent(this.props.searchKeyWordURL);\r\n        }\r\n    }\r\n\r\n    searchInputRef = React.createRef();\r\n\r\n    searchBtnClicked = async () => {\r\n        this.handleSearchEvent();\r\n    };\r\n\r\n    handleKeyPress = async (target) => {\r\n        if (target.charCode === 13) {\r\n            this.handleSearchEvent();\r\n        }\r\n    };\r\n\r\n    searchTextChanged = (e, data) => {\r\n        this.props.searchKeywordChanged(data.value);\r\n    };\r\n\r\n    render() {\r\n \r\n        return (\r\n            <div className='ui action input'>\r\n                <Input\r\n                    placeholder='Search...'\r\n                    type='text'\r\n                    ref={this.searchInputRef}\r\n                    onChange={this.searchTextChanged}\r\n                    value={this.props.searchKeyWord}\r\n                    onKeyPress={this.handleKeyPress}\r\n                />\r\n                <Button\r\n                    className='ui button'\r\n                    icon\r\n                    loading={this.props.isLoading}\r\n                    onClick={this.searchBtnClicked}\r\n                    attached='right'\r\n                >\r\n                    <Icon name='search' />\r\n                </Button>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nfunction mapState(state) {\r\n    const { searchKeyWord, isLoading } = state.search;\r\n    return { searchKeyWord, isLoading };\r\n}\r\n\r\nconst actionCreators = {\r\n    simpleSearch: searchActions.simpleSearch,\r\n    searchKeywordChanged: searchActions.searchKeywordChanged,\r\n};\r\n\r\nconst connectedSearchInput = connect(mapState, actionCreators)(SearchInput);\r\n\r\nexport {\r\n    connectedSearchInput as SearchInput,\r\n    SearchInput as SearchInputComponent,\r\n};\r\n"]},"metadata":{},"sourceType":"module"}