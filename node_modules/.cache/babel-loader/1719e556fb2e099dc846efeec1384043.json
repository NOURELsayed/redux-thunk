{"ast":null,"code":"var _jsxFileName = \"/media/norhan/New Volume/work/React-projects/test-redux/src/containers/UserPage/Feedback.jsx\";\nimport React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport { Segment, Grid, Icon } from 'semantic-ui-react';\nimport StarRatings from 'react-star-ratings';\n\nclass FeedBack extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {};\n  }\n\n  render() {\n    let feedback;\n    let ratingAsBuyer;\n    let ratingAsSeller;\n\n    if (this.props.userPublicDetails && this.props.userPublicDetails.user) {\n      feedback = this.props.userPublicDetails.user.feedback;\n      ratingAsSeller = this.props.userPublicDetails.user.ratingAsSeller;\n      ratingAsBuyer = this.props.userPublicDetails.user.ratingAsBuyer;\n    }\n\n    return /*#__PURE__*/React.createElement(Segment, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 18,\n        columnNumber: 13\n      }\n    }, this.props.userPublicDetails && this.props.userPublicDetails.user && /*#__PURE__*/React.createElement(Grid, {\n      columns: 3,\n      divided: true,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 21,\n        columnNumber: 21\n      }\n    }, /*#__PURE__*/React.createElement(Grid.Row, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 22,\n        columnNumber: 25\n      }\n    }, /*#__PURE__*/React.createElement(Grid.Column, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 23,\n        columnNumber: 29\n      }\n    }, /*#__PURE__*/React.createElement(Grid.Row, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 24,\n        columnNumber: 33\n      }\n    }, /*#__PURE__*/React.createElement(Segment, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 25,\n        columnNumber: 37\n      }\n    }, /*#__PURE__*/React.createElement(\"strong\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 26,\n        columnNumber: 41\n      }\n    }, \"Feedback\"), /*#__PURE__*/React.createElement(\"hr\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 27,\n        columnNumber: 41\n      }\n    }), /*#__PURE__*/React.createElement(Icon, {\n      name: \"thumbs up outline\",\n      color: \"green\",\n      size: \"large\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 28,\n        columnNumber: 41\n      }\n    }, feedback && feedback.positiveCount), /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 31,\n        columnNumber: 41\n      }\n    }), /*#__PURE__*/React.createElement(Icon, {\n      name: \"thumbs down outline\",\n      color: \"red\",\n      size: \"large\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 32,\n        columnNumber: 41\n      }\n    }, feedback && feedback.negativeCount)))), /*#__PURE__*/React.createElement(Grid.Column, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 38,\n        columnNumber: 29\n      }\n    }, ratingAsSeller && /*#__PURE__*/React.createElement(Segment, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 41,\n        columnNumber: 37\n      }\n    }, /*#__PURE__*/React.createElement(\"strong\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 42,\n        columnNumber: 41\n      }\n    }, \"Rating As Seller\"), /*#__PURE__*/React.createElement(\"hr\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 43,\n        columnNumber: 41\n      }\n    }), /*#__PURE__*/React.createElement(Grid.Column, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 44,\n        columnNumber: 41\n      }\n    }, \"Communication\", /*#__PURE__*/React.createElement(StarRatings, {\n      rating: ratingAsSeller.communication.sum / ratingAsSeller.communication.count || 0,\n      starRatedColor: \"yellow\",\n      numberOfStars: 5,\n      name: \"rating\",\n      starDimension: \"18px\",\n      starSpacing: \"1px\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 46,\n        columnNumber: 45\n      }\n    }), \" (\", ratingAsSeller.communication.count, \")\", /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 54,\n        columnNumber: 45\n      }\n    }), \"Post Description\", /*#__PURE__*/React.createElement(StarRatings, {\n      rating: ratingAsSeller.postDescription.sum / ratingAsSeller.postDescription.count || 0,\n      starRatedColor: \"yellow\",\n      numberOfStars: 5,\n      name: \"rating\",\n      starDimension: \"18px\",\n      starSpacing: \"1px\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 56,\n        columnNumber: 45\n      }\n    }), \" (\", ratingAsSeller.postDescription.count, \")\", /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 64,\n        columnNumber: 45\n      }\n    }), \"Drop Off Time\", /*#__PURE__*/React.createElement(StarRatings, {\n      rating: ratingAsSeller.dropOffTime.sum / ratingAsSeller.dropOffTime.count || 0,\n      starRatedColor: \"yellow\",\n      numberOfStars: 5,\n      name: \"rating\",\n      starDimension: \"18px\",\n      starSpacing: \"1px\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 66,\n        columnNumber: 45\n      }\n    }), \" (\", ratingAsSeller.dropOffTime.count, \")\"), /*#__PURE__*/React.createElement(Grid.Column, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 75,\n        columnNumber: 41\n      }\n    }))), /*#__PURE__*/React.createElement(Grid.Column, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 80,\n        columnNumber: 29\n      }\n    }, ratingAsBuyer && /*#__PURE__*/React.createElement(Segment, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 83,\n        columnNumber: 37\n      }\n    }, /*#__PURE__*/React.createElement(\"strong\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 84,\n        columnNumber: 41\n      }\n    }, \"Rating As Buyer\"), /*#__PURE__*/React.createElement(\"hr\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 85,\n        columnNumber: 41\n      }\n    }), /*#__PURE__*/React.createElement(Grid.Column, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 86,\n        columnNumber: 41\n      }\n    }, \"Pick Up Time\", /*#__PURE__*/React.createElement(StarRatings, {\n      rating: ratingAsBuyer.pickUpTime.sum / ratingAsBuyer.pickUpTime.count || 0,\n      starRatedColor: \"yellow\",\n      numberOfStars: 5,\n      name: \"rating\",\n      starDimension: \"18px\",\n      starSpacing: \"1px\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 88,\n        columnNumber: 45\n      }\n    }), \" (\", ratingAsBuyer.pickUpTime.count, \")\"), /*#__PURE__*/React.createElement(Grid.Column, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 97,\n        columnNumber: 41\n      }\n    }))))));\n  }\n\n}\n\nfunction mapState(state) {\n  const {\n    userPublicDetails\n  } = state.users;\n  return {\n    userPublicDetails\n  };\n}\n\nconst connectedFeedBack = connect(mapState)(FeedBack);\nexport { connectedFeedBack as FeedBack };","map":{"version":3,"sources":["/media/norhan/New Volume/work/React-projects/test-redux/src/containers/UserPage/Feedback.jsx"],"names":["React","Component","connect","Segment","Grid","Icon","StarRatings","FeedBack","state","render","feedback","ratingAsBuyer","ratingAsSeller","props","userPublicDetails","user","positiveCount","negativeCount","communication","sum","count","postDescription","dropOffTime","pickUpTime","mapState","users","connectedFeedBack"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,SAASC,OAAT,QAAwB,aAAxB;AACA,SAASC,OAAT,EAAkBC,IAAlB,EAAwBC,IAAxB,QAAoC,mBAApC;AACA,OAAOC,WAAP,MAAwB,oBAAxB;;AAEA,MAAMC,QAAN,SAAuBN,SAAvB,CAAiC;AAAA;AAAA;AAAA,SAC7BO,KAD6B,GACrB,EADqB;AAAA;;AAE7BC,EAAAA,MAAM,GAAG;AACL,QAAIC,QAAJ;AACA,QAAIC,aAAJ;AACA,QAAIC,cAAJ;;AACA,QAAI,KAAKC,KAAL,CAAWC,iBAAX,IAAgC,KAAKD,KAAL,CAAWC,iBAAX,CAA6BC,IAAjE,EAAsE;AAClEL,MAAAA,QAAQ,GAAG,KAAKG,KAAL,CAAWC,iBAAX,CAA6BC,IAA7B,CAAkCL,QAA7C;AACAE,MAAAA,cAAc,GAAG,KAAKC,KAAL,CAAWC,iBAAX,CAA6BC,IAA7B,CAAkCH,cAAnD;AACAD,MAAAA,aAAa,GAAG,KAAKE,KAAL,CAAWC,iBAAX,CAA6BC,IAA7B,CAAkCJ,aAAlD;AACH;;AACD,wBACI,oBAAC,OAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAEQ,KAAKE,KAAL,CAAWC,iBAAX,IAAgC,KAAKD,KAAL,CAAWC,iBAAX,CAA6BC,IAA7D,iBACA,oBAAC,IAAD;AAAM,MAAA,OAAO,EAAE,CAAf;AAAkB,MAAA,OAAO,MAAzB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACI,oBAAC,IAAD,CAAM,GAAN;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACI,oBAAC,IAAD,CAAM,MAAN;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACI,oBAAC,IAAD,CAAM,GAAN;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACI,oBAAC,OAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBADJ,eAEI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAFJ,eAGI,oBAAC,IAAD;AAAM,MAAA,IAAI,EAAC,mBAAX;AAA+B,MAAA,KAAK,EAAC,OAArC;AAA6C,MAAA,IAAI,EAAC,OAAlD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACML,QAAQ,IAAIA,QAAQ,CAACM,aAD3B,CAHJ,eAMI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MANJ,eAOI,oBAAC,IAAD;AAAM,MAAA,IAAI,EAAC,qBAAX;AAAiC,MAAA,KAAK,EAAC,KAAvC;AAA6C,MAAA,IAAI,EAAC,OAAlD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACMN,QAAQ,IAAIA,QAAQ,CAACO,aAD3B,CAPJ,CADJ,CADJ,CADJ,eAgBI,oBAAC,IAAD,CAAM,MAAN;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAEQL,cAAc,iBACd,oBAAC,OAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,0BADJ,eAEI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAFJ,eAGI,oBAAC,IAAD,CAAM,MAAN;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,qCAEI,oBAAC,WAAD;AACI,MAAA,MAAM,EAAEA,cAAc,CAACM,aAAf,CAA6BC,GAA7B,GAAmCP,cAAc,CAACM,aAAf,CAA6BE,KAAhE,IAAyE,CADrF;AAEI,MAAA,cAAc,EAAC,QAFnB;AAGI,MAAA,aAAa,EAAE,CAHnB;AAII,MAAA,IAAI,EAAC,QAJT;AAKI,MAAA,aAAa,EAAC,MALlB;AAMI,MAAA,WAAW,EAAC,KANhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAFJ,QASSR,cAAc,CAACM,aAAf,CAA6BE,KATtC,oBAUI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAVJ,mCAYI,oBAAC,WAAD;AACI,MAAA,MAAM,EAAER,cAAc,CAACS,eAAf,CAA+BF,GAA/B,GAAqCP,cAAc,CAACS,eAAf,CAA+BD,KAApE,IAA6E,CADzF;AAEI,MAAA,cAAc,EAAC,QAFnB;AAGI,MAAA,aAAa,EAAE,CAHnB;AAII,MAAA,IAAI,EAAC,QAJT;AAKI,MAAA,aAAa,EAAC,MALlB;AAMI,MAAA,WAAW,EAAC,KANhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAZJ,QAmBSR,cAAc,CAACS,eAAf,CAA+BD,KAnBxC,oBAoBI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MApBJ,gCAsBI,oBAAC,WAAD;AACI,MAAA,MAAM,EAAER,cAAc,CAACU,WAAf,CAA2BH,GAA3B,GAAiCP,cAAc,CAACU,WAAf,CAA2BF,KAA5D,IAAqE,CADjF;AAEI,MAAA,cAAc,EAAC,QAFnB;AAGI,MAAA,aAAa,EAAE,CAHnB;AAII,MAAA,IAAI,EAAC,QAJT;AAKI,MAAA,aAAa,EAAC,MALlB;AAMI,MAAA,WAAW,EAAC,KANhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAtBJ,QA6BSR,cAAc,CAACU,WAAf,CAA2BF,KA7BpC,MAHJ,eAkCI,oBAAC,IAAD,CAAM,MAAN;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAlCJ,CAHR,CAhBJ,eA0DI,oBAAC,IAAD,CAAM,MAAN;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAEQT,aAAa,iBACb,oBAAC,OAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,yBADJ,eAEI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAFJ,eAGI,oBAAC,IAAD,CAAM,MAAN;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oCAEI,oBAAC,WAAD;AACI,MAAA,MAAM,EAAGA,aAAa,CAACY,UAAd,CAAyBJ,GAAzB,GAA+BR,aAAa,CAACY,UAAd,CAAyBH,KAAzD,IAAmE,CAD/E;AAEI,MAAA,cAAc,EAAC,QAFnB;AAGI,MAAA,aAAa,EAAE,CAHnB;AAII,MAAA,IAAI,EAAC,QAJT;AAKI,MAAA,aAAa,EAAC,MALlB;AAMI,MAAA,WAAW,EAAC,KANhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAFJ,QASST,aAAa,CAACY,UAAd,CAAyBH,KATlC,MAHJ,eAcI,oBAAC,IAAD,CAAM,MAAN;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAdJ,CAHR,CA1DJ,CADJ,CAHR,CADJ;AA0FH;;AArG4B;;AAwGjC,SAASI,QAAT,CAAkBhB,KAAlB,EAAyB;AACrB,QAAM;AAAEM,IAAAA;AAAF,MAAwBN,KAAK,CAACiB,KAApC;AACA,SAAO;AAAEX,IAAAA;AAAF,GAAP;AACH;;AAED,MAAMY,iBAAiB,GAAGxB,OAAO,CAACsB,QAAD,CAAP,CAAkBjB,QAAlB,CAA1B;AAEA,SAASmB,iBAAiB,IAAInB,QAA9B","sourcesContent":["import React, { Component } from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { Segment, Grid, Icon } from 'semantic-ui-react';\r\nimport StarRatings from 'react-star-ratings';\r\n\r\nclass FeedBack extends Component {\r\n    state = {};\r\n    render() {\r\n        let feedback;\r\n        let ratingAsBuyer;\r\n        let ratingAsSeller;\r\n        if (this.props.userPublicDetails && this.props.userPublicDetails.user){\r\n            feedback = this.props.userPublicDetails.user.feedback;\r\n            ratingAsSeller = this.props.userPublicDetails.user.ratingAsSeller;\r\n            ratingAsBuyer = this.props.userPublicDetails.user.ratingAsBuyer;\r\n        }\r\n        return (\r\n            <Segment>\r\n                {\r\n                    this.props.userPublicDetails && this.props.userPublicDetails.user &&\r\n                    <Grid columns={3} divided>\r\n                        <Grid.Row>\r\n                            <Grid.Column>\r\n                                <Grid.Row>\r\n                                    <Segment>\r\n                                        <strong>Feedback</strong>\r\n                                        <hr />\r\n                                        <Icon name='thumbs up outline' color='green' size='large' >\r\n                                            { feedback && feedback.positiveCount }\r\n                                        </Icon>\r\n                                        <br />\r\n                                        <Icon name='thumbs down outline' color='red' size='large'>\r\n                                            { feedback && feedback.negativeCount }\r\n                                        </Icon>\r\n                                    </Segment>\r\n                                </Grid.Row>\r\n                            </Grid.Column>\r\n                            <Grid.Column>\r\n                                {\r\n                                    ratingAsSeller &&\r\n                                    <Segment>\r\n                                        <strong>Rating As Seller</strong>\r\n                                        <hr />\r\n                                        <Grid.Column>\r\n                                            Communication\r\n                                            <StarRatings\r\n                                                rating={ratingAsSeller.communication.sum / ratingAsSeller.communication.count || 0}\r\n                                                starRatedColor='yellow'\r\n                                                numberOfStars={5}\r\n                                                name='rating'\r\n                                                starDimension='18px'\r\n                                                starSpacing='1px'\r\n                                            /> ({ratingAsSeller.communication.count})\r\n                                            <br />\r\n                                            Post Description\r\n                                            <StarRatings\r\n                                                rating={ratingAsSeller.postDescription.sum / ratingAsSeller.postDescription.count || 0}\r\n                                                starRatedColor='yellow'\r\n                                                numberOfStars={5}\r\n                                                name='rating'\r\n                                                starDimension='18px'\r\n                                                starSpacing='1px'\r\n                                            /> ({ratingAsSeller.postDescription.count})\r\n                                            <br />\r\n                                            Drop Off Time \r\n                                            <StarRatings\r\n                                                rating={ratingAsSeller.dropOffTime.sum / ratingAsSeller.dropOffTime.count || 0}\r\n                                                starRatedColor='yellow'\r\n                                                numberOfStars={5}\r\n                                                name='rating'\r\n                                                starDimension='18px'\r\n                                                starSpacing='1px'\r\n                                            /> ({ratingAsSeller.dropOffTime.count})\r\n                                        </Grid.Column>\r\n                                        <Grid.Column>\r\n                                        </Grid.Column>\r\n                                    </Segment>                        \r\n                                }\r\n                            </Grid.Column>\r\n                            <Grid.Column>\r\n                                {\r\n                                    ratingAsBuyer &&\r\n                                    <Segment>\r\n                                        <strong>Rating As Buyer</strong>\r\n                                        <hr />\r\n                                        <Grid.Column>\r\n                                            Pick Up Time\r\n                                            <StarRatings\r\n                                                rating={(ratingAsBuyer.pickUpTime.sum / ratingAsBuyer.pickUpTime.count) || 0}\r\n                                                starRatedColor='yellow'\r\n                                                numberOfStars={5}\r\n                                                name='rating'\r\n                                                starDimension='18px'\r\n                                                starSpacing='1px'\r\n                                            /> ({ratingAsBuyer.pickUpTime.count})\r\n                                        </Grid.Column>\r\n                                        <Grid.Column>\r\n                                        </Grid.Column>\r\n                                    </Segment>\r\n                                }\r\n                            </Grid.Column>\r\n                        </Grid.Row>\r\n                    </Grid>\r\n                }\r\n            </Segment>\r\n        );\r\n    }\r\n}\r\n\r\nfunction mapState(state) {\r\n    const { userPublicDetails } = state.users;\r\n    return { userPublicDetails };\r\n}\r\n\r\nconst connectedFeedBack = connect(mapState)(FeedBack);\r\n\r\nexport { connectedFeedBack as FeedBack };\r\n"]},"metadata":{},"sourceType":"module"}