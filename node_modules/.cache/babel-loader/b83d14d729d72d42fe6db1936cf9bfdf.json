{"ast":null,"code":"var _jsxFileName = \"/media/norhan/New Volume/work/React-projects/test-redux/src/containers/resetPassword/forgetPassword.jsx\";\nimport { Button, Form, Grid, Header, Message, Segment } from \"semantic-ui-react\";\nimport React, { Component } from \"react\";\nimport { connect } from \"react-redux\";\nimport { passwordActions, validatorActions } from \"../../actions\";\n\nclass ForgetPassword extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      email: \"\"\n    };\n    this.schema = {\n      required: [\"email\"],\n      properties: {\n        email: {\n          title: \"Email\",\n          type: \"string\",\n          format: \"email\",\n          minLength: 5,\n          maxLength: 255\n        }\n      }\n    };\n\n    this.handleChange = (e, {\n      name,\n      value\n    }) => {\n      this.props.validateInput(this.schema, name, value);\n      this.setState({\n        [name]: value\n      }); //console.log(name,value);\n    };\n\n    this.handleSubmit = async e => {\n      e.preventDefault();\n      const {\n        email\n      } = this.state;\n      console.log(email);\n      await this.props.forgetPassword(email);\n    };\n  }\n\n  render() {\n    const {\n      email\n    } = this.state;\n    const {\n      alert,\n      errors\n    } = this.props;\n    return /*#__PURE__*/React.createElement(Grid, {\n      textAlign: \"center\",\n      style: {\n        height: \"100vh\"\n      },\n      verticalAlign: \"middle\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 45,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(Grid.Column, {\n      style: {\n        maxWidth: 450\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 50,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(Header, {\n      as: \"h2\",\n      color: \"teal\",\n      textAlign: \"center\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 51,\n        columnNumber: 11\n      }\n    }, \"Reset Password\"), /*#__PURE__*/React.createElement(Form, {\n      size: \"large\",\n      onSubmit: this.handleSubmit,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 54,\n        columnNumber: 11\n      }\n    }, /*#__PURE__*/React.createElement(Segment, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 55,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(Form.Input, {\n      name: \"email\",\n      size: \"large\",\n      icon: \"mail\",\n      iconPosition: \"left\",\n      placeholder: \"john.adams@email.com\",\n      value: email,\n      onChange: this.handleChange,\n      error: errors && errors.email,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 56,\n        columnNumber: 15\n      }\n    }), /*#__PURE__*/React.createElement(Button, {\n      color: \"teal\",\n      fluid: true,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 67,\n        columnNumber: 15\n      }\n    }, \"Send Mail\"))), /*#__PURE__*/React.createElement(Message, {\n      error: alert.type === \"error\",\n      success: alert.type === \"ALERT_SUCCESS\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 72,\n        columnNumber: 11\n      }\n    }, alert.content)));\n  }\n\n}\n\nexport default ForgetPassword;\n\nfunction mapState(state) {\n  const {\n    alert\n  } = state;\n  const {\n    valid,\n    errors\n  } = state.validation;\n  return {\n    alert,\n    valid,\n    errors\n  };\n}\n\nconst actionCreators = {\n  forgetPassword: passwordActions.forgetPassword,\n  validateInput: validatorActions.validateInput,\n  validateForm: validatorActions.validateForm\n};\nconst connectedForgetPassword = connect(mapState, actionCreators)(ForgetPassword);\nexport { connectedForgetPassword as ForgetPasswordPage };","map":{"version":3,"sources":["/media/norhan/New Volume/work/React-projects/test-redux/src/containers/resetPassword/forgetPassword.jsx"],"names":["Button","Form","Grid","Header","Message","Segment","React","Component","connect","passwordActions","validatorActions","ForgetPassword","state","email","schema","required","properties","title","type","format","minLength","maxLength","handleChange","e","name","value","props","validateInput","setState","handleSubmit","preventDefault","console","log","forgetPassword","render","alert","errors","height","maxWidth","content","mapState","valid","validation","actionCreators","validateForm","connectedForgetPassword","ForgetPasswordPage"],"mappings":"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","sourcesContent":["import {\r\n  Button,\r\n  Form,\r\n  Grid,\r\n  Header,\r\n  Message,\r\n  Segment,\r\n} from \"semantic-ui-react\";\r\nimport React, { Component } from \"react\";\r\nimport { connect } from \"react-redux\";\r\nimport { passwordActions, validatorActions } from \"../../actions\";\r\n\r\nclass ForgetPassword extends Component {\r\n  state = { email: \"\" };\r\n  schema = {\r\n    required: [\"email\"],\r\n    properties: {\r\n      email: {\r\n        title: \"Email\",\r\n        type: \"string\",\r\n        format: \"email\",\r\n        minLength: 5,\r\n        maxLength: 255,\r\n      },\r\n    },\r\n  };\r\n\r\n  handleChange = (e, { name, value }) => {\r\n    this.props.validateInput(this.schema, name, value);\r\n    this.setState({ [name]: value });\r\n    //console.log(name,value);\r\n  };\r\n\r\n  handleSubmit = async (e) => {\r\n    e.preventDefault();\r\n    const { email } = this.state;\r\n    console.log(email);\r\n\r\n    await this.props.forgetPassword(email);\r\n  };\r\n  render() {\r\n    const { email } = this.state;\r\n    const { alert, errors } = this.props;\r\n    return (\r\n      <Grid\r\n        textAlign=\"center\"\r\n        style={{ height: \"100vh\" }}\r\n        verticalAlign=\"middle\"\r\n      >\r\n        <Grid.Column style={{ maxWidth: 450 }}>\r\n          <Header as=\"h2\" color=\"teal\" textAlign=\"center\">\r\n            Reset Password\r\n          </Header>\r\n          <Form size=\"large\" onSubmit={this.handleSubmit}>\r\n            <Segment>\r\n              <Form.Input\r\n                name=\"email\"\r\n                size=\"large\"\r\n                icon=\"mail\"\r\n                iconPosition=\"left\"\r\n                placeholder=\"john.adams@email.com\"\r\n                value={email}\r\n                onChange={this.handleChange}\r\n                error={errors && errors.email}\r\n              />\r\n\r\n              <Button color=\"teal\" fluid>\r\n                Send Mail\r\n              </Button>\r\n            </Segment>\r\n          </Form>\r\n          <Message\r\n            error={alert.type === \"error\"}\r\n            success={alert.type === \"ALERT_SUCCESS\"}\r\n          >\r\n            {alert.content}\r\n          </Message>\r\n        </Grid.Column>\r\n      </Grid>\r\n    );\r\n  }\r\n}\r\n\r\nexport default ForgetPassword;\r\n\r\nfunction mapState(state) {\r\n  const { alert } = state;\r\n  const { valid, errors } = state.validation;\r\n\r\n  return { alert, valid, errors };\r\n}\r\n\r\nconst actionCreators = {\r\n  forgetPassword: passwordActions.forgetPassword,\r\n  validateInput: validatorActions.validateInput,\r\n  validateForm: validatorActions.validateForm,\r\n};\r\n\r\nconst connectedForgetPassword = connect(\r\n  mapState,\r\n  actionCreators\r\n)(ForgetPassword);\r\nexport { connectedForgetPassword as ForgetPasswordPage };\r\n"]},"metadata":{},"sourceType":"module"}