{"ast":null,"code":"var _jsxFileName = \"/media/norhan/New Volume/work/React-projects/test-redux/src/containers/ServicePoint/SelectSPAndTimeSlot.jsx\";\nimport React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport { Dropdown, Form, Checkbox, Select } from 'semantic-ui-react';\nimport { DateInput } from 'semantic-ui-calendar-react';\nimport MapComponent from '../../components/Map/MapComponent';\nimport { servicePointActions } from '../../actions';\n\nclass SelectSPAndTimeSlot extends Component {\n  constructor(...args) {\n    super(...args);\n\n    this.getAvalibleUnavalibleDaysOfTheWeek = servicePointId => {\n      const workingDays = [];\n      const offDays = [];\n      const {\n        servicePoints\n      } = this.props;\n\n      for (let i = 0; i < servicePoints.length; i++) {\n        if (servicePoints[i]._id === servicePointId) {\n          for (let j = 0; j < servicePoints[i].workingHours.length; j++) {\n            if (!servicePoints[i].workingHours[j].dayOff) {\n              workingDays.push(j);\n            } else {\n              offDays.push(j);\n            }\n          }\n\n          break;\n        }\n      }\n\n      return {\n        workingDays,\n        offDays\n      };\n    };\n\n    this.getListOfAvalibleTimeSlots = (selectedServicePoint, selectedDateString) => {\n      const avalibleTimeSlots = [];\n      let selectedDate = new Date(selectedDateString);\n      let {\n        from,\n        to\n      } = this.getAvalibleWorkingHoursOfDay(selectedServicePoint, selectedDate.getDay());\n\n      if (from && to) {\n        const startTime = from.split(':');\n        const startHour = parseInt(startTime[0]);\n        const EndTime = to.split(':');\n        const endHour = parseInt(EndTime[0]);\n\n        for (let i = startHour; i < endHour - 1; i++) {\n          avalibleTimeSlots.push({\n            key: i,\n            value: i,\n            text: i + ':' + startTime[1] + ' - ' + (i + 1) + ':' + startTime[1]\n          });\n        }\n\n        avalibleTimeSlots.push({\n          key: endHour - 1,\n          value: endHour - 1,\n          text: endHour - 1 + ':' + startTime[1] + ' - ' + endHour + ':' + EndTime[1]\n        });\n      }\n\n      return avalibleTimeSlots;\n    };\n\n    this.SelectedServicePointChanged = (e, {\n      value\n    }) => {\n      this.props.selectedServicePointChanged(value);\n    };\n\n    this.selectedDateChanged = (e, {\n      value\n    }) => {\n      this.props.selectedArrivalDateChanged(value);\n    };\n\n    this.timeSlotChanged = (e, {\n      value\n    }) => {\n      this.props.selectedArrivalTimeChanged(value);\n    };\n\n    this.checkSPSelectionChanged = (e, {\n      value\n    }) => {\n      this.props.nearestServicePointChoiceChanged(Boolean(value === 'NearestSPChecked'));\n    };\n\n    this.getLocationOfServicePoint = servicePointId => {\n      const {\n        servicePoints\n      } = this.props;\n\n      for (let i = 0; i < servicePoints.length; i++) {\n        if (servicePoints[i]._id === servicePointId) {\n          return servicePoints[i].location;\n        }\n      }\n\n      return {\n        lat: 0,\n        lon: 0\n      };\n    };\n\n    this.getAvalibleWorkingHoursOfDay = (servicePointId, dayIndex) => {\n      const {\n        servicePoints\n      } = this.props;\n\n      for (let i = 0; i < servicePoints.length; i++) {\n        if (servicePoints[i]._id === servicePointId) {\n          let {\n            from,\n            to\n          } = servicePoints[i].workingHours[dayIndex];\n          return {\n            from,\n            to\n          };\n        }\n      }\n\n      return {\n        from: undefined,\n        to: undefined\n      };\n    };\n\n    this.getDateOf = (dayOfTheWeek, weekOffset) => {\n      var now = new Date();\n      now.setDate(now.getDate() + (dayOfTheWeek + (7 - now.getDay())) % 7 + 7 * weekOffset);\n      return now;\n    };\n\n    this.getListOfDisabled = offDays => {\n      const diapledDates = [];\n\n      for (let i = 0; i < offDays.length; i++) {\n        diapledDates.push(this.getDateOf(offDays[i], 0));\n        diapledDates.push(this.getDateOf(offDays[i], 1));\n        diapledDates.push(this.getDateOf(offDays[i], 2));\n        diapledDates.push(this.getDateOf(offDays[i], 3));\n        diapledDates.push(this.getDateOf(offDays[i], 4));\n      }\n\n      return diapledDates;\n    };\n  }\n\n  /*-------------------------- Render -------------------------- */\n  render() {\n    const {\n      servicePoints,\n      nearestServicePointChecked,\n      servicePointId,\n      arrivalDate,\n      arrivalTime\n    } = this.props;\n    const servicePointOptions = [];\n\n    for (let i = 0; i < servicePoints.length; i++) {\n      servicePointOptions.push({\n        key: servicePoints[i]._id,\n        value: servicePoints[i]._id,\n        text: servicePoints[i].name,\n        location: servicePoints[i].location\n      });\n    }\n\n    const servicePointLocation = this.getLocationOfServicePoint(this.props.servicePointId);\n    const {\n      offDays\n    } = this.getAvalibleUnavalibleDaysOfTheWeek(this.props.servicePointId);\n    return /*#__PURE__*/React.createElement(Form, {\n      style: {\n        padding: '1em 4em'\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 156,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(Form.Field, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 157,\n        columnNumber: 17\n      }\n    }, /*#__PURE__*/React.createElement(\"label\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 158,\n        columnNumber: 21\n      }\n    }, \"Please Select Service Point :\"), /*#__PURE__*/React.createElement(Form.Group, {\n      grouped: true,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 159,\n        columnNumber: 21\n      }\n    }, /*#__PURE__*/React.createElement(Form.Field, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 160,\n        columnNumber: 25\n      }\n    }, /*#__PURE__*/React.createElement(Checkbox, {\n      radio: true,\n      label: \"Nearest Service Point\",\n      name: \"checkSP\",\n      value: \"NearestSPChecked\",\n      checked: nearestServicePointChecked,\n      onChange: this.checkSPSelectionChanged,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 161,\n        columnNumber: 29\n      }\n    })), /*#__PURE__*/React.createElement(Form.Field, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 172,\n        columnNumber: 25\n      }\n    }, /*#__PURE__*/React.createElement(Checkbox, {\n      radio: true,\n      label: \"Other\",\n      name: \"checkSP\",\n      value: \"OtherChecked\",\n      checked: !nearestServicePointChecked,\n      onChange: this.checkSPSelectionChanged,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 173,\n        columnNumber: 29\n      }\n    })), /*#__PURE__*/React.createElement(Form.Field, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 184,\n        columnNumber: 25\n      }\n    }, /*#__PURE__*/React.createElement(Dropdown, {\n      onChange: this.SelectedServicePointChanged,\n      disabled: nearestServicePointChecked,\n      placeholder: \"State\",\n      search: true,\n      selection: true,\n      options: servicePointOptions,\n      value: servicePointId,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 185,\n        columnNumber: 29\n      }\n    })))), /*#__PURE__*/React.createElement(Form.Field, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 199,\n        columnNumber: 17\n      }\n    }, /*#__PURE__*/React.createElement(\"label\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 200,\n        columnNumber: 21\n      }\n    }, \"Please Select Date :\"), /*#__PURE__*/React.createElement(DateInput, {\n      name: \"date\",\n      size: \"large\",\n      iconPosition: \"left\",\n      dateFormat: 'Y-MM-DD',\n      onChange: this.selectedDateChanged,\n      minDate: new Date().toJSON().slice(0, 10) // maxDate={new Date(new Date().getDate() + 30)}\n      ,\n      disable: this.getListOfDisabled(offDays),\n      value: arrivalDate,\n      closable: true,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 201,\n        columnNumber: 21\n      }\n    })), /*#__PURE__*/React.createElement(Form.Field, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 214,\n        columnNumber: 17\n      }\n    }, /*#__PURE__*/React.createElement(\"label\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 215,\n        columnNumber: 21\n      }\n    }, \"Please Select Time Slot :\"), /*#__PURE__*/React.createElement(Select, {\n      options: arrivalDate ? this.getListOfAvalibleTimeSlots(servicePointId, arrivalDate) : [],\n      selection: true,\n      onChange: this.timeSlotChanged,\n      value: arrivalTime,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 216,\n        columnNumber: 21\n      }\n    })), /*#__PURE__*/React.createElement(Form.Field, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 230,\n        columnNumber: 17\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"mapouter\",\n      style: {\n        height: '300px',\n        width: '300px'\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 231,\n        columnNumber: 21\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"gmap_canvas\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 235,\n        columnNumber: 25\n      }\n    }, /*#__PURE__*/React.createElement(MapComponent, {\n      location: servicePointLocation,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 236,\n        columnNumber: 29\n      }\n    })))));\n  }\n\n}\n\nfunction mapState(state) {\n  const {\n    servicePoints,\n    nearestServicePointChecked,\n    servicePointId,\n    arrivalDate,\n    arrivalTime\n  } = state.servicePoint;\n  return {\n    servicePoints,\n    nearestServicePointChecked,\n    servicePointId,\n    arrivalDate,\n    arrivalTime\n  };\n}\n\nconst actionCreators = {\n  selectedServicePointChanged: servicePointActions.selectedServicePointChanged,\n  nearestServicePointChoiceChanged: servicePointActions.nearestServicePointChoiceChanged,\n  selectedArrivalDateChanged: servicePointActions.selectedArrivalDateChanged,\n  selectedArrivalTimeChanged: servicePointActions.selectedArrivalTimeChanged\n};\nconst connectedSelectSPAndTimeSlot = connect(mapState, actionCreators)(SelectSPAndTimeSlot);\nexport { connectedSelectSPAndTimeSlot as SelectSPAndTimeSlot };","map":{"version":3,"sources":["/media/norhan/New Volume/work/React-projects/test-redux/src/containers/ServicePoint/SelectSPAndTimeSlot.jsx"],"names":["React","Component","connect","Dropdown","Form","Checkbox","Select","DateInput","MapComponent","servicePointActions","SelectSPAndTimeSlot","getAvalibleUnavalibleDaysOfTheWeek","servicePointId","workingDays","offDays","servicePoints","props","i","length","_id","j","workingHours","dayOff","push","getListOfAvalibleTimeSlots","selectedServicePoint","selectedDateString","avalibleTimeSlots","selectedDate","Date","from","to","getAvalibleWorkingHoursOfDay","getDay","startTime","split","startHour","parseInt","EndTime","endHour","key","value","text","SelectedServicePointChanged","e","selectedServicePointChanged","selectedDateChanged","selectedArrivalDateChanged","timeSlotChanged","selectedArrivalTimeChanged","checkSPSelectionChanged","nearestServicePointChoiceChanged","Boolean","getLocationOfServicePoint","location","lat","lon","dayIndex","undefined","getDateOf","dayOfTheWeek","weekOffset","now","setDate","getDate","getListOfDisabled","diapledDates","render","nearestServicePointChecked","arrivalDate","arrivalTime","servicePointOptions","name","servicePointLocation","padding","toJSON","slice","height","width","mapState","state","servicePoint","actionCreators","connectedSelectSPAndTimeSlot"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { Dropdown, Form, Checkbox, Select } from 'semantic-ui-react';\r\nimport { DateInput } from 'semantic-ui-calendar-react';\r\nimport MapComponent from '../../components/Map/MapComponent';\r\nimport { servicePointActions } from '../../actions';\r\n\r\nclass SelectSPAndTimeSlot extends Component {\r\n    getAvalibleUnavalibleDaysOfTheWeek = (servicePointId)=> {\r\n        const workingDays = [];\r\n        const offDays = [];\r\n        const { servicePoints } = this.props;\r\n        for (let i = 0; i < servicePoints.length; i++) {\r\n            if (servicePoints[i]._id === servicePointId) {\r\n                for (let j = 0; j < servicePoints[i].workingHours.length; j++) {\r\n                    if (!servicePoints[i].workingHours[j].dayOff) {\r\n                        workingDays.push(j);\r\n                    } else {\r\n                        offDays.push(j);\r\n                    }\r\n                }\r\n                break;\r\n            }\r\n        }\r\n        return { workingDays, offDays };\r\n    };\r\n    \r\n getListOfAvalibleTimeSlots=(selectedServicePoint, selectedDateString)=> {\r\n    const avalibleTimeSlots = [];\r\n    let selectedDate = new Date(selectedDateString);\r\n\r\n    let { from, to } = this.getAvalibleWorkingHoursOfDay(\r\n        selectedServicePoint,\r\n        selectedDate.getDay(),\r\n    );\r\n    if (from && to) {\r\n        const startTime = from.split(':');\r\n        const startHour = parseInt(startTime[0]);\r\n        const EndTime = to.split(':');\r\n        const endHour = parseInt(EndTime[0]);\r\n        for (let i = startHour; i < endHour - 1; i++) {\r\n            avalibleTimeSlots.push({\r\n                key: i,\r\n                value: i,\r\n                text:\r\n                    i +\r\n                    ':' +\r\n                    startTime[1] +\r\n                    ' - ' +\r\n                    (i + 1) +\r\n                    ':' +\r\n                    startTime[1],\r\n            });\r\n        }\r\n        avalibleTimeSlots.push({\r\n            key: endHour - 1,\r\n            value: endHour - 1,\r\n            text:\r\n                endHour -\r\n                1 +\r\n                ':' +\r\n                startTime[1] +\r\n                ' - ' +\r\n                endHour +\r\n                ':' +\r\n                EndTime[1],\r\n        });\r\n    }\r\n    return avalibleTimeSlots;\r\n};\r\n    /*----------------------DATA ACTIONS----------------------- */\r\n    SelectedServicePointChanged = (e, { value }) => {\r\n        this.props.selectedServicePointChanged(value);\r\n    };\r\n\r\n    selectedDateChanged = (e, { value }) => {\r\n        this.props.selectedArrivalDateChanged(value);\r\n    };\r\n\r\n    timeSlotChanged = (e, { value }) => {\r\n        this.props.selectedArrivalTimeChanged(value);\r\n    };\r\n\r\n    checkSPSelectionChanged = (e, { value }) => {\r\n        this.props.nearestServicePointChoiceChanged(\r\n            Boolean(value === 'NearestSPChecked'),\r\n        );\r\n    };\r\n    /*----------------------Service functions----------------------- */\r\n    getLocationOfServicePoint = (servicePointId) => {\r\n        const { servicePoints } = this.props;\r\n        for (let i = 0; i < servicePoints.length; i++) {\r\n            if (servicePoints[i]._id === servicePointId) {\r\n                return servicePoints[i].location;\r\n            }\r\n        }\r\n        return { lat: 0, lon: 0 };\r\n    };\r\n\r\n\r\n    getAvalibleWorkingHoursOfDay = (servicePointId, dayIndex) => {\r\n        const { servicePoints } = this.props;\r\n        for (let i = 0; i < servicePoints.length; i++) {\r\n            if (servicePoints[i]._id === servicePointId) {\r\n                let { from, to } = servicePoints[i].workingHours[dayIndex];\r\n                return { from, to };\r\n            }\r\n        }\r\n        return { from: undefined, to: undefined };\r\n    };\r\n\r\n    getDateOf = (dayOfTheWeek, weekOffset) => {\r\n        var now = new Date();\r\n        now.setDate(\r\n            now.getDate() +\r\n            ((dayOfTheWeek + (7 - now.getDay())) % 7) +\r\n            7 * weekOffset,\r\n        );\r\n        return now;\r\n    };\r\n\r\n    getListOfDisabled = (offDays) => {\r\n        const diapledDates = [];\r\n        for (let i = 0; i < offDays.length; i++) {\r\n            diapledDates.push(this.getDateOf(offDays[i], 0));\r\n            diapledDates.push(this.getDateOf(offDays[i], 1));\r\n            diapledDates.push(this.getDateOf(offDays[i], 2));\r\n            diapledDates.push(this.getDateOf(offDays[i], 3));\r\n            diapledDates.push(this.getDateOf(offDays[i], 4));\r\n        }\r\n        return diapledDates;\r\n    };\r\n\r\n\r\n\r\n    /*-------------------------- Render -------------------------- */\r\n    render() {\r\n        const { servicePoints, nearestServicePointChecked, servicePointId, arrivalDate, arrivalTime } = this.props;\r\n        const servicePointOptions = [];\r\n        for (let i = 0; i < servicePoints.length; i++) {\r\n            servicePointOptions.push({\r\n                key: servicePoints[i]._id,\r\n                value: servicePoints[i]._id,\r\n                text: servicePoints[i].name,\r\n                location: servicePoints[i].location,\r\n            });\r\n        }\r\n        const servicePointLocation = this.getLocationOfServicePoint(\r\n            this.props.servicePointId,\r\n        );\r\n        const { offDays } = this.getAvalibleUnavalibleDaysOfTheWeek(\r\n            this.props.servicePointId,\r\n        );\r\n\r\n        return (\r\n            <Form style={{ padding: '1em 4em' }}>\r\n                <Form.Field>\r\n                    <label>Please Select Service Point :</label>\r\n                    <Form.Group grouped>\r\n                        <Form.Field>\r\n                            <Checkbox\r\n                                radio\r\n                                label='Nearest Service Point'\r\n                                name='checkSP'\r\n                                value='NearestSPChecked'\r\n                                checked={\r\n                                    nearestServicePointChecked\r\n                                }\r\n                                onChange={this.checkSPSelectionChanged}\r\n                            ></Checkbox>\r\n                        </Form.Field>\r\n                        <Form.Field>\r\n                            <Checkbox\r\n                                radio\r\n                                label='Other'\r\n                                name='checkSP'\r\n                                value='OtherChecked'\r\n                                checked={\r\n                                    !nearestServicePointChecked\r\n                                }\r\n                                onChange={this.checkSPSelectionChanged}\r\n                            ></Checkbox>\r\n                        </Form.Field>\r\n                        <Form.Field>\r\n                            <Dropdown\r\n                                onChange={this.SelectedServicePointChanged}\r\n                                disabled={\r\n                                    nearestServicePointChecked\r\n                                }\r\n                                placeholder='State'\r\n                                search\r\n                                selection\r\n                                options={servicePointOptions}\r\n                                value={servicePointId}\r\n                            />\r\n                        </Form.Field>\r\n                    </Form.Group>\r\n                </Form.Field>\r\n                <Form.Field>\r\n                    <label>Please Select Date :</label>\r\n                    <DateInput\r\n                        name='date'\r\n                        size='large'\r\n                        iconPosition='left'\r\n                        dateFormat={'Y-MM-DD'}\r\n                        onChange={this.selectedDateChanged}\r\n                        minDate={new Date().toJSON().slice(0, 10)}\r\n                        // maxDate={new Date(new Date().getDate() + 30)}\r\n                        disable={this.getListOfDisabled(offDays)}\r\n                        value={arrivalDate}\r\n                        closable\r\n                    ></DateInput>\r\n                </Form.Field>\r\n                <Form.Field>\r\n                    <label>Please Select Time Slot :</label>\r\n                    <Select\r\n                        options={\r\n                            arrivalDate\r\n                                ? this.getListOfAvalibleTimeSlots(\r\n                                    servicePointId,\r\n                                    arrivalDate,\r\n                                )\r\n                                : []\r\n                        }\r\n                        selection\r\n                        onChange={this.timeSlotChanged}\r\n                        value={arrivalTime}\r\n                    ></Select>\r\n                </Form.Field>\r\n                <Form.Field>\r\n                    <div\r\n                        className='mapouter'\r\n                        style={{ height: '300px', width: '300px' }}\r\n                    >\r\n                        <div className='gmap_canvas'>\r\n                            <MapComponent location={servicePointLocation} />\r\n                        </div>\r\n                    </div>\r\n                </Form.Field>\r\n            </Form>\r\n        );\r\n    }\r\n}\r\n\r\nfunction mapState(state) {\r\n    const { servicePoints, nearestServicePointChecked, servicePointId, arrivalDate, arrivalTime } = state.servicePoint;\r\n    return {\r\n        servicePoints,\r\n        nearestServicePointChecked,\r\n        servicePointId,\r\n        arrivalDate,\r\n        arrivalTime,\r\n    };\r\n}\r\n\r\nconst actionCreators = {\r\n    selectedServicePointChanged: servicePointActions.selectedServicePointChanged,\r\n    nearestServicePointChoiceChanged: servicePointActions.nearestServicePointChoiceChanged,\r\n    selectedArrivalDateChanged: servicePointActions.selectedArrivalDateChanged,\r\n    selectedArrivalTimeChanged: servicePointActions.selectedArrivalTimeChanged,\r\n};\r\n\r\nconst connectedSelectSPAndTimeSlot = connect(mapState, actionCreators)(SelectSPAndTimeSlot);\r\n\r\nexport { connectedSelectSPAndTimeSlot as SelectSPAndTimeSlot };\r\n"]},"metadata":{},"sourceType":"module"}