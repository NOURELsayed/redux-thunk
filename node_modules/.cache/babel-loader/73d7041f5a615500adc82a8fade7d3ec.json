{"ast":null,"code":"import { searchConstants } from '../constants';\nconst initialState = {\n  searchKeyWord: '',\n  searchResults: []\n};\nexport function search(state = initialState, action) {\n  switch (action.type) {\n    case searchConstants.SEARCH_REQUEST:\n      return { ...state,\n        searchKeyWord: action.searchKeyWord\n      };\n\n    case searchConstants.SEARCH_SUCCESS:\n      return { ...state,\n        searchResults: action.searchResults,\n        searchKeyWord: action.searchKeyWord,\n        isLoading: action.isLoading\n      };\n\n    case searchConstants.SEARCH_KEYWORD_CHANGED:\n      return { ...state,\n        searchKeyWord: action.searchKeyWord\n      };\n\n    case searchConstants.FILTER_CHANGE_ADD:\n      const filters = { ...state.filters\n      };\n\n      if (filters[action.name]) {\n        if (filters[action.name].includes(action.value)) {\n          return { ...state\n          };\n        }\n\n        filters[action.name].push(action.value);\n        return { ...state,\n          filters\n        };\n      }\n\n      filters[action.name] = [action.value];\n      return { ...state,\n        filters\n      };\n\n    case searchConstants.FILTER_CHANGE_REMOVE:\n      const currentFilters = { ...state.filters\n      };\n\n      if (Object.keys(currentFilters).length === 1 && currentFilters[0] && (currentFilters[0].values === \"\" || currentFilters[0].values === undefined)) {\n        return { ...state\n        };\n      }\n\n      if (currentFilters[action.name]) {\n        currentFilters[action.name] = currentFilters[action.name].filter(value => {\n          return value !== action.value;\n        });\n        return { ...state,\n          filters: currentFilters\n        };\n      }\n\n      break;\n    // sets the max price filter\n\n    case searchConstants.MAX_PRICE_FILTER_SET:\n      var theFilters = { ...state.filters\n      };\n      theFilters[0] = {\n        name: \"Max Price Filter\",\n        values: [action.value]\n      };\n      return { ...state,\n        filters: theFilters\n      };\n\n    default:\n      return state;\n  }\n}","map":{"version":3,"sources":["/media/norhan/New Volume/work/React-projects/test-redux/src/reducers/search.reducer.js"],"names":["searchConstants","initialState","searchKeyWord","searchResults","search","state","action","type","SEARCH_REQUEST","SEARCH_SUCCESS","isLoading","SEARCH_KEYWORD_CHANGED","FILTER_CHANGE_ADD","filters","name","includes","value","push","FILTER_CHANGE_REMOVE","currentFilters","Object","keys","length","values","undefined","filter","MAX_PRICE_FILTER_SET","theFilters"],"mappings":"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","sourcesContent":["import { searchConstants } from '../constants';\r\n\r\nconst initialState = {\r\n    searchKeyWord: '',\r\n    searchResults: [],\r\n};\r\n\r\nexport function search(state = initialState, action) {\r\n    switch (action.type) {\r\n        case searchConstants.SEARCH_REQUEST:\r\n            return {\r\n                ...state,\r\n                searchKeyWord: action.searchKeyWord,\r\n               \r\n            };\r\n        case searchConstants.SEARCH_SUCCESS:\r\n            return {\r\n                ...state,\r\n                searchResults: action.searchResults,\r\n                searchKeyWord: action.searchKeyWord,\r\n                isLoading: action.isLoading,\r\n            };\r\n        case searchConstants.SEARCH_KEYWORD_CHANGED:\r\n            return {\r\n                ...state,\r\n                searchKeyWord: action.searchKeyWord,\r\n            };\r\n            case searchConstants.FILTER_CHANGE_ADD:\r\n                const filters = { ...state.filters };\r\n               \r\n                if (filters[action.name]) {\r\n                \r\n                  if (filters[action.name].includes(action.value)) {\r\n                    \r\n                    return { ...state };\r\n                  }\r\n                  filters[action.name].push(action.value);\r\n                  return {\r\n                    ...state,\r\n                    filters,\r\n                  };\r\n                }\r\n                filters[action.name] = [action.value];\r\n                return {\r\n                  ...state,\r\n                  filters,\r\n                };\r\n          \r\n                case searchConstants.FILTER_CHANGE_REMOVE:\r\n                    const currentFilters = { ...state.filters };\r\n                    if (\r\n                      Object.keys(currentFilters).length === 1 &&\r\n                      (currentFilters[0] && (currentFilters[0].values === \"\"||currentFilters[0].values === undefined))\r\n                    ) {\r\n                      \r\n                      return {\r\n                        ...state,\r\n                      };\r\n                    }\r\n                    if (currentFilters[action.name]) {\r\n                      currentFilters[action.name] = currentFilters[action.name].filter(\r\n                        (value) => {\r\n                          return value !== action.value;\r\n                        }\r\n                      );\r\n              \r\n                      \r\n                      return {\r\n                        ...state,\r\n                        filters: currentFilters,\r\n                      };\r\n                    }\r\n                    break;\r\n    // sets the max price filter\r\n    case searchConstants.MAX_PRICE_FILTER_SET:\r\n      var theFilters = { ...state.filters };\r\n      theFilters[0] = { name: \"Max Price Filter\", values: [action.value] };\r\n\r\n      return {\r\n        ...state,\r\n        filters: theFilters,\r\n      };\r\n\r\n \r\n\r\n         \r\n        default:\r\n            return state;\r\n    }\r\n}\r\n"]},"metadata":{},"sourceType":"module"}