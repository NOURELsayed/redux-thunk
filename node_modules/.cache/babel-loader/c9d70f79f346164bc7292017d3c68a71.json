{"ast":null,"code":"import { termsandConditionsService } from \"../services\";\nimport { alertActions } from \"./\";\nimport { termsandConditionsConstants } from '../constants';\nexport const termsandConditionsActions = {\n  viewTermsandConditions\n};\n\nfunction viewTermsandConditions() {\n  return async dispatch => {\n    await dispatch(request());\n\n    try {\n      const {\n        data\n      } = await termsandConditionsService.viewTermsandConditions();\n      dispatch(success(data));\n    } catch (ex) {\n      dispatch(failure(ex));\n      dispatch(alertActions.error({\n        header: ex.message\n      }));\n    }\n  };\n\n  function request() {\n    return {\n      type: termsandConditionsConstants.VIEW_TERMS_AND_CONDITIONS_REQUEST\n    };\n  }\n\n  function success(termsandConditions) {\n    return {\n      type: termsandConditionsConstants.VIEW_TERMS_AND_CONDITIONS_SUCCESS,\n      termsandConditions\n    };\n  }\n\n  function failure(errors) {\n    return {\n      type: termsandConditionsConstants.VIEW_TERMS_AND_CONDITIONS_FAILURE,\n      errors\n    };\n  }\n}","map":{"version":3,"sources":["/media/norhan/New Volume/work/React-projects/test-redux/src/actions/termsandconditions.action.js"],"names":["termsandConditionsService","alertActions","termsandConditionsConstants","termsandConditionsActions","viewTermsandConditions","dispatch","request","data","success","ex","failure","error","header","message","type","VIEW_TERMS_AND_CONDITIONS_REQUEST","termsandConditions","VIEW_TERMS_AND_CONDITIONS_SUCCESS","errors","VIEW_TERMS_AND_CONDITIONS_FAILURE"],"mappings":"AAAA,SAASA,yBAAT,QAA0C,aAA1C;AACA,SAASC,YAAT,QAA6B,IAA7B;AACA,SAAQC,2BAAR,QAA0C,cAA1C;AAGA,OAAO,MAAMC,yBAAyB,GAAG;AACzCC,EAAAA;AADyC,CAAlC;;AAIP,SAASA,sBAAT,GAAkC;AAC9B,SAAO,MAAOC,QAAP,IAAoB;AACzB,UAAMA,QAAQ,CAACC,OAAO,EAAR,CAAd;;AACA,QAAI;AACF,YAAM;AAAEC,QAAAA;AAAF,UAAS,MAAMP,yBAAyB,CAACI,sBAA1B,EAArB;AACAC,MAAAA,QAAQ,CAACG,OAAO,CAACD,IAAD,CAAR,CAAR;AACD,KAHD,CAGE,OAAOE,EAAP,EAAW;AACXJ,MAAAA,QAAQ,CAACK,OAAO,CAACD,EAAD,CAAR,CAAR;AACAJ,MAAAA,QAAQ,CAACJ,YAAY,CAACU,KAAb,CAAmB;AAACC,QAAAA,MAAM,EAAEH,EAAE,CAACI;AAAZ,OAAnB,CAAD,CAAR;AACD;AACF,GATD;;AAWA,WAASP,OAAT,GAAmB;AACjB,WAAO;AAACQ,MAAAA,IAAI,EAAEZ,2BAA2B,CAACa;AAAnC,KAAP;AACD;;AAED,WAASP,OAAT,CAAiBQ,kBAAjB,EAAqC;AACnC,WAAO;AAACF,MAAAA,IAAI,EAAEZ,2BAA2B,CAACe,iCAAnC;AAAsED,MAAAA;AAAtE,KAAP;AACD;;AAED,WAASN,OAAT,CAAiBQ,MAAjB,EAAyB;AACvB,WAAO;AAACJ,MAAAA,IAAI,EAAEZ,2BAA2B,CAACiB,iCAAnC;AAAsED,MAAAA;AAAtE,KAAP;AACD;AAEF","sourcesContent":["import { termsandConditionsService } from \"../services\";\r\nimport { alertActions } from \"./\";\r\nimport {termsandConditionsConstants} from '../constants';\r\n\r\n\r\nexport const termsandConditionsActions = {\r\nviewTermsandConditions,\r\n};\r\n\r\nfunction viewTermsandConditions() {\r\n    return async (dispatch) => {\r\n      await dispatch(request());\r\n      try {\r\n        const { data }=await termsandConditionsService.viewTermsandConditions();\r\n        dispatch(success(data));\r\n      } catch (ex) {\r\n        dispatch(failure(ex));\r\n        dispatch(alertActions.error({header: ex.message}));\r\n      }\r\n    };\r\n  \r\n    function request() {\r\n      return {type: termsandConditionsConstants.VIEW_TERMS_AND_CONDITIONS_REQUEST};\r\n    }\r\n  \r\n    function success(termsandConditions) {\r\n      return {type: termsandConditionsConstants.VIEW_TERMS_AND_CONDITIONS_SUCCESS, termsandConditions};\r\n    }\r\n  \r\n    function failure(errors) {\r\n      return {type: termsandConditionsConstants.VIEW_TERMS_AND_CONDITIONS_FAILURE, errors};\r\n    }\r\n  \r\n  }"]},"metadata":{},"sourceType":"module"}