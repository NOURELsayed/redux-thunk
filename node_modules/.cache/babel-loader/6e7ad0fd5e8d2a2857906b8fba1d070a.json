{"ast":null,"code":"var _jsxFileName = \"/media/norhan/New Volume/work/React-projects/test-redux/src/containers/ServicePoint/ChooseSPAndTime.jsx\";\nimport React, { Component } from \"react\";\nimport { connect } from \"react-redux\";\nimport { Checkbox, Grid, Form, Button } from \"semantic-ui-react\";\nimport { servicePointActions, userActions, orderActions } from \"../../actions\";\nimport { servicePointConstants } from \"../../constants\";\nimport { SelectSPAndTimeSlot } from \"./SelectSPAndTimeSlot\";\nimport { AuthorizedPersonForm } from \"./AuthorizedPersonForm\";\nimport { isPickUpDataValid } from \"./shared\";\n/**\r\n * To use this component, you have to provide (in component props):\r\n *     * next({personInCharge, date, time, SP}).\r\n */\n\nclass ChooseSPAndTime extends Component {\n  constructor(...args) {\n    super(...args);\n\n    this.componentDidMount = async () => {\n      if (this.props.orderId) {\n        if (this.props.seller) {\n          await this.props.viewOrderSeller(this.props.orderId);\n        } else {\n          await this.props.viewOrder(this.props.orderId);\n        }\n      }\n\n      await this.props.getServicePointsData();\n      await this.props.getIsUserVerified(this.props.user.id);\n    };\n\n    this.personInChargeChanged = (e, {\n      value\n    }) => {\n      this.props.selectedPersonInChargeChanged(value);\n    };\n\n    this.confirmPickUpData = () => {\n      //TODO: send pickup info\n      this.props.next({\n        personInCharge: this.props.personInCharge,\n        authorisedUserId: this.props.authorisedUserId,\n        authorizedName: this.props.authorizedName,\n        authorizedID: this.props.authorizedID\n      }, this.props.arrivalDate, this.props.arrivalTime, this.props.servicePointId);\n    };\n\n    this.enableConfirmPickup = () => {\n      return isPickUpDataValid(this.props);\n    };\n  }\n\n  render() {\n    const {\n      orderDetailsData: order\n    } = this.props;\n    return /*#__PURE__*/React.createElement(Grid, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 54,\n        columnNumber: 7\n      }\n    }, this.props.renderType === \"withdrawal\" || /*#__PURE__*/React.createElement(Grid.Row, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 56,\n        columnNumber: 11\n      }\n    }, /*#__PURE__*/React.createElement(Grid.Column, {\n      width: 12,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 57,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(Form, {\n      style: {\n        padding: \"0em 0em\"\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 58,\n        columnNumber: 15\n      }\n    }, /*#__PURE__*/React.createElement(Form.Field, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 59,\n        columnNumber: 17\n      }\n    }, /*#__PURE__*/React.createElement(Checkbox, {\n      radio: true,\n      label: \"Will Pickup Item By Myself\",\n      name: \"personInCharge\",\n      value: servicePointConstants.USER,\n      checked: this.props.personInCharge === servicePointConstants.USER,\n      onChange: this.personInChargeChanged,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 60,\n        columnNumber: 19\n      }\n    })), /*#__PURE__*/React.createElement(Form.Field, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 72,\n        columnNumber: 17\n      }\n    }, /*#__PURE__*/React.createElement(Checkbox, {\n      radio: true,\n      label: \"Will Authorize Another Person to Pickup\",\n      name: \"personInCharge\",\n      value: servicePointConstants.AUTHORIZED_PERSON,\n      disabled: !this.props.isVerified,\n      checked: this.props.personInCharge === servicePointConstants.AUTHORIZED_PERSON,\n      onChange: this.personInChargeChanged,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 73,\n        columnNumber: 19\n      }\n    })))), /*#__PURE__*/React.createElement(Grid.Column, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 89,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(Button, {\n      positive: true,\n      disabled: !this.enableConfirmPickup(),\n      onClick: this.confirmPickUpData,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 90,\n        columnNumber: 15\n      }\n    }, \"Confirm Pickup Data\"))), /*#__PURE__*/React.createElement(Grid.Row, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 101,\n        columnNumber: 9\n      }\n    }, this.props.personInCharge === servicePointConstants.USER ? /*#__PURE__*/React.createElement(SelectSPAndTimeSlot, {\n      orderData: order,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 103,\n        columnNumber: 13\n      }\n    }) : /*#__PURE__*/React.createElement(AuthorizedPersonForm, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 105,\n        columnNumber: 13\n      }\n    })));\n  }\n\n}\n\nfunction mapState(state) {\n  const {\n    orderDetailsData\n  } = state.order;\n  const {\n    user\n  } = state.authentication;\n  const {\n    isVerified\n  } = state.users;\n  const {\n    personInCharge,\n    authorizedDataConfirmed,\n    authorizedName,\n    authorizedID,\n    authorisedUserId,\n    servicePoints,\n    servicePointId,\n    arrivalDate,\n    arrivalTime\n  } = state.servicePoint;\n  return {\n    user,\n    isVerified,\n    personInCharge,\n    authorizedDataConfirmed,\n    authorizedName,\n    authorizedID,\n    authorisedUserId,\n    servicePoints,\n    servicePointId,\n    arrivalDate,\n    arrivalTime,\n    orderDetailsData\n  };\n}\n\nconst actionCreators = {\n  viewOrder: orderActions.viewOrder,\n  viewOrderSeller: orderActions.viewOrderSeller,\n  getServicePointsData: servicePointActions.getServicePointsData,\n  selectedPersonInChargeChanged: servicePointActions.selectedPersonInChargeChanged,\n  getIsUserVerified: userActions.getIsUserVerified\n};\nconst connectedChooseSPAndTime = connect(mapState, actionCreators)(ChooseSPAndTime);\nexport { connectedChooseSPAndTime as ChooseSPAndTime };","map":{"version":3,"sources":["/media/norhan/New Volume/work/React-projects/test-redux/src/containers/ServicePoint/ChooseSPAndTime.jsx"],"names":["React","Component","connect","Checkbox","Grid","Form","Button","servicePointActions","userActions","orderActions","servicePointConstants","SelectSPAndTimeSlot","AuthorizedPersonForm","isPickUpDataValid","ChooseSPAndTime","componentDidMount","props","orderId","seller","viewOrderSeller","viewOrder","getServicePointsData","getIsUserVerified","user","id","personInChargeChanged","e","value","selectedPersonInChargeChanged","confirmPickUpData","next","personInCharge","authorisedUserId","authorizedName","authorizedID","arrivalDate","arrivalTime","servicePointId","enableConfirmPickup","render","orderDetailsData","order","renderType","padding","USER","AUTHORIZED_PERSON","isVerified","mapState","state","authentication","users","authorizedDataConfirmed","servicePoints","servicePoint","actionCreators","connectedChooseSPAndTime"],"mappings":"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","sourcesContent":["import React, { Component } from \"react\";\r\nimport { connect } from \"react-redux\";\r\nimport { Checkbox, Grid, Form, Button } from \"semantic-ui-react\";\r\nimport { servicePointActions, userActions, orderActions } from \"../../actions\";\r\nimport { servicePointConstants } from \"../../constants\";\r\nimport { SelectSPAndTimeSlot } from \"./SelectSPAndTimeSlot\";\r\nimport { AuthorizedPersonForm } from \"./AuthorizedPersonForm\";\r\nimport { isPickUpDataValid } from \"./shared\";\r\n\r\n/**\r\n * To use this component, you have to provide (in component props):\r\n *     * next({personInCharge, date, time, SP}).\r\n */\r\nclass ChooseSPAndTime extends Component {\r\n   componentDidMount= async()=> {\r\n     if(this.props.orderId){\r\n       if(this.props.seller){\r\n        await this.props.viewOrderSeller(this.props.orderId);\r\n       }else{\r\n        await this.props.viewOrder(this.props.orderId);\r\n       }\r\n     }\r\n    await this.props.getServicePointsData();\r\n    await this.props.getIsUserVerified(this.props.user.id);    \r\n  }\r\n  \r\n  personInChargeChanged = (e, { value }) => {\r\n    this.props.selectedPersonInChargeChanged(value);\r\n  };\r\n\r\n  confirmPickUpData = () => {\r\n    //TODO: send pickup info\r\n    this.props.next(\r\n      {\r\n        personInCharge: this.props.personInCharge,\r\n        authorisedUserId: this.props.authorisedUserId,\r\n        authorizedName: this.props.authorizedName,\r\n        authorizedID: this.props.authorizedID,\r\n      },\r\n      this.props.arrivalDate,\r\n      this.props.arrivalTime,\r\n      this.props.servicePointId\r\n    );\r\n  };\r\n\r\n  enableConfirmPickup = () => {\r\n    return isPickUpDataValid(this.props);\r\n  };\r\n\r\n  render() {\r\n    const { orderDetailsData: order } = this.props;\r\n\r\n    return (\r\n      <Grid>\r\n        {this.props.renderType === \"withdrawal\" || (\r\n          <Grid.Row>\r\n            <Grid.Column width={12}>\r\n              <Form style={{ padding: \"0em 0em\" }}>\r\n                <Form.Field>\r\n                  <Checkbox\r\n                    radio\r\n                    label=\"Will Pickup Item By Myself\"\r\n                    name=\"personInCharge\"\r\n                    value={servicePointConstants.USER}\r\n                    checked={\r\n                      this.props.personInCharge === servicePointConstants.USER\r\n                    }\r\n                    onChange={this.personInChargeChanged}\r\n                  ></Checkbox>\r\n                </Form.Field>\r\n\r\n                <Form.Field>\r\n                  <Checkbox\r\n                    radio\r\n                    label=\"Will Authorize Another Person to Pickup\"\r\n                    name=\"personInCharge\"\r\n                    value={servicePointConstants.AUTHORIZED_PERSON}\r\n                    disabled={!this.props.isVerified}\r\n                    checked={\r\n                      this.props.personInCharge ===\r\n                      servicePointConstants.AUTHORIZED_PERSON\r\n                    }\r\n                    onChange={this.personInChargeChanged}\r\n                  ></Checkbox>\r\n                </Form.Field>\r\n              </Form>\r\n            </Grid.Column>\r\n\r\n            <Grid.Column>\r\n              <Button\r\n                positive\r\n                disabled={!this.enableConfirmPickup()}\r\n                onClick={this.confirmPickUpData}\r\n              >\r\n                Confirm Pickup Data\r\n              </Button>\r\n            </Grid.Column>\r\n          </Grid.Row>\r\n        )}\r\n\r\n        <Grid.Row>\r\n          {this.props.personInCharge === servicePointConstants.USER ? (\r\n            <SelectSPAndTimeSlot orderData={order} />\r\n          ) : (\r\n            <AuthorizedPersonForm />\r\n          )}\r\n        </Grid.Row>\r\n      </Grid>\r\n    );\r\n  }\r\n}\r\n\r\nfunction mapState(state) {\r\n  const { orderDetailsData } = state.order;\r\n  const { user } = state.authentication;\r\n  const { isVerified } = state.users;\r\n  const {\r\n    personInCharge,\r\n    authorizedDataConfirmed,\r\n    authorizedName,\r\n    authorizedID,\r\n    authorisedUserId,\r\n    servicePoints,\r\n    servicePointId,\r\n    arrivalDate,\r\n    arrivalTime,\r\n  } = state.servicePoint;\r\n\r\n  return {\r\n    user,\r\n    isVerified,\r\n    personInCharge,\r\n    authorizedDataConfirmed,\r\n    authorizedName,\r\n    authorizedID,\r\n    authorisedUserId,\r\n    servicePoints,\r\n    servicePointId,\r\n    arrivalDate,\r\n    arrivalTime,\r\n    orderDetailsData,\r\n  };\r\n}\r\n\r\nconst actionCreators = {\r\n  viewOrder: orderActions.viewOrder,\r\n  viewOrderSeller: orderActions.viewOrderSeller,\r\n\r\n  getServicePointsData: servicePointActions.getServicePointsData,\r\n  selectedPersonInChargeChanged:\r\n    servicePointActions.selectedPersonInChargeChanged,\r\n  getIsUserVerified: userActions.getIsUserVerified,\r\n};\r\n\r\nconst connectedChooseSPAndTime = connect(\r\n  mapState,\r\n  actionCreators\r\n)(ChooseSPAndTime);\r\n\r\nexport { connectedChooseSPAndTime as ChooseSPAndTime };\r\n"]},"metadata":{},"sourceType":"module"}