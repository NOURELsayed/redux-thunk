{"ast":null,"code":"import { validatorConstants } from '../constants';\nimport { validatorService } from '../services';\nexport const validatorActions = {\n  validateInput,\n  validateForm,\n  clear\n};\n\nfunction validateInput(schema, name, value) {\n  return dispatch => {\n    const errors = validatorService.validateInput(schema, name, value);\n\n    if (errors) {\n      const humanErrors = validatorService.buildHumanErrors(schema, errors);\n      dispatch(failure(humanErrors));\n    } else {\n      dispatch(success(name));\n    }\n  };\n\n  function success(input) {\n    return {\n      type: validatorConstants.INPUT_VALIDATE_SUCCESS,\n      input\n    };\n  }\n\n  function failure(errors) {\n    return {\n      type: validatorConstants.INPUT_VALIDATE_FAILURE,\n      errors\n    };\n  }\n}\n\nfunction validateForm(schema, data) {\n  return dispatch => {\n    const errors = validatorService.validateForm(schema, data);\n\n    if (errors) {\n      const humanErrors = validatorService.buildHumanErrors(schema, errors);\n      dispatch(failure(humanErrors));\n    } else {\n      dispatch(success());\n    }\n  };\n\n  function success() {\n    return {\n      type: validatorConstants.FORM_VALIDATE_SUCCESS\n    };\n  }\n\n  function failure(errors) {\n    return {\n      type: validatorConstants.FORM_VALIDATE_FAILURE,\n      errors\n    };\n  }\n}\n\nfunction clear() {\n  return {\n    type: validatorConstants.CLEAR\n  };\n}","map":{"version":3,"sources":["/media/norhan/New Volume/work/React-projects/test-redux/src/actions/validator.actions.js"],"names":["validatorConstants","validatorService","validatorActions","validateInput","validateForm","clear","schema","name","value","dispatch","errors","humanErrors","buildHumanErrors","failure","success","input","type","INPUT_VALIDATE_SUCCESS","INPUT_VALIDATE_FAILURE","data","FORM_VALIDATE_SUCCESS","FORM_VALIDATE_FAILURE","CLEAR"],"mappings":"AAAA,SAAQA,kBAAR,QAAiC,cAAjC;AACA,SAAQC,gBAAR,QAA+B,aAA/B;AAEA,OAAO,MAAMC,gBAAgB,GAAG;AAC9BC,EAAAA,aAD8B;AAE9BC,EAAAA,YAF8B;AAG9BC,EAAAA;AAH8B,CAAzB;;AAMP,SAASF,aAAT,CAAuBG,MAAvB,EAA+BC,IAA/B,EAAqCC,KAArC,EAA4C;AAC1C,SAAOC,QAAQ,IAAI;AACjB,UAAMC,MAAM,GAAGT,gBAAgB,CAACE,aAAjB,CAA+BG,MAA/B,EAAuCC,IAAvC,EAA6CC,KAA7C,CAAf;;AACA,QAAIE,MAAJ,EAAY;AACV,YAAMC,WAAW,GAAGV,gBAAgB,CAACW,gBAAjB,CAAkCN,MAAlC,EAA0CI,MAA1C,CAApB;AACAD,MAAAA,QAAQ,CAACI,OAAO,CAACF,WAAD,CAAR,CAAR;AACD,KAHD,MAGO;AACLF,MAAAA,QAAQ,CAACK,OAAO,CAACP,IAAD,CAAR,CAAR;AACD;AACF,GARD;;AAUA,WAASO,OAAT,CAAiBC,KAAjB,EAAwB;AACtB,WAAO;AAACC,MAAAA,IAAI,EAAEhB,kBAAkB,CAACiB,sBAA1B;AAAkDF,MAAAA;AAAlD,KAAP;AACD;;AAED,WAASF,OAAT,CAAiBH,MAAjB,EAAyB;AACvB,WAAO;AAACM,MAAAA,IAAI,EAAEhB,kBAAkB,CAACkB,sBAA1B;AAAkDR,MAAAA;AAAlD,KAAP;AACD;AACF;;AAED,SAASN,YAAT,CAAsBE,MAAtB,EAA8Ba,IAA9B,EAAoC;AAClC,SAAOV,QAAQ,IAAI;AACjB,UAAMC,MAAM,GAAGT,gBAAgB,CAACG,YAAjB,CAA8BE,MAA9B,EAAsCa,IAAtC,CAAf;;AACA,QAAIT,MAAJ,EAAY;AACV,YAAMC,WAAW,GAAGV,gBAAgB,CAACW,gBAAjB,CAAkCN,MAAlC,EAA0CI,MAA1C,CAApB;AACAD,MAAAA,QAAQ,CAACI,OAAO,CAACF,WAAD,CAAR,CAAR;AACD,KAHD,MAGO;AACLF,MAAAA,QAAQ,CAACK,OAAO,EAAR,CAAR;AACD;AACF,GARD;;AAUA,WAASA,OAAT,GAAmB;AACjB,WAAO;AAACE,MAAAA,IAAI,EAAEhB,kBAAkB,CAACoB;AAA1B,KAAP;AACD;;AAED,WAASP,OAAT,CAAiBH,MAAjB,EAAyB;AACvB,WAAO;AAACM,MAAAA,IAAI,EAAEhB,kBAAkB,CAACqB,qBAA1B;AAAiDX,MAAAA;AAAjD,KAAP;AACD;AACF;;AAED,SAASL,KAAT,GAAiB;AACf,SAAO;AAACW,IAAAA,IAAI,EAAEhB,kBAAkB,CAACsB;AAA1B,GAAP;AACD","sourcesContent":["import {validatorConstants} from '../constants';\r\nimport {validatorService} from '../services';\r\n\r\nexport const validatorActions = {\r\n  validateInput,\r\n  validateForm,\r\n  clear\r\n};\r\n\r\nfunction validateInput(schema, name, value) {\r\n  return dispatch => {\r\n    const errors = validatorService.validateInput(schema, name, value);\r\n    if (errors) {\r\n      const humanErrors = validatorService.buildHumanErrors(schema, errors);\r\n      dispatch(failure(humanErrors));\r\n    } else {\r\n      dispatch(success(name));\r\n    }\r\n  };\r\n\r\n  function success(input) {\r\n    return {type: validatorConstants.INPUT_VALIDATE_SUCCESS, input}\r\n  }\r\n\r\n  function failure(errors) {\r\n    return {type: validatorConstants.INPUT_VALIDATE_FAILURE, errors}\r\n  }\r\n}\r\n\r\nfunction validateForm(schema, data) {\r\n  return dispatch => {\r\n    const errors = validatorService.validateForm(schema, data);\r\n    if (errors) {\r\n      const humanErrors = validatorService.buildHumanErrors(schema, errors);\r\n      dispatch(failure(humanErrors));\r\n    } else {\r\n      dispatch(success());\r\n    }\r\n  };\r\n\r\n  function success() {\r\n    return {type: validatorConstants.FORM_VALIDATE_SUCCESS}\r\n  }\r\n\r\n  function failure(errors) {\r\n    return {type: validatorConstants.FORM_VALIDATE_FAILURE, errors}\r\n  }\r\n}\r\n\r\nfunction clear() {\r\n  return {type: validatorConstants.CLEAR};\r\n}\r\n"]},"metadata":{},"sourceType":"module"}