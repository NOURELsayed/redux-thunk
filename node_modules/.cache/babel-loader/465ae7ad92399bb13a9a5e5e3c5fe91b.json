{"ast":null,"code":"var _jsxFileName = \"/media/norhan/New Volume/work/React-projects/test-redux/src/containers/ShoppingCart/ShoppingCart.jsx\";\nimport React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport { shoppingCartActions } from '../../actions';\nimport { Button, Grid, Container, Segment, Label, Item } from 'semantic-ui-react';\nimport { ShoppingCartItem } from './ShoppingCartItem';\nimport CheckEmailModal from \"../../components/EmailCheckModal/CheckEmailModal\";\nimport { onSale, calculatePrice, history } from '../../helpers';\n\nclass ShoppingCart extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      userEmailFound: {},\n      showModal: false\n    };\n\n    this.removeAllItems = () => {\n      this.props.removeAllItems();\n    };\n\n    this.handleProceedToCheckoutClicked = () => {\n      const {\n        userEmailFound\n      } = this.state;\n      if (!userEmailFound.email || !userEmailFound.isVerified) this.setState({\n        showModal: true\n      });else this.resetSoldOutItemsThenCheckOut();\n    };\n\n    this.resetSoldOutItemsThenCheckOut = () => {\n      let cartItems = this.props.shoppingCartData.posts;\n\n      for (let i = 0; i < cartItems.length; i++) {\n        if (cartItems[i].post.availableQuantity === 0 || cartItems[i].post.status === 'standBy') {\n          this.props.resetItem(cartItems[i].post._id);\n        }\n      }\n\n      this.proceedToCheckout();\n    };\n\n    this.proceedToCheckout = () => {\n      this.props.proceedToCheckout();\n    };\n\n    this.finalPrice = ({\n      price,\n      discount\n    }) => onSale(discount) ? calculatePrice(price, discount) : price;\n\n    this.handleCloseEmailModal = () => {\n      if (this.state.userEmailFound.email) history.push(\"/\");else history.push(\"/profile/\");\n    };\n  }\n\n  componentDidMount() {\n    if (this.props.user.email) {\n      const {\n        email\n      } = this.props.user;\n      this.setState({\n        userEmailFound: {\n          email: email.address,\n          isVerified: email.isVerified\n        }\n      });\n    }\n\n    this.props.getUserShoppingCartData();\n  }\n\n  render() {\n    let cartItems = this.props.shoppingCartData.posts;\n    let totalCost = 0;\n    let totalNumberOfItems = 0;\n\n    for (let i = 0; i < cartItems.length; i++) {\n      if (cartItems[i].post.availableQuantity > 0 && cartItems[i].post.status !== 'standBy') {\n        totalCost += cartItems[i].quantity * this.finalPrice(cartItems[i].post);\n        totalNumberOfItems += cartItems[i].quantity;\n      }\n    }\n\n    return /*#__PURE__*/React.createElement(Container, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 75,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(Grid, {\n      columns: 2,\n      divided: true,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 76,\n        columnNumber: 17\n      }\n    }, !this.state.userEmailFound.isVerified && /*#__PURE__*/React.createElement(CheckEmailModal, {\n      showModal: this.state.showModal,\n      userEmail: this.state.userEmailFound,\n      handleCloseModal: this.handleCloseEmailModal,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 78,\n        columnNumber: 21\n      }\n    }), /*#__PURE__*/React.createElement(Grid.Row, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 83,\n        columnNumber: 21\n      }\n    }, /*#__PURE__*/React.createElement(Grid.Column, {\n      width: \"10\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 84,\n        columnNumber: 25\n      }\n    }, /*#__PURE__*/React.createElement(Label, {\n      size: \"huge\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 85,\n        columnNumber: 29\n      }\n    }, \"Items \", `(${totalNumberOfItems})`), /*#__PURE__*/React.createElement(Segment, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 88,\n        columnNumber: 29\n      }\n    }, cartItems && cartItems.length > 0 ? /*#__PURE__*/React.createElement(Item.Group, {\n      divided: true,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 90,\n        columnNumber: 37\n      }\n    }, cartItems.map(item => /*#__PURE__*/React.createElement(ShoppingCartItem, {\n      item: item,\n      key: item._id,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 92,\n        columnNumber: 45\n      }\n    })), /*#__PURE__*/React.createElement(Item, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 94,\n        columnNumber: 41\n      }\n    }, /*#__PURE__*/React.createElement(Button, {\n      negative: true,\n      onClick: this.removeAllItems,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 95,\n        columnNumber: 45\n      }\n    }, \"Remove All\"))) : /*#__PURE__*/React.createElement(\"h1\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 104,\n        columnNumber: 41\n      }\n    }, \"Shopping cart is empty !!!\"))), /*#__PURE__*/React.createElement(Grid.Column, {\n      width: \"4\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 108,\n        columnNumber: 25\n      }\n    }, /*#__PURE__*/React.createElement(Segment, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 109,\n        columnNumber: 29\n      }\n    }, /*#__PURE__*/React.createElement(Grid, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 110,\n        columnNumber: 33\n      }\n    }, /*#__PURE__*/React.createElement(Grid.Row, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 111,\n        columnNumber: 37\n      }\n    }, /*#__PURE__*/React.createElement(Grid.Column, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 112,\n        columnNumber: 41\n      }\n    }, /*#__PURE__*/React.createElement(Label, {\n      size: \"big\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 113,\n        columnNumber: 45\n      }\n    }, \"Total : \", totalCost + ' LE'))), /*#__PURE__*/React.createElement(Grid.Row, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 118,\n        columnNumber: 37\n      }\n    }, /*#__PURE__*/React.createElement(Grid.Column, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 119,\n        columnNumber: 41\n      }\n    }, /*#__PURE__*/React.createElement(Button, {\n      onClick: this.handleProceedToCheckoutClicked,\n      disabled: !cartItems || cartItems.length === 0 || totalCost === 0,\n      positive: true,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 120,\n        columnNumber: 45\n      }\n    }, \"Proceed to checkout\")))))))));\n  }\n\n}\n\nfunction mapState(state) {\n  const {\n    user\n  } = state.authentication;\n  const {\n    shoppingCartData\n  } = state.shoppingCart;\n  return {\n    user,\n    shoppingCartData\n  };\n}\n\nconst actionCreators = {\n  getUserShoppingCartData: shoppingCartActions.viewCart,\n  removeAllItems: shoppingCartActions.removeAllItems,\n  proceedToCheckout: shoppingCartActions.proceedToCheckout,\n  removeItem: shoppingCartActions.removeItem,\n  resetItem: shoppingCartActions.resetItem\n};\nconst connectedShoppingCart = connect(mapState, actionCreators)(ShoppingCart);\nexport { connectedShoppingCart as ShoppingCart };","map":{"version":3,"sources":["/media/norhan/New Volume/work/React-projects/test-redux/src/containers/ShoppingCart/ShoppingCart.jsx"],"names":["React","Component","connect","shoppingCartActions","Button","Grid","Container","Segment","Label","Item","ShoppingCartItem","CheckEmailModal","onSale","calculatePrice","history","ShoppingCart","state","userEmailFound","showModal","removeAllItems","props","handleProceedToCheckoutClicked","email","isVerified","setState","resetSoldOutItemsThenCheckOut","cartItems","shoppingCartData","posts","i","length","post","availableQuantity","status","resetItem","_id","proceedToCheckout","finalPrice","price","discount","handleCloseEmailModal","push","componentDidMount","user","address","getUserShoppingCartData","render","totalCost","totalNumberOfItems","quantity","map","item","mapState","authentication","shoppingCart","actionCreators","viewCart","removeItem","connectedShoppingCart"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { shoppingCartActions } from '../../actions';\r\nimport {\r\n    Button,\r\n    Grid,\r\n    Container,\r\n    Segment,\r\n    Label,\r\n    Item,\r\n} from 'semantic-ui-react';\r\n\r\nimport { ShoppingCartItem } from './ShoppingCartItem';\r\nimport CheckEmailModal from \"../../components/EmailCheckModal/CheckEmailModal\";\r\nimport { onSale, calculatePrice, history } from '../../helpers';\r\n\r\nclass ShoppingCart extends Component {\r\n    state = {\r\n        userEmailFound: {},\r\n        showModal: false,\r\n    }\r\n\r\n    componentDidMount() {\r\n        if (this.props.user.email) {\r\n            const { email } = this.props.user;\r\n            this.setState({ userEmailFound: { email: email.address, isVerified: email.isVerified } });\r\n        }\r\n        this.props.getUserShoppingCartData();\r\n    }\r\n\r\n    removeAllItems = () => {\r\n        this.props.removeAllItems();\r\n    };\r\n\r\n    handleProceedToCheckoutClicked = () => {\r\n        const { userEmailFound } = this.state; \r\n        if (!userEmailFound.email || !userEmailFound.isVerified) this.setState({ showModal: true });\r\n        else this.resetSoldOutItemsThenCheckOut();\r\n    }\r\n\r\n    resetSoldOutItemsThenCheckOut = () => {\r\n        let cartItems = this.props.shoppingCartData.posts;\r\n        for (let i = 0; i < cartItems.length; i++) {                \r\n            if(cartItems[i].post.availableQuantity===0 || cartItems[i].post.status === 'standBy'){\r\n                this.props.resetItem(\r\n                    cartItems[i].post._id,\r\n                );\r\n            }\r\n        }\r\n       this.proceedToCheckout();\r\n    }\r\n\r\n    proceedToCheckout = () => {\r\n      this.props.proceedToCheckout();\r\n    };\r\n\r\n    finalPrice = ({ price, discount }) => onSale(discount) ? calculatePrice(price, discount) : price;\r\n\r\n    handleCloseEmailModal = () => {\r\n        if (this.state.userEmailFound.email) history.push(\"/\");\r\n        else history.push(\"/profile/\");\r\n    }\r\n\r\n    render() {\r\n        let cartItems = this.props.shoppingCartData.posts;\r\n        let totalCost = 0;\r\n        let totalNumberOfItems = 0;\r\n        for (let i = 0; i < cartItems.length; i++) {\r\n            if (cartItems[i].post.availableQuantity > 0 && cartItems[i].post.status !== 'standBy') {\r\n                totalCost += cartItems[i].quantity * this.finalPrice(cartItems[i].post);\r\n                totalNumberOfItems += cartItems[i].quantity;\r\n            }\r\n        }\r\n        return (\r\n            <Container>\r\n                <Grid columns={2} divided>\r\n                    {!this.state.userEmailFound.isVerified && \r\n                    <CheckEmailModal\r\n                        showModal={this.state.showModal}\r\n                        userEmail={this.state.userEmailFound} \r\n                        handleCloseModal={this.handleCloseEmailModal}\r\n                    />}\r\n                    <Grid.Row>\r\n                        <Grid.Column width='10'>\r\n                            <Label size='huge'>\r\n                                Items {`(${totalNumberOfItems})`}\r\n                            </Label>\r\n                            <Segment>\r\n                                {cartItems && cartItems.length > 0 ? (\r\n                                    <Item.Group divided>\r\n                                        {cartItems.map((item) => (\r\n                                            <ShoppingCartItem item={item} key={item._id}/>\r\n                                        ))}\r\n                                        <Item>\r\n                                            <Button\r\n                                                negative\r\n                                                onClick={this.removeAllItems}\r\n                                            >\r\n                                                Remove All\r\n                                            </Button>\r\n                                        </Item>\r\n                                    </Item.Group>\r\n                                ) : (\r\n                                        <h1>Shopping cart is empty !!!</h1>\r\n                                    )}\r\n                            </Segment>\r\n                        </Grid.Column>\r\n                        <Grid.Column width='4'>\r\n                            <Segment>\r\n                                <Grid>\r\n                                    <Grid.Row>\r\n                                        <Grid.Column>\r\n                                            <Label size='big'>\r\n                                                Total : {totalCost + ' LE'}\r\n                                            </Label>\r\n                                        </Grid.Column>\r\n                                    </Grid.Row>\r\n                                    <Grid.Row>\r\n                                        <Grid.Column>\r\n                                            <Button\r\n                                                onClick={this.handleProceedToCheckoutClicked}\r\n                                                disabled={!cartItems || cartItems.length === 0 || totalCost === 0}\r\n                                                positive\r\n                                            >\r\n                                                Proceed to checkout\r\n                                            </Button>\r\n                                        </Grid.Column>\r\n                                    </Grid.Row>\r\n                                </Grid>\r\n                            </Segment>\r\n                        </Grid.Column>\r\n                    </Grid.Row>\r\n                </Grid>\r\n            </Container>\r\n        );\r\n    }\r\n}\r\n\r\nfunction mapState(state) {\r\n    const { user } = state.authentication;\r\n    const { shoppingCartData } = state.shoppingCart;\r\n    return {\r\n        user,\r\n        shoppingCartData,\r\n    };\r\n}\r\n\r\nconst actionCreators = {\r\n    getUserShoppingCartData: shoppingCartActions.viewCart,\r\n    removeAllItems: shoppingCartActions.removeAllItems,\r\n    proceedToCheckout: shoppingCartActions.proceedToCheckout,\r\n    removeItem:shoppingCartActions.removeItem,\r\n    resetItem:shoppingCartActions.resetItem,\r\n};\r\n\r\nconst connectedShoppingCart = connect(mapState, actionCreators)(ShoppingCart);\r\n\r\nexport { connectedShoppingCart as ShoppingCart };\r\n"]},"metadata":{},"sourceType":"module"}