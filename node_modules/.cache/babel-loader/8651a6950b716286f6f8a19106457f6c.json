{"ast":null,"code":"import { servicePointConstants } from '../../constants/servicePoint.constants';\nexport { isPickUpDataValid, getAvalibleUnavalibleDaysOfTheWeek, getListOfAvalibleTimeSlots };\n\nfunction isPickUpDataValid(pickupData) {\n  return pickupData.personInCharge === servicePointConstants.USER && pickupData.servicePointId && pickupData.arrivalDate && pickupData.arrivalTime || pickupData.personInCharge === servicePointConstants.AUTHORIZED_PERSON && pickupData.authorizedDataConfirmed && (pickupData.authorisedUserId || pickupData.servicePointId && pickupData.arrivalDate && pickupData.arrivalTime);\n}\n\nfunction getAvalibleUnavalibleDaysOfTheWeek(servicePointId) {\n  const workingDays = [];\n  const offDays = [];\n  const {\n    servicePoints\n  } = this.props;\n\n  for (let i = 0; i < servicePoints.length; i++) {\n    if (servicePoints[i]._id === servicePointId) {\n      for (let j = 0; j < servicePoints[i].workingHours.length; j++) {\n        if (!servicePoints[i].workingHours[j].dayOff) {\n          workingDays.push(j);\n        } else {\n          offDays.push(j);\n        }\n      }\n\n      break;\n    }\n  }\n\n  return {\n    workingDays,\n    offDays\n  };\n}\n\n;\n\nfunction getListOfAvalibleTimeSlots(selectedServicePoint, selectedDateString) {\n  const avalibleTimeSlots = [];\n  let selectedDate = new Date(selectedDateString);\n  let {\n    from,\n    to\n  } = this.getAvalibleWorkingHoursOfDay(selectedServicePoint, selectedDate.getDay());\n\n  if (from && to) {\n    const startTime = from.split(':');\n    const startHour = parseInt(startTime[0]);\n    const EndTime = to.split(':');\n    const endHour = parseInt(EndTime[0]);\n\n    for (let i = startHour; i < endHour - 1; i++) {\n      avalibleTimeSlots.push({\n        key: i,\n        value: i,\n        text: i + ':' + startTime[1] + ' - ' + (i + 1) + ':' + startTime[1]\n      });\n    }\n\n    avalibleTimeSlots.push({\n      key: endHour - 1,\n      value: endHour - 1,\n      text: endHour - 1 + ':' + startTime[1] + ' - ' + endHour + ':' + EndTime[1]\n    });\n  }\n\n  return avalibleTimeSlots;\n}\n\n;","map":{"version":3,"sources":["/media/norhan/New Volume/work/React-projects/test-redux/src/containers/ServicePoint/shared.js"],"names":["servicePointConstants","isPickUpDataValid","getAvalibleUnavalibleDaysOfTheWeek","getListOfAvalibleTimeSlots","pickupData","personInCharge","USER","servicePointId","arrivalDate","arrivalTime","AUTHORIZED_PERSON","authorizedDataConfirmed","authorisedUserId","workingDays","offDays","servicePoints","props","i","length","_id","j","workingHours","dayOff","push","selectedServicePoint","selectedDateString","avalibleTimeSlots","selectedDate","Date","from","to","getAvalibleWorkingHoursOfDay","getDay","startTime","split","startHour","parseInt","EndTime","endHour","key","value","text"],"mappings":"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","sourcesContent":["import { servicePointConstants } from '../../constants/servicePoint.constants'\r\n\r\nexport {\r\n    isPickUpDataValid,\r\n    getAvalibleUnavalibleDaysOfTheWeek,\r\n    getListOfAvalibleTimeSlots,\r\n};\r\n\r\nfunction isPickUpDataValid(pickupData) {\r\n    return (\r\n        (pickupData.personInCharge === servicePointConstants.USER &&\r\n            pickupData.servicePointId &&\r\n            pickupData.arrivalDate &&\r\n            pickupData.arrivalTime) ||\r\n        (pickupData.personInCharge === servicePointConstants.AUTHORIZED_PERSON &&\r\n            pickupData.authorizedDataConfirmed &&\r\n            (pickupData.authorisedUserId ||\r\n                (pickupData.servicePointId &&\r\n                    pickupData.arrivalDate &&\r\n                    pickupData.arrivalTime)))\r\n    );\r\n}\r\n\r\nfunction getAvalibleUnavalibleDaysOfTheWeek(servicePointId) {\r\n    const workingDays = [];\r\n    const offDays = [];\r\n    const { servicePoints } = this.props;\r\n    for (let i = 0; i < servicePoints.length; i++) {\r\n        if (servicePoints[i]._id === servicePointId) {\r\n            for (let j = 0; j < servicePoints[i].workingHours.length; j++) {\r\n                if (!servicePoints[i].workingHours[j].dayOff) {\r\n                    workingDays.push(j);\r\n                } else {\r\n                    offDays.push(j);\r\n                }\r\n            }\r\n            break;\r\n        }\r\n    }\r\n    return { workingDays, offDays };\r\n};\r\n\r\nfunction getListOfAvalibleTimeSlots(selectedServicePoint, selectedDateString) {\r\n    const avalibleTimeSlots = [];\r\n    let selectedDate = new Date(selectedDateString);\r\n\r\n    let { from, to } = this.getAvalibleWorkingHoursOfDay(\r\n        selectedServicePoint,\r\n        selectedDate.getDay(),\r\n    );\r\n    if (from && to) {\r\n        const startTime = from.split(':');\r\n        const startHour = parseInt(startTime[0]);\r\n        const EndTime = to.split(':');\r\n        const endHour = parseInt(EndTime[0]);\r\n        for (let i = startHour; i < endHour - 1; i++) {\r\n            avalibleTimeSlots.push({\r\n                key: i,\r\n                value: i,\r\n                text:\r\n                    i +\r\n                    ':' +\r\n                    startTime[1] +\r\n                    ' - ' +\r\n                    (i + 1) +\r\n                    ':' +\r\n                    startTime[1],\r\n            });\r\n        }\r\n        avalibleTimeSlots.push({\r\n            key: endHour - 1,\r\n            value: endHour - 1,\r\n            text:\r\n                endHour -\r\n                1 +\r\n                ':' +\r\n                startTime[1] +\r\n                ' - ' +\r\n                endHour +\r\n                ':' +\r\n                EndTime[1],\r\n        });\r\n    }\r\n    return avalibleTimeSlots;\r\n};"]},"metadata":{},"sourceType":"module"}